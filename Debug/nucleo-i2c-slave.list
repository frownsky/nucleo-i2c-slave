
nucleo-i2c-slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c24  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005dac  08005dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de4  08005de4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005de4  08005de4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005de4  08005de4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de4  08005de4  00015de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000074  08005e60  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08005e60  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001011f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e3c  00000000  00000000  000301c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b98  00000000  00000000  00032000  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad0  00000000  00000000  00032b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ba90  00000000  00000000  00033668  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b797  00000000  00000000  0004f0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a30c8  00000000  00000000  0005a88f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fd957  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f0  00000000  00000000  000fd9d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005d94 	.word	0x08005d94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08005d94 	.word	0x08005d94

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fd1e 	bl	8000c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f888 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f9ca 	bl	800056c <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f9aa 	bl	8000530 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001dc:	f000 f978 	bl	80004d0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001e0:	f000 f936 	bl	8000450 <MX_I2C1_Init>
  MX_ADC1_Init();
 80001e4:	f000 f8d8 	bl	8000398 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, uart_rx_buff, 1);
 80001e8:	2201      	movs	r2, #1
 80001ea:	4933      	ldr	r1, [pc, #204]	; (80002b8 <main+0xf0>)
 80001ec:	4833      	ldr	r0, [pc, #204]	; (80002bc <main+0xf4>)
 80001ee:	f004 ff8d 	bl	800510c <HAL_UART_Receive_DMA>
  HAL_I2C_EnableListen_IT(&hi2c1);
 80001f2:	4833      	ldr	r0, [pc, #204]	; (80002c0 <main+0xf8>)
 80001f4:	f002 fa28 	bl	8002648 <HAL_I2C_EnableListen_IT>
  HAL_ADC_Start(&hadc1);
 80001f8:	4832      	ldr	r0, [pc, #200]	; (80002c4 <main+0xfc>)
 80001fa:	f000 fef3 	bl	8000fe4 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_I2C_EnableListen_IT(&hi2c1);
 80001fe:	4830      	ldr	r0, [pc, #192]	; (80002c0 <main+0xf8>)
 8000200:	f002 fa22 	bl	8002648 <HAL_I2C_EnableListen_IT>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000204:	f04f 31ff 	mov.w	r1, #4294967295
 8000208:	482e      	ldr	r0, [pc, #184]	; (80002c4 <main+0xfc>)
 800020a:	f000 ff59 	bl	80010c0 <HAL_ADC_PollForConversion>
	adc_raw_value = HAL_ADC_GetValue(&hadc1); // 16-bit, 0-4096
 800020e:	482d      	ldr	r0, [pc, #180]	; (80002c4 <main+0xfc>)
 8000210:	f001 f814 	bl	800123c <HAL_ADC_GetValue>
 8000214:	4603      	mov	r3, r0
 8000216:	b29a      	uxth	r2, r3
 8000218:	4b2b      	ldr	r3, [pc, #172]	; (80002c8 <main+0x100>)
 800021a:	801a      	strh	r2, [r3, #0]


	if (slaveTxComplete)
 800021c:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <main+0x104>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	b2db      	uxtb	r3, r3
 8000222:	2b00      	cmp	r3, #0
 8000224:	d01e      	beq.n	8000264 <main+0x9c>
	{
		offset++;
 8000226:	4b2a      	ldr	r3, [pc, #168]	; (80002d0 <main+0x108>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	b2db      	uxtb	r3, r3
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b27      	ldr	r3, [pc, #156]	; (80002d0 <main+0x108>)
 8000232:	701a      	strb	r2, [r3, #0]
		data_tx = AddrToData(receive_buff + offset);
 8000234:	4b27      	ldr	r3, [pc, #156]	; (80002d4 <main+0x10c>)
 8000236:	781a      	ldrb	r2, [r3, #0]
 8000238:	4b25      	ldr	r3, [pc, #148]	; (80002d0 <main+0x108>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	b2db      	uxtb	r3, r3
 800023e:	4413      	add	r3, r2
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fa8e 	bl	8000764 <AddrToData>
 8000248:	4603      	mov	r3, r0
 800024a:	461a      	mov	r2, r3
 800024c:	4b22      	ldr	r3, [pc, #136]	; (80002d8 <main+0x110>)
 800024e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, &data_tx, 1, I2C_NEXT_FRAME); // sends the subsequent byte
 8000250:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000254:	2201      	movs	r2, #1
 8000256:	4920      	ldr	r1, [pc, #128]	; (80002d8 <main+0x110>)
 8000258:	4819      	ldr	r0, [pc, #100]	; (80002c0 <main+0xf8>)
 800025a:	f002 f8ad 	bl	80023b8 <HAL_I2C_Slave_Seq_Transmit_IT>
		slaveTxComplete = 0;
 800025e:	4b1b      	ldr	r3, [pc, #108]	; (80002cc <main+0x104>)
 8000260:	2200      	movs	r2, #0
 8000262:	701a      	strb	r2, [r3, #0]

	}

	if (transferRequested)
 8000264:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <main+0x114>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	b2db      	uxtb	r3, r3
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0c7      	beq.n	80001fe <main+0x36>
	{
		// master -> slave
		if(transferDirection  == I2C_DIRECTION_TRANSMIT)
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <main+0x118>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	b2db      	uxtb	r3, r3
 8000274:	2b00      	cmp	r3, #0
 8000276:	d107      	bne.n	8000288 <main+0xc0>
		{
			HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, &receive_buff, 1, I2C_NEXT_FRAME); // receives the starting register address
 8000278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800027c:	2201      	movs	r2, #1
 800027e:	4915      	ldr	r1, [pc, #84]	; (80002d4 <main+0x10c>)
 8000280:	480f      	ldr	r0, [pc, #60]	; (80002c0 <main+0xf8>)
 8000282:	f002 f93d 	bl	8002500 <HAL_I2C_Slave_Seq_Receive_IT>
 8000286:	e012      	b.n	80002ae <main+0xe6>
		}
		// slave -> master
		else
		{
			data_tx = AddrToData(receive_buff);
 8000288:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <main+0x10c>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fa69 	bl	8000764 <AddrToData>
 8000292:	4603      	mov	r3, r0
 8000294:	461a      	mov	r2, r3
 8000296:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <main+0x110>)
 8000298:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, &data_tx, 1, I2C_NEXT_FRAME); // sends the first byte
 800029a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800029e:	2201      	movs	r2, #1
 80002a0:	490d      	ldr	r1, [pc, #52]	; (80002d8 <main+0x110>)
 80002a2:	4807      	ldr	r0, [pc, #28]	; (80002c0 <main+0xf8>)
 80002a4:	f002 f888 	bl	80023b8 <HAL_I2C_Slave_Seq_Transmit_IT>
			slaveTxComplete = 0;
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <main+0x104>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	701a      	strb	r2, [r3, #0]
		}
		transferRequested = 0;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <main+0x114>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_EnableListen_IT(&hi2c1);
 80002b4:	e7a3      	b.n	80001fe <main+0x36>
 80002b6:	bf00      	nop
 80002b8:	2000020c 	.word	0x2000020c
 80002bc:	20000188 	.word	0x20000188
 80002c0:	200000e8 	.word	0x200000e8
 80002c4:	20000134 	.word	0x20000134
 80002c8:	20000092 	.word	0x20000092
 80002cc:	20000095 	.word	0x20000095
 80002d0:	20000094 	.word	0x20000094
 80002d4:	20000090 	.word	0x20000090
 80002d8:	20000000 	.word	0x20000000
 80002dc:	20000091 	.word	0x20000091
 80002e0:	20000184 	.word	0x20000184

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b09c      	sub	sp, #112	; 0x70
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002ee:	2228      	movs	r2, #40	; 0x28
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f005 fc9e 	bl	8005c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000308:	463b      	mov	r3, r7
 800030a:	2234      	movs	r2, #52	; 0x34
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f005 fc90 	bl	8005c34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000314:	2302      	movs	r3, #2
 8000316:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	2301      	movs	r3, #1
 800031a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031c:	2310      	movs	r3, #16
 800031e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000320:	2302      	movs	r3, #2
 8000322:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000324:	2300      	movs	r3, #0
 8000326:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000328:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800032c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000332:	4618      	mov	r0, r3
 8000334:	f003 fb38 	bl	80039a8 <HAL_RCC_OscConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800033e:	f000 fa7f 	bl	8000840 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	230f      	movs	r3, #15
 8000344:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000346:	2302      	movs	r3, #2
 8000348:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000352:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000358:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800035c:	2102      	movs	r1, #2
 800035e:	4618      	mov	r0, r3
 8000360:	f004 fa2a 	bl	80047b8 <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800036a:	f000 fa69 	bl	8000840 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC1;
 800036e:	23a0      	movs	r3, #160	; 0xa0
 8000370:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800037a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037c:	463b      	mov	r3, r7
 800037e:	4618      	mov	r0, r3
 8000380:	f004 fc50 	bl	8004c24 <HAL_RCCEx_PeriphCLKConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800038a:	f000 fa59 	bl	8000840 <Error_Handler>
  }
}
 800038e:	bf00      	nop
 8000390:	3770      	adds	r7, #112	; 0x70
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
	...

08000398 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800039e:	463b      	mov	r3, r7
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]
 80003ac:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003ae:	4b27      	ldr	r3, [pc, #156]	; (800044c <MX_ADC1_Init+0xb4>)
 80003b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003b6:	4b25      	ldr	r3, [pc, #148]	; (800044c <MX_ADC1_Init+0xb4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003bc:	4b23      	ldr	r3, [pc, #140]	; (800044c <MX_ADC1_Init+0xb4>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c2:	4b22      	ldr	r3, [pc, #136]	; (800044c <MX_ADC1_Init+0xb4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003c8:	4b20      	ldr	r3, [pc, #128]	; (800044c <MX_ADC1_Init+0xb4>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ce:	4b1f      	ldr	r3, [pc, #124]	; (800044c <MX_ADC1_Init+0xb4>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003d6:	4b1d      	ldr	r3, [pc, #116]	; (800044c <MX_ADC1_Init+0xb4>)
 80003d8:	2200      	movs	r2, #0
 80003da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003dc:	4b1b      	ldr	r3, [pc, #108]	; (800044c <MX_ADC1_Init+0xb4>)
 80003de:	2201      	movs	r2, #1
 80003e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <MX_ADC1_Init+0xb4>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80003e8:	4b18      	ldr	r3, [pc, #96]	; (800044c <MX_ADC1_Init+0xb4>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <MX_ADC1_Init+0xb4>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <MX_ADC1_Init+0xb4>)
 80003f8:	2204      	movs	r2, #4
 80003fa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003fc:	4b13      	ldr	r3, [pc, #76]	; (800044c <MX_ADC1_Init+0xb4>)
 80003fe:	2200      	movs	r2, #0
 8000400:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <MX_ADC1_Init+0xb4>)
 8000404:	2200      	movs	r2, #0
 8000406:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000408:	4810      	ldr	r0, [pc, #64]	; (800044c <MX_ADC1_Init+0xb4>)
 800040a:	f000 fc65 	bl	8000cd8 <HAL_ADC_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000414:	f000 fa14 	bl	8000840 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000418:	2301      	movs	r3, #1
 800041a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800041c:	2301      	movs	r3, #1
 800041e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000424:	2300      	movs	r3, #0
 8000426:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000428:	2300      	movs	r3, #0
 800042a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000430:	463b      	mov	r3, r7
 8000432:	4619      	mov	r1, r3
 8000434:	4805      	ldr	r0, [pc, #20]	; (800044c <MX_ADC1_Init+0xb4>)
 8000436:	f000 ff0f 	bl	8001258 <HAL_ADC_ConfigChannel>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000440:	f000 f9fe 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000444:	bf00      	nop
 8000446:	3718      	adds	r7, #24
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000134 	.word	0x20000134

08000450 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <MX_I2C1_Init+0x74>)
 8000456:	4a1c      	ldr	r2, [pc, #112]	; (80004c8 <MX_I2C1_Init+0x78>)
 8000458:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800045a:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <MX_I2C1_Init+0x74>)
 800045c:	4a1b      	ldr	r2, [pc, #108]	; (80004cc <MX_I2C1_Init+0x7c>)
 800045e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 64;
 8000460:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <MX_I2C1_Init+0x74>)
 8000462:	2240      	movs	r2, #64	; 0x40
 8000464:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000466:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <MX_I2C1_Init+0x74>)
 8000468:	2201      	movs	r2, #1
 800046a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800046c:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <MX_I2C1_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000472:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <MX_I2C1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <MX_I2C1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800047e:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <MX_I2C1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <MX_I2C1_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800048a:	480e      	ldr	r0, [pc, #56]	; (80004c4 <MX_I2C1_Init+0x74>)
 800048c:	f001 ff05 	bl	800229a <HAL_I2C_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000496:	f000 f9d3 	bl	8000840 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800049a:	2100      	movs	r1, #0
 800049c:	4809      	ldr	r0, [pc, #36]	; (80004c4 <MX_I2C1_Init+0x74>)
 800049e:	f003 f9eb 	bl	8003878 <HAL_I2CEx_ConfigAnalogFilter>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004a8:	f000 f9ca 	bl	8000840 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004ac:	2100      	movs	r1, #0
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_I2C1_Init+0x74>)
 80004b0:	f003 fa2d 	bl	800390e <HAL_I2CEx_ConfigDigitalFilter>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004ba:	f000 f9c1 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200000e8 	.word	0x200000e8
 80004c8:	40005400 	.word	0x40005400
 80004cc:	2000090e 	.word	0x2000090e

080004d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d4:	4b14      	ldr	r3, [pc, #80]	; (8000528 <MX_USART2_UART_Init+0x58>)
 80004d6:	4a15      	ldr	r2, [pc, #84]	; (800052c <MX_USART2_UART_Init+0x5c>)
 80004d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80004da:	4b13      	ldr	r3, [pc, #76]	; (8000528 <MX_USART2_UART_Init+0x58>)
 80004dc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80004e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <MX_USART2_UART_Init+0x58>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <MX_USART2_UART_Init+0x58>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <MX_USART2_UART_Init+0x58>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <MX_USART2_UART_Init+0x58>)
 80004f6:	220c      	movs	r2, #12
 80004f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <MX_USART2_UART_Init+0x58>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <MX_USART2_UART_Init+0x58>)
 8000502:	2200      	movs	r2, #0
 8000504:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <MX_USART2_UART_Init+0x58>)
 8000508:	2200      	movs	r2, #0
 800050a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <MX_USART2_UART_Init+0x58>)
 800050e:	2200      	movs	r2, #0
 8000510:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <MX_USART2_UART_Init+0x58>)
 8000514:	f004 fd18 	bl	8004f48 <HAL_UART_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800051e:	f000 f98f 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000188 	.word	0x20000188
 800052c:	40004400 	.word	0x40004400

08000530 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_DMA_Init+0x38>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <MX_DMA_Init+0x38>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_DMA_Init+0x38>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	2010      	movs	r0, #16
 8000554:	f001 fadb 	bl	8001b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000558:	2010      	movs	r0, #16
 800055a:	f001 faf4 	bl	8001b46 <HAL_NVIC_EnableIRQ>

}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000

0800056c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b3b      	ldr	r3, [pc, #236]	; (8000670 <MX_GPIO_Init+0x104>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a3a      	ldr	r2, [pc, #232]	; (8000670 <MX_GPIO_Init+0x104>)
 8000588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800058c:	6153      	str	r3, [r2, #20]
 800058e:	4b38      	ldr	r3, [pc, #224]	; (8000670 <MX_GPIO_Init+0x104>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800059a:	4b35      	ldr	r3, [pc, #212]	; (8000670 <MX_GPIO_Init+0x104>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a34      	ldr	r2, [pc, #208]	; (8000670 <MX_GPIO_Init+0x104>)
 80005a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005a4:	6153      	str	r3, [r2, #20]
 80005a6:	4b32      	ldr	r3, [pc, #200]	; (8000670 <MX_GPIO_Init+0x104>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b2f      	ldr	r3, [pc, #188]	; (8000670 <MX_GPIO_Init+0x104>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a2e      	ldr	r2, [pc, #184]	; (8000670 <MX_GPIO_Init+0x104>)
 80005b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b2c      	ldr	r3, [pc, #176]	; (8000670 <MX_GPIO_Init+0x104>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	4b29      	ldr	r3, [pc, #164]	; (8000670 <MX_GPIO_Init+0x104>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a28      	ldr	r2, [pc, #160]	; (8000670 <MX_GPIO_Init+0x104>)
 80005d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d4:	6153      	str	r3, [r2, #20]
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <MX_GPIO_Init+0x104>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LDR2_Pin|LD2_Pin|LDG2_Pin|LDR1_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f242 4130 	movw	r1, #9264	; 0x2430
 80005e8:	4822      	ldr	r0, [pc, #136]	; (8000674 <MX_GPIO_Init+0x108>)
 80005ea:	f001 fe1b 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDG1_GPIO_Port, LDG1_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f8:	f001 fe14 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000602:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4819      	ldr	r0, [pc, #100]	; (8000678 <MX_GPIO_Init+0x10c>)
 8000614:	f001 fc94 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDR2_Pin LD2_Pin LDG2_Pin LDR1_Pin */
  GPIO_InitStruct.Pin = LDR2_Pin|LD2_Pin|LDG2_Pin|LDR1_Pin;
 8000618:	f242 4330 	movw	r3, #9264	; 0x2430
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <MX_GPIO_Init+0x108>)
 8000632:	f001 fc85 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDG1_Pin */
  GPIO_InitStruct.Pin = LDG1_Pin;
 8000636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LDG1_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000652:	f001 fc75 	bl	8001f40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000656:	2200      	movs	r2, #0
 8000658:	2100      	movs	r1, #0
 800065a:	2028      	movs	r0, #40	; 0x28
 800065c:	f001 fa57 	bl	8001b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000660:	2028      	movs	r0, #40	; 0x28
 8000662:	f001 fa70 	bl	8001b46 <HAL_NVIC_EnableIRQ>

}
 8000666:	bf00      	nop
 8000668:	3728      	adds	r7, #40	; 0x28
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000
 8000674:	48000400 	.word	0x48000400
 8000678:	48000800 	.word	0x48000800

0800067c <HAL_I2C_AddrCallback>:

#ifdef SLAVE_WORKING

// Triggered when START and Repeated Start is transmitted by master
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	70fb      	strb	r3, [r7, #3]
 8000688:	4613      	mov	r3, r2
 800068a:	803b      	strh	r3, [r7, #0]
	transferRequested = 1;
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <HAL_I2C_AddrCallback+0x28>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
	transferDirection = TransferDirection;
 8000692:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <HAL_I2C_AddrCallback+0x2c>)
 8000694:	78fb      	ldrb	r3, [r7, #3]
 8000696:	7013      	strb	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	20000091 	.word	0x20000091
 80006a8:	20000184 	.word	0x20000184

080006ac <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <HAL_I2C_SlaveTxCpltCallback>:

// Triggered when slave completes transmitting data to master (and master ACK it)
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	slaveTxComplete = 1;
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000095 	.word	0x20000095

080006e0 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	if( HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF )
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f002 f870 	bl	80027ce <HAL_I2C_GetError>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b04      	cmp	r3, #4
 80006f2:	d002      	beq.n	80006fa <HAL_I2C_ErrorCallback+0x1a>
	{
		HAL_I2C_GetError(hi2c);
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f002 f86a 	bl	80027ce <HAL_I2C_GetError>
	}
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f001 ff9b 	bl	8002648 <HAL_I2C_EnableListen_IT>
	offset = 0;
 8000712:	4b03      	ldr	r3, [pc, #12]	; (8000720 <HAL_I2C_ListenCpltCallback+0x1c>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]

}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000094 	.word	0x20000094

08000724 <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

	UNUSED(huart);

	// Receive
	uint8_t buff = uart_rx_buff[0];
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_UART_RxCpltCallback+0x24>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart2, uart_rx_buff, 1, HAL_MAX_DELAY);
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	2201      	movs	r2, #1
 800074c:	4903      	ldr	r1, [pc, #12]	; (800075c <HAL_UART_RxCpltCallback+0x24>)
 800074e:	4804      	ldr	r0, [pc, #16]	; (8000760 <HAL_UART_RxCpltCallback+0x28>)
 8000750:	f004 fc48 	bl	8004fe4 <HAL_UART_Transmit>

}
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000020c 	.word	0x2000020c
 8000760:	20000188 	.word	0x20000188

08000764 <AddrToData>:

uint8_t AddrToData(uint8_t receive_addr){
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	73fb      	strb	r3, [r7, #15]
	switch (receive_addr){
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	3b10      	subs	r3, #16
 8000776:	2b18      	cmp	r3, #24
 8000778:	d85a      	bhi.n	8000830 <AddrToData+0xcc>
 800077a:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <AddrToData+0x1c>)
 800077c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000780:	080007e5 	.word	0x080007e5
 8000784:	08000831 	.word	0x08000831
 8000788:	08000831 	.word	0x08000831
 800078c:	08000831 	.word	0x08000831
 8000790:	08000831 	.word	0x08000831
 8000794:	08000831 	.word	0x08000831
 8000798:	08000831 	.word	0x08000831
 800079c:	08000831 	.word	0x08000831
 80007a0:	08000831 	.word	0x08000831
 80007a4:	08000831 	.word	0x08000831
 80007a8:	08000831 	.word	0x08000831
 80007ac:	08000831 	.word	0x08000831
 80007b0:	08000831 	.word	0x08000831
 80007b4:	08000831 	.word	0x08000831
 80007b8:	08000831 	.word	0x08000831
 80007bc:	08000831 	.word	0x08000831
 80007c0:	08000831 	.word	0x08000831
 80007c4:	080007eb 	.word	0x080007eb
 80007c8:	080007f1 	.word	0x080007f1
 80007cc:	080007f7 	.word	0x080007f7
 80007d0:	080007fd 	.word	0x080007fd
 80007d4:	08000803 	.word	0x08000803
 80007d8:	08000809 	.word	0x08000809
 80007dc:	08000825 	.word	0x08000825
 80007e0:	0800082b 	.word	0x0800082b
				case WHO_AM_I:
					data = 0xEE;
 80007e4:	23ee      	movs	r3, #238	; 0xee
 80007e6:	73fb      	strb	r3, [r7, #15]
					break;
 80007e8:	e025      	b.n	8000836 <AddrToData+0xd2>
				case OUT_X_L:
		//				data = (uint8_t)(adc_raw_value & 0xFF);
					data = 11;
 80007ea:	230b      	movs	r3, #11
 80007ec:	73fb      	strb	r3, [r7, #15]
					break;
 80007ee:	e022      	b.n	8000836 <AddrToData+0xd2>
				case OUT_X_H:
		//				data = (uint8_t)(adc_raw_value >> 8);
					data = 12;
 80007f0:	230c      	movs	r3, #12
 80007f2:	73fb      	strb	r3, [r7, #15]
					break;
 80007f4:	e01f      	b.n	8000836 <AddrToData+0xd2>
				case OUT_Y_L:
		//				data = (uint8_t)((4096 - adc_raw_value) & 0xFF);
					data = 14;
 80007f6:	230e      	movs	r3, #14
 80007f8:	73fb      	strb	r3, [r7, #15]
					break;
 80007fa:	e01c      	b.n	8000836 <AddrToData+0xd2>
				case OUT_Y_H:
		//				data = (uint8_t)((4096 - adc_raw_value) >> 8);
					data = 16;
 80007fc:	2310      	movs	r3, #16
 80007fe:	73fb      	strb	r3, [r7, #15]
					break;
 8000800:	e019      	b.n	8000836 <AddrToData+0xd2>
				case OUT_Z_L:
	//				data = 0xc7 + (rand() % 10);
					data = 18;
 8000802:	2312      	movs	r3, #18
 8000804:	73fb      	strb	r3, [r7, #15]
					break;
 8000806:	e016      	b.n	8000836 <AddrToData+0xd2>
				case OUT_Z_H:
		//				data = 0xc7;
					data = 20 + (rand() % 4);
 8000808:	f005 fa1c 	bl	8005c44 <rand>
 800080c:	4603      	mov	r3, r0
 800080e:	425a      	negs	r2, r3
 8000810:	f003 0303 	and.w	r3, r3, #3
 8000814:	f002 0203 	and.w	r2, r2, #3
 8000818:	bf58      	it	pl
 800081a:	4253      	negpl	r3, r2
 800081c:	b2db      	uxtb	r3, r3
 800081e:	3314      	adds	r3, #20
 8000820:	73fb      	strb	r3, [r7, #15]
	//				data = 20;
					break;
 8000822:	e008      	b.n	8000836 <AddrToData+0xd2>
				case OUT_TEMP_L:
		//				data = (uint8_t)(adc_raw_value & 0xFF);
					data = 22;
 8000824:	2316      	movs	r3, #22
 8000826:	73fb      	strb	r3, [r7, #15]
					break;
 8000828:	e005      	b.n	8000836 <AddrToData+0xd2>
				case OUT_TEMP_H:
		//				data = (uint8_t)(adc_raw_value >> 8);
					data = 24;
 800082a:	2318      	movs	r3, #24
 800082c:	73fb      	strb	r3, [r7, #15]
					break;
 800082e:	e002      	b.n	8000836 <AddrToData+0xd2>
				default:
					data = 0xff;
 8000830:	23ff      	movs	r3, #255	; 0xff
 8000832:	73fb      	strb	r3, [r7, #15]
					break;
 8000834:	bf00      	nop
	}
	return data;
 8000836:	7bfb      	ldrb	r3, [r7, #15]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000846:	e7fe      	b.n	8000846 <Error_Handler+0x6>

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_MspInit+0x44>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <HAL_MspInit+0x44>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_MspInit+0x44>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_MspInit+0x44>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_MspInit+0x44>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	61d3      	str	r3, [r2, #28]
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_MspInit+0x44>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800087e:	2007      	movs	r0, #7
 8000880:	f001 f93a 	bl	8001af8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008b0:	d124      	bne.n	80008fc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_ADC_MspInit+0x74>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	4a13      	ldr	r2, [pc, #76]	; (8000904 <HAL_ADC_MspInit+0x74>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	6153      	str	r3, [r2, #20]
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <HAL_ADC_MspInit+0x74>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_ADC_MspInit+0x74>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <HAL_ADC_MspInit+0x74>)
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <HAL_ADC_MspInit+0x74>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e2:	2301      	movs	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e6:	2303      	movs	r3, #3
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f8:	f001 fb22 	bl	8001f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008fc:	bf00      	nop
 80008fe:	3728      	adds	r7, #40	; 0x28
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a1f      	ldr	r2, [pc, #124]	; (80009a4 <HAL_I2C_MspInit+0x9c>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d138      	bne.n	800099c <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <HAL_I2C_MspInit+0xa0>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a1e      	ldr	r2, [pc, #120]	; (80009a8 <HAL_I2C_MspInit+0xa0>)
 8000930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000934:	6153      	str	r3, [r2, #20]
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <HAL_I2C_MspInit+0xa0>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000942:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000948:	2312      	movs	r3, #18
 800094a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094c:	2301      	movs	r3, #1
 800094e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000954:	2304      	movs	r3, #4
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	4813      	ldr	r0, [pc, #76]	; (80009ac <HAL_I2C_MspInit+0xa4>)
 8000960:	f001 faee 	bl	8001f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_I2C_MspInit+0xa0>)
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <HAL_I2C_MspInit+0xa0>)
 800096a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800096e:	61d3      	str	r3, [r2, #28]
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_I2C_MspInit+0xa0>)
 8000972:	69db      	ldr	r3, [r3, #28]
 8000974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	201f      	movs	r0, #31
 8000982:	f001 f8c4 	bl	8001b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000986:	201f      	movs	r0, #31
 8000988:	f001 f8dd 	bl	8001b46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	2020      	movs	r0, #32
 8000992:	f001 f8bc 	bl	8001b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000996:	2020      	movs	r0, #32
 8000998:	f001 f8d5 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800099c:	bf00      	nop
 800099e:	3728      	adds	r7, #40	; 0x28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40005400 	.word	0x40005400
 80009a8:	40021000 	.word	0x40021000
 80009ac:	48000400 	.word	0x48000400

080009b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a2a      	ldr	r2, [pc, #168]	; (8000a78 <HAL_UART_MspInit+0xc8>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d14e      	bne.n	8000a70 <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d2:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <HAL_UART_MspInit+0xcc>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	4a29      	ldr	r2, [pc, #164]	; (8000a7c <HAL_UART_MspInit+0xcc>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	61d3      	str	r3, [r2, #28]
 80009de:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <HAL_UART_MspInit+0xcc>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <HAL_UART_MspInit+0xcc>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <HAL_UART_MspInit+0xcc>)
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <HAL_UART_MspInit+0xcc>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a02:	230c      	movs	r3, #12
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a12:	2307      	movs	r3, #7
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a20:	f001 fa8e 	bl	8001f40 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <HAL_UART_MspInit+0xd0>)
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <HAL_UART_MspInit+0xd4>)
 8000a28:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_UART_MspInit+0xd0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <HAL_UART_MspInit+0xd0>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_UART_MspInit+0xd0>)
 8000a38:	2280      	movs	r2, #128	; 0x80
 8000a3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_UART_MspInit+0xd0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <HAL_UART_MspInit+0xd0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <HAL_UART_MspInit+0xd0>)
 8000a4a:	2220      	movs	r2, #32
 8000a4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <HAL_UART_MspInit+0xd0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a54:	480a      	ldr	r0, [pc, #40]	; (8000a80 <HAL_UART_MspInit+0xd0>)
 8000a56:	f001 f890 	bl	8001b7a <HAL_DMA_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000a60:	f7ff feee 	bl	8000840 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <HAL_UART_MspInit+0xd0>)
 8000a68:	671a      	str	r2, [r3, #112]	; 0x70
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <HAL_UART_MspInit+0xd0>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40004400 	.word	0x40004400
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	200000a4 	.word	0x200000a4
 8000a84:	4002006c 	.word	0x4002006c

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad4:	f000 f8e0 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <DMA1_Channel6_IRQHandler+0x10>)
 8000ae2:	f001 f92e 	bl	8001d42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000a4 	.word	0x200000a4

08000af0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <I2C1_EV_IRQHandler+0x10>)
 8000af6:	f001 fdc7 	bl	8002688 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000e8 	.word	0x200000e8

08000b04 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <I2C1_ER_IRQHandler+0x10>)
 8000b0a:	f001 fdd7 	bl	80026bc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000e8 	.word	0x200000e8

08000b18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b20:	f001 fb98 	bl	8002254 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b30:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <_sbrk+0x5c>)
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <_sbrk+0x60>)
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d102      	bne.n	8000b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <_sbrk+0x64>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <_sbrk+0x68>)
 8000b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d207      	bcs.n	8000b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b58:	f005 f842 	bl	8005be0 <__errno>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	230c      	movs	r3, #12
 8000b60:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	e009      	b.n	8000b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <_sbrk+0x64>)
 8000b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20004000 	.word	0x20004000
 8000b88:	00000400 	.word	0x00000400
 8000b8c:	20000098 	.word	0x20000098
 8000b90:	20000218 	.word	0x20000218

08000b94 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <SystemInit+0x20>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <SystemInit+0x20>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bbe:	490e      	ldr	r1, [pc, #56]	; (8000bf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc0:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <LoopForever+0xe>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd4:	4c0b      	ldr	r4, [pc, #44]	; (8000c04 <LoopForever+0x16>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000be2:	f7ff ffd7 	bl	8000b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be6:	f005 f801 	bl	8005bec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bea:	f7ff faed 	bl	80001c8 <main>

08000bee <LoopForever>:

LoopForever:
    b LoopForever
 8000bee:	e7fe      	b.n	8000bee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bf0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bfc:	08005dec 	.word	0x08005dec
  ldr r2, =_sbss
 8000c00:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c04:	20000218 	.word	0x20000218

08000c08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC1_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_Init+0x28>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_Init+0x28>)
 8000c16:	f043 0310 	orr.w	r3, r3, #16
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 ff6b 	bl	8001af8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 f808 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff fe0e 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40022000 	.word	0x40022000

08000c38 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 ff83 	bl	8001b62 <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 ff4b 	bl	8001b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000004 	.word	0x20000004
 8000c90:	2000000c 	.word	0x2000000c
 8000c94:	20000008 	.word	0x20000008

08000c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	2000000c 	.word	0x2000000c
 8000cbc:	20000210 	.word	0x20000210

08000cc0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000210 	.word	0x20000210

08000cd8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b09a      	sub	sp, #104	; 0x68
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d101      	bne.n	8000cf8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e169      	b.n	8000fcc <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f003 0310 	and.w	r3, r3, #16
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d176      	bne.n	8000df8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d152      	bne.n	8000db8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff fdaf 	bl	8000890 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d13b      	bne.n	8000db8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 fda3 	bl	800188c <ADC_Disable>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	f003 0310 	and.w	r3, r3, #16
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d12f      	bne.n	8000db8 <HAL_ADC_Init+0xe0>
 8000d58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d12b      	bne.n	8000db8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d68:	f023 0302 	bic.w	r3, r3, #2
 8000d6c:	f043 0202 	orr.w	r2, r3, #2
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d82:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d92:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d94:	4b8f      	ldr	r3, [pc, #572]	; (8000fd4 <HAL_ADC_Init+0x2fc>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a8f      	ldr	r2, [pc, #572]	; (8000fd8 <HAL_ADC_Init+0x300>)
 8000d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9e:	0c9a      	lsrs	r2, r3, #18
 8000da0:	4613      	mov	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000daa:	e002      	b.n	8000db2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1f9      	bne.n	8000dac <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d007      	beq.n	8000dd6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000dd4:	d110      	bne.n	8000df8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f023 0312 	bic.w	r3, r3, #18
 8000dde:	f043 0210 	orr.w	r2, r3, #16
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f043 0201 	orr.w	r2, r3, #1
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	f003 0310 	and.w	r3, r3, #16
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f040 80d6 	bne.w	8000fb2 <HAL_ADC_Init+0x2da>
 8000e06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f040 80d1 	bne.w	8000fb2 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f040 80c9 	bne.w	8000fb2 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e28:	f043 0202 	orr.w	r2, r3, #2
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e30:	4b6a      	ldr	r3, [pc, #424]	; (8000fdc <HAL_ADC_Init+0x304>)
 8000e32:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d108      	bne.n	8000e58 <HAL_ADC_Init+0x180>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d101      	bne.n	8000e58 <HAL_ADC_Init+0x180>
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <HAL_ADC_Init+0x182>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d11c      	bne.n	8000e98 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e5e:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d010      	beq.n	8000e86 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d107      	bne.n	8000e80 <HAL_ADC_Init+0x1a8>
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d101      	bne.n	8000e80 <HAL_ADC_Init+0x1a8>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e000      	b.n	8000e82 <HAL_ADC_Init+0x1aa>
 8000e80:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d108      	bne.n	8000e98 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	431a      	orrs	r2, r3
 8000e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e96:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7e5b      	ldrb	r3, [r3, #25]
 8000e9c:	035b      	lsls	r3, r3, #13
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000ea2:	2a01      	cmp	r2, #1
 8000ea4:	d002      	beq.n	8000eac <HAL_ADC_Init+0x1d4>
 8000ea6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eaa:	e000      	b.n	8000eae <HAL_ADC_Init+0x1d6>
 8000eac:	2200      	movs	r2, #0
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d11b      	bne.n	8000f04 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7e5b      	ldrb	r3, [r3, #25]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d109      	bne.n	8000ee8 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	045a      	lsls	r2, r3, #17
 8000edc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8000ee6:	e00d      	b.n	8000f04 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000ef0:	f043 0220 	orr.w	r2, r3, #32
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efc:	f043 0201 	orr.w	r2, r3, #1
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d007      	beq.n	8000f1c <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f14:	4313      	orrs	r3, r2
 8000f16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d114      	bne.n	8000f54 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6812      	ldr	r2, [r2, #0]
 8000f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f38:	f023 0302 	bic.w	r3, r3, #2
 8000f3c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7e1b      	ldrb	r3, [r3, #24]
 8000f42:	039a      	lsls	r2, r3, #14
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f50:	4313      	orrs	r3, r2
 8000f52:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68da      	ldr	r2, [r3, #12]
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <HAL_ADC_Init+0x308>)
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	6812      	ldr	r2, [r2, #0]
 8000f62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000f64:	430b      	orrs	r3, r1
 8000f66:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d10c      	bne.n	8000f8a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f023 010f 	bic.w	r1, r3, #15
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	1e5a      	subs	r2, r3, #1
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	430a      	orrs	r2, r1
 8000f86:	631a      	str	r2, [r3, #48]	; 0x30
 8000f88:	e007      	b.n	8000f9a <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 020f 	bic.w	r2, r2, #15
 8000f98:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f023 0303 	bic.w	r3, r3, #3
 8000fa8:	f043 0201 	orr.w	r2, r3, #1
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	641a      	str	r2, [r3, #64]	; 0x40
 8000fb0:	e00a      	b.n	8000fc8 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f023 0312 	bic.w	r3, r3, #18
 8000fba:	f043 0210 	orr.w	r2, r3, #16
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000fc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3768      	adds	r7, #104	; 0x68
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	431bde83 	.word	0x431bde83
 8000fdc:	50000300 	.word	0x50000300
 8000fe0:	fff0c007 	.word	0xfff0c007

08000fe4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d158      	bne.n	80010b0 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001004:	2b01      	cmp	r3, #1
 8001006:	d101      	bne.n	800100c <HAL_ADC_Start+0x28>
 8001008:	2302      	movs	r3, #2
 800100a:	e054      	b.n	80010b6 <HAL_ADC_Start+0xd2>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2201      	movs	r2, #1
 8001010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 fbd5 	bl	80017c4 <ADC_Enable>
 800101a:	4603      	mov	r3, r0
 800101c:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d140      	bne.n	80010a6 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800102c:	f023 0301 	bic.w	r3, r3, #1
 8001030:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d007      	beq.n	8001062 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800105a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800106a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800106e:	d106      	bne.n	800107e <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001074:	f023 0206 	bic.w	r2, r3, #6
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	645a      	str	r2, [r3, #68]	; 0x44
 800107c:	e002      	b.n	8001084 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	221c      	movs	r2, #28
 8001092:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0204 	orr.w	r2, r2, #4
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	e006      	b.n	80010b4 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80010ae:	e001      	b.n	80010b4 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80010b0:	2302      	movs	r3, #2
 80010b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d102      	bne.n	80010dc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80010d6:	2308      	movs	r3, #8
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	e02e      	b.n	800113a <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010dc:	4b56      	ldr	r3, [pc, #344]	; (8001238 <HAL_ADC_PollForConversion+0x178>)
 80010de:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 031f 	and.w	r3, r3, #31
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d112      	bne.n	8001112 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d11d      	bne.n	8001136 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f043 0220 	orr.w	r2, r3, #32
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e08d      	b.n	800122e <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00b      	beq.n	8001136 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f043 0220 	orr.w	r2, r3, #32
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e07b      	b.n	800122e <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001136:	230c      	movs	r3, #12
 8001138:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001142:	f7ff fdbd 	bl	8000cc0 <HAL_GetTick>
 8001146:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001148:	e021      	b.n	800118e <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001150:	d01d      	beq.n	800118e <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d007      	beq.n	8001168 <HAL_ADC_PollForConversion+0xa8>
 8001158:	f7ff fdb2 	bl	8000cc0 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d212      	bcs.n	800118e <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	4013      	ands	r3, r2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10b      	bne.n	800118e <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f043 0204 	orr.w	r2, r3, #4
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e04f      	b.n	800122e <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0d6      	beq.n	800114a <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d131      	bne.n	800121a <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d12c      	bne.n	800121a <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d125      	bne.n	800121a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d112      	bne.n	8001202 <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d112      	bne.n	800121a <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f043 0201 	orr.w	r2, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001200:	e00b      	b.n	800121a <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f043 0220 	orr.w	r2, r3, #32
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f043 0201 	orr.w	r2, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d103      	bne.n	800122c <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	50000300 	.word	0x50000300

0800123c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001258:	b480      	push	{r7}
 800125a:	b09b      	sub	sp, #108	; 0x6c
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_ADC_ConfigChannel+0x22>
 8001276:	2302      	movs	r3, #2
 8001278:	e299      	b.n	80017ae <HAL_ADC_ConfigChannel+0x556>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	f040 827d 	bne.w	800178c <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b04      	cmp	r3, #4
 8001298:	d81c      	bhi.n	80012d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	461a      	mov	r2, r3
 80012ae:	231f      	movs	r3, #31
 80012b0:	4093      	lsls	r3, r2
 80012b2:	43db      	mvns	r3, r3
 80012b4:	4019      	ands	r1, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	631a      	str	r2, [r3, #48]	; 0x30
 80012d2:	e063      	b.n	800139c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b09      	cmp	r3, #9
 80012da:	d81e      	bhi.n	800131a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	3b1e      	subs	r3, #30
 80012f0:	221f      	movs	r2, #31
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	4019      	ands	r1, r3
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	3b1e      	subs	r3, #30
 800130c:	fa00 f203 	lsl.w	r2, r0, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	635a      	str	r2, [r3, #52]	; 0x34
 8001318:	e040      	b.n	800139c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b0e      	cmp	r3, #14
 8001320:	d81e      	bhi.n	8001360 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	3b3c      	subs	r3, #60	; 0x3c
 8001336:	221f      	movs	r2, #31
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	4019      	ands	r1, r3
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	6818      	ldr	r0, [r3, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4413      	add	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	3b3c      	subs	r3, #60	; 0x3c
 8001352:	fa00 f203 	lsl.w	r2, r0, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	430a      	orrs	r2, r1
 800135c:	639a      	str	r2, [r3, #56]	; 0x38
 800135e:	e01d      	b.n	800139c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	3b5a      	subs	r3, #90	; 0x5a
 8001374:	221f      	movs	r2, #31
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	4019      	ands	r1, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	3b5a      	subs	r3, #90	; 0x5a
 8001390:	fa00 f203 	lsl.w	r2, r0, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f040 80e5 	bne.w	8001576 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b09      	cmp	r3, #9
 80013b2:	d91c      	bls.n	80013ee <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6999      	ldr	r1, [r3, #24]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4613      	mov	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	3b1e      	subs	r3, #30
 80013c6:	2207      	movs	r2, #7
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	4019      	ands	r1, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	6898      	ldr	r0, [r3, #8]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	3b1e      	subs	r3, #30
 80013e0:	fa00 f203 	lsl.w	r2, r0, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	619a      	str	r2, [r3, #24]
 80013ec:	e019      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6959      	ldr	r1, [r3, #20]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	2207      	movs	r2, #7
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	4019      	ands	r1, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	6898      	ldr	r0, [r3, #8]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	fa00 f203 	lsl.w	r2, r0, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	08db      	lsrs	r3, r3, #3
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	3b01      	subs	r3, #1
 8001440:	2b03      	cmp	r3, #3
 8001442:	d84f      	bhi.n	80014e4 <HAL_ADC_ConfigChannel+0x28c>
 8001444:	a201      	add	r2, pc, #4	; (adr r2, 800144c <HAL_ADC_ConfigChannel+0x1f4>)
 8001446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144a:	bf00      	nop
 800144c:	0800145d 	.word	0x0800145d
 8001450:	0800147f 	.word	0x0800147f
 8001454:	080014a1 	.word	0x080014a1
 8001458:	080014c3 	.word	0x080014c3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001462:	4b99      	ldr	r3, [pc, #612]	; (80016c8 <HAL_ADC_ConfigChannel+0x470>)
 8001464:	4013      	ands	r3, r2
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	0691      	lsls	r1, r2, #26
 800146c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800146e:	430a      	orrs	r2, r1
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800147a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800147c:	e07e      	b.n	800157c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001484:	4b90      	ldr	r3, [pc, #576]	; (80016c8 <HAL_ADC_ConfigChannel+0x470>)
 8001486:	4013      	ands	r3, r2
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	0691      	lsls	r1, r2, #26
 800148e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001490:	430a      	orrs	r2, r1
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800149c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800149e:	e06d      	b.n	800157c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80014a6:	4b88      	ldr	r3, [pc, #544]	; (80016c8 <HAL_ADC_ConfigChannel+0x470>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	0691      	lsls	r1, r2, #26
 80014b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014b2:	430a      	orrs	r2, r1
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014be:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014c0:	e05c      	b.n	800157c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80014c8:	4b7f      	ldr	r3, [pc, #508]	; (80016c8 <HAL_ADC_ConfigChannel+0x470>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	0691      	lsls	r1, r2, #26
 80014d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014d4:	430a      	orrs	r2, r1
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014e0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014e2:	e04b      	b.n	800157c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	069b      	lsls	r3, r3, #26
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d107      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001506:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800150e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	069b      	lsls	r3, r3, #26
 8001518:	429a      	cmp	r2, r3
 800151a:	d107      	bne.n	800152c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800152a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001532:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	069b      	lsls	r3, r3, #26
 800153c:	429a      	cmp	r2, r3
 800153e:	d107      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800154e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001556:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	069b      	lsls	r3, r3, #26
 8001560:	429a      	cmp	r2, r3
 8001562:	d10a      	bne.n	800157a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001572:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001574:	e001      	b.n	800157a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001576:	bf00      	nop
 8001578:	e000      	b.n	800157c <HAL_ADC_ConfigChannel+0x324>
      break;
 800157a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b01      	cmp	r3, #1
 8001588:	d108      	bne.n	800159c <HAL_ADC_ConfigChannel+0x344>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_ADC_ConfigChannel+0x344>
 8001598:	2301      	movs	r3, #1
 800159a:	e000      	b.n	800159e <HAL_ADC_ConfigChannel+0x346>
 800159c:	2300      	movs	r3, #0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f040 80ff 	bne.w	80017a2 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d00f      	beq.n	80015cc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2201      	movs	r2, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	400a      	ands	r2, r1
 80015c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80015ca:	e049      	b.n	8001660 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2201      	movs	r2, #1
 80015da:	409a      	lsls	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b09      	cmp	r3, #9
 80015ec:	d91c      	bls.n	8001628 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6999      	ldr	r1, [r3, #24]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	3b1b      	subs	r3, #27
 8001600:	2207      	movs	r2, #7
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	4019      	ands	r1, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	6898      	ldr	r0, [r3, #8]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	3b1b      	subs	r3, #27
 800161a:	fa00 f203 	lsl.w	r2, r0, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	619a      	str	r2, [r3, #24]
 8001626:	e01b      	b.n	8001660 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6959      	ldr	r1, [r3, #20]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	2207      	movs	r2, #7
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	4019      	ands	r1, r3
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	6898      	ldr	r0, [r3, #8]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	1c5a      	adds	r2, r3, #1
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	fa00 f203 	lsl.w	r2, r0, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001660:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <HAL_ADC_ConfigChannel+0x474>)
 8001662:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b10      	cmp	r3, #16
 800166a:	d105      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800166c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001674:	2b00      	cmp	r3, #0
 8001676:	d014      	beq.n	80016a2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800167c:	2b11      	cmp	r3, #17
 800167e:	d105      	bne.n	800168c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00a      	beq.n	80016a2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001690:	2b12      	cmp	r3, #18
 8001692:	f040 8086 	bne.w	80017a2 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d17f      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d10d      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x478>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d106      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x478>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e005      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x47a>
 80016c6:	bf00      	nop
 80016c8:	83fff000 	.word	0x83fff000
 80016cc:	50000300 	.word	0x50000300
 80016d0:	2300      	movs	r3, #0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d150      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016d6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d010      	beq.n	80016fe <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d107      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x4a0>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x4a0>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <HAL_ADC_ConfigChannel+0x4a2>
 80016f8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d13c      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b10      	cmp	r3, #16
 8001704:	d11d      	bne.n	8001742 <HAL_ADC_ConfigChannel+0x4ea>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800170e:	d118      	bne.n	8001742 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800171a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800171c:	4b27      	ldr	r3, [pc, #156]	; (80017bc <HAL_ADC_ConfigChannel+0x564>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a27      	ldr	r2, [pc, #156]	; (80017c0 <HAL_ADC_ConfigChannel+0x568>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	0c9a      	lsrs	r2, r3, #18
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001732:	e002      	b.n	800173a <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	3b01      	subs	r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f9      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001740:	e02e      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b11      	cmp	r3, #17
 8001748:	d10b      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x50a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001752:	d106      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800175c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800175e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001760:	e01e      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b12      	cmp	r3, #18
 8001768:	d11a      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800176a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001774:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001776:	e013      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f043 0220 	orr.w	r2, r3, #32
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800178a:	e00a      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f043 0220 	orr.w	r2, r3, #32
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800179e:	e000      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017a0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80017aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	376c      	adds	r7, #108	; 0x6c
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000004 	.word	0x20000004
 80017c0:	431bde83 	.word	0x431bde83

080017c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d108      	bne.n	80017f0 <ADC_Enable+0x2c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <ADC_Enable+0x2c>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <ADC_Enable+0x2e>
 80017f0:	2300      	movs	r3, #0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d143      	bne.n	800187e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	4b22      	ldr	r3, [pc, #136]	; (8001888 <ADC_Enable+0xc4>)
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00d      	beq.n	8001820 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f043 0210 	orr.w	r2, r3, #16
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001814:	f043 0201 	orr.w	r2, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e02f      	b.n	8001880 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001830:	f7ff fa46 	bl	8000cc0 <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001836:	e01b      	b.n	8001870 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001838:	f7ff fa42 	bl	8000cc0 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d914      	bls.n	8001870 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b01      	cmp	r3, #1
 8001852:	d00d      	beq.n	8001870 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f043 0210 	orr.w	r2, r3, #16
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001864:	f043 0201 	orr.w	r2, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e007      	b.n	8001880 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b01      	cmp	r3, #1
 800187c:	d1dc      	bne.n	8001838 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	8000003f 	.word	0x8000003f

0800188c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d108      	bne.n	80018b8 <ADC_Disable+0x2c>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <ADC_Disable+0x2c>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <ADC_Disable+0x2e>
 80018b8:	2300      	movs	r3, #0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d047      	beq.n	800194e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 030d 	and.w	r3, r3, #13
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d10f      	bne.n	80018ec <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0202 	orr.w	r2, r2, #2
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2203      	movs	r2, #3
 80018e2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80018e4:	f7ff f9ec 	bl	8000cc0 <HAL_GetTick>
 80018e8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018ea:	e029      	b.n	8001940 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f043 0210 	orr.w	r2, r3, #16
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fc:	f043 0201 	orr.w	r2, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e023      	b.n	8001950 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001908:	f7ff f9da 	bl	8000cc0 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d914      	bls.n	8001940 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b01      	cmp	r3, #1
 8001922:	d10d      	bne.n	8001940 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f043 0210 	orr.w	r2, r3, #16
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	f043 0201 	orr.w	r2, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e007      	b.n	8001950 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b01      	cmp	r3, #1
 800194c:	d0dc      	beq.n	8001908 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db0b      	blt.n	80019e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	4907      	ldr	r1, [pc, #28]	; (80019f4 <__NVIC_EnableIRQ+0x38>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2001      	movs	r0, #1
 80019de:	fa00 f202 	lsl.w	r2, r0, r2
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db0a      	blt.n	8001a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	490c      	ldr	r1, [pc, #48]	; (8001a44 <__NVIC_SetPriority+0x4c>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a20:	e00a      	b.n	8001a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4908      	ldr	r1, [pc, #32]	; (8001a48 <__NVIC_SetPriority+0x50>)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	3b04      	subs	r3, #4
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	440b      	add	r3, r1
 8001a36:	761a      	strb	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000e100 	.word	0xe000e100
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f1c3 0307 	rsb	r3, r3, #7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	bf28      	it	cs
 8001a6a:	2304      	movcs	r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3304      	adds	r3, #4
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d902      	bls.n	8001a7c <NVIC_EncodePriority+0x30>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3b03      	subs	r3, #3
 8001a7a:	e000      	b.n	8001a7e <NVIC_EncodePriority+0x32>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	401a      	ands	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	43d9      	mvns	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	4313      	orrs	r3, r2
         );
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	; 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac4:	d301      	bcc.n	8001aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00f      	b.n	8001aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <SysTick_Config+0x40>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f7ff ff8e 	bl	80019f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <SysTick_Config+0x40>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae2:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <SysTick_Config+0x40>)
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	e000e010 	.word	0xe000e010

08001af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff29 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b20:	f7ff ff3e 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	6978      	ldr	r0, [r7, #20]
 8001b2c:	f7ff ff8e 	bl	8001a4c <NVIC_EncodePriority>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff5d 	bl	80019f8 <__NVIC_SetPriority>
}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff31 	bl	80019bc <__NVIC_EnableIRQ>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffa2 	bl	8001ab4 <SysTick_Config>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e037      	b.n	8001c00 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ba6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001baa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f98c 	bl	8001f00 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}  
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_DMA_Start_IT+0x20>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e04a      	b.n	8001cbe <HAL_DMA_Start_IT+0xb6>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d13a      	bne.n	8001cb0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f91f 	bl	8001ea2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 020e 	orr.w	r2, r2, #14
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e00f      	b.n	8001c9e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 020a 	orr.w	r2, r2, #10
 8001c8c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0204 	bic.w	r2, r2, #4
 8001c9c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0201 	orr.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	e005      	b.n	8001cbc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b084      	sub	sp, #16
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d005      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2204      	movs	r2, #4
 8001ce0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
 8001ce6:	e027      	b.n	8001d38 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 020e 	bic.w	r2, r2, #14
 8001cf6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d10:	2101      	movs	r1, #1
 8001d12:	fa01 f202 	lsl.w	r2, r1, r2
 8001d16:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	4798      	blx	r3
    } 
  }
  return status;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	2204      	movs	r2, #4
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d024      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x72>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01f      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d107      	bne.n	8001d92 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0204 	bic.w	r2, r2, #4
 8001d90:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001da0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d06a      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001db2:	e065      	b.n	8001e80 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	2202      	movs	r2, #2
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d02c      	beq.n	8001e1e <HAL_DMA_IRQHandler+0xdc>
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d027      	beq.n	8001e1e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10b      	bne.n	8001df4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 020a 	bic.w	r2, r2, #10
 8001dea:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfc:	2102      	movs	r1, #2
 8001dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001e02:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d035      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001e1c:	e030      	b.n	8001e80 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	2208      	movs	r2, #8
 8001e24:	409a      	lsls	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d028      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x13e>
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d023      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 020e 	bic.w	r2, r2, #14
 8001e46:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e50:	2101      	movs	r1, #1
 8001e52:	fa01 f202 	lsl.w	r2, r1, r2
 8001e56:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d004      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	4798      	blx	r3
    }
  }
}  
 8001e7e:	e7ff      	b.n	8001e80 <HAL_DMA_IRQHandler+0x13e>
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb8:	2101      	movs	r1, #1
 8001eba:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebe:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b10      	cmp	r3, #16
 8001ece:	d108      	bne.n	8001ee2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ee0:	e007      	b.n	8001ef2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	60da      	str	r2, [r3, #12]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <DMA_CalcBaseAndBitshift+0x34>)
 8001f10:	4413      	add	r3, r2
 8001f12:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <DMA_CalcBaseAndBitshift+0x38>)
 8001f14:	fba2 2303 	umull	r2, r3, r2, r3
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	009a      	lsls	r2, r3, #2
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a06      	ldr	r2, [pc, #24]	; (8001f3c <DMA_CalcBaseAndBitshift+0x3c>)
 8001f24:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	bffdfff8 	.word	0xbffdfff8
 8001f38:	cccccccd 	.word	0xcccccccd
 8001f3c:	40020000 	.word	0x40020000

08001f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f4e:	e14e      	b.n	80021ee <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	2101      	movs	r1, #1
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8140 	beq.w	80021e8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d005      	beq.n	8001f80 <HAL_GPIO_Init+0x40>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d130      	bne.n	8001fe2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	091b      	lsrs	r3, r3, #4
 8001fcc:	f003 0201 	and.w	r2, r3, #1
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d017      	beq.n	800201e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d123      	bne.n	8002072 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	08da      	lsrs	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3208      	adds	r2, #8
 8002032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002036:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	220f      	movs	r2, #15
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	08da      	lsrs	r2, r3, #3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3208      	adds	r2, #8
 800206c:	6939      	ldr	r1, [r7, #16]
 800206e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	2203      	movs	r2, #3
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0203 	and.w	r2, r3, #3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 809a 	beq.w	80021e8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b4:	4b55      	ldr	r3, [pc, #340]	; (800220c <HAL_GPIO_Init+0x2cc>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	4a54      	ldr	r2, [pc, #336]	; (800220c <HAL_GPIO_Init+0x2cc>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	6193      	str	r3, [r2, #24]
 80020c0:	4b52      	ldr	r3, [pc, #328]	; (800220c <HAL_GPIO_Init+0x2cc>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020cc:	4a50      	ldr	r2, [pc, #320]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	220f      	movs	r2, #15
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020f6:	d013      	beq.n	8002120 <HAL_GPIO_Init+0x1e0>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a46      	ldr	r2, [pc, #280]	; (8002214 <HAL_GPIO_Init+0x2d4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00d      	beq.n	800211c <HAL_GPIO_Init+0x1dc>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a45      	ldr	r2, [pc, #276]	; (8002218 <HAL_GPIO_Init+0x2d8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d007      	beq.n	8002118 <HAL_GPIO_Init+0x1d8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a44      	ldr	r2, [pc, #272]	; (800221c <HAL_GPIO_Init+0x2dc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d101      	bne.n	8002114 <HAL_GPIO_Init+0x1d4>
 8002110:	2303      	movs	r3, #3
 8002112:	e006      	b.n	8002122 <HAL_GPIO_Init+0x1e2>
 8002114:	2305      	movs	r3, #5
 8002116:	e004      	b.n	8002122 <HAL_GPIO_Init+0x1e2>
 8002118:	2302      	movs	r3, #2
 800211a:	e002      	b.n	8002122 <HAL_GPIO_Init+0x1e2>
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <HAL_GPIO_Init+0x1e2>
 8002120:	2300      	movs	r3, #0
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	f002 0203 	and.w	r2, r2, #3
 8002128:	0092      	lsls	r2, r2, #2
 800212a:	4093      	lsls	r3, r2
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002132:	4937      	ldr	r1, [pc, #220]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002140:	4b37      	ldr	r3, [pc, #220]	; (8002220 <HAL_GPIO_Init+0x2e0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	43db      	mvns	r3, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002164:	4a2e      	ldr	r2, [pc, #184]	; (8002220 <HAL_GPIO_Init+0x2e0>)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800216a:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_GPIO_Init+0x2e0>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800218e:	4a24      	ldr	r2, [pc, #144]	; (8002220 <HAL_GPIO_Init+0x2e0>)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002194:	4b22      	ldr	r3, [pc, #136]	; (8002220 <HAL_GPIO_Init+0x2e0>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	43db      	mvns	r3, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021b8:	4a19      	ldr	r2, [pc, #100]	; (8002220 <HAL_GPIO_Init+0x2e0>)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_GPIO_Init+0x2e0>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021e2:	4a0f      	ldr	r2, [pc, #60]	; (8002220 <HAL_GPIO_Init+0x2e0>)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	3301      	adds	r3, #1
 80021ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f47f aea9 	bne.w	8001f50 <HAL_GPIO_Init+0x10>
  }
}
 80021fe:	bf00      	nop
 8002200:	371c      	adds	r7, #28
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	40010000 	.word	0x40010000
 8002214:	48000400 	.word	0x48000400
 8002218:	48000800 	.word	0x48000800
 800221c:	48000c00 	.word	0x48000c00
 8002220:	40010400 	.word	0x40010400

08002224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
 8002230:	4613      	mov	r3, r2
 8002232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002234:	787b      	ldrb	r3, [r7, #1]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002240:	e002      	b.n	8002248 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	4013      	ands	r3, r2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d006      	beq.n	8002278 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800226a:	4a05      	ldr	r2, [pc, #20]	; (8002280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f806 	bl	8002284 <HAL_GPIO_EXTI_Callback>
  }
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40010400 	.word	0x40010400

08002284 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e081      	b.n	80023b0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d106      	bne.n	80022c6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7fe fb21 	bl	8000908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2224      	movs	r2, #36	; 0x24
 80022ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d107      	bne.n	8002314 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	e006      	b.n	8002322 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002320:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d104      	bne.n	8002334 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002332:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002346:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002356:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69d9      	ldr	r1, [r3, #28]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1a      	ldr	r2, [r3, #32]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0201 	orr.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023d4:	2b28      	cmp	r3, #40	; 0x28
 80023d6:	f040 808a 	bne.w	80024ee <HAL_I2C_Slave_Seq_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d105      	bne.n	80023f2 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e07e      	b.n	80024f0 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80023f2:	f248 0101 	movw	r1, #32769	; 0x8001
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f001 f9e0 	bl	80037bc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8002406:	2302      	movs	r3, #2
 8002408:	e072      	b.n	80024f0 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b2a      	cmp	r3, #42	; 0x2a
 800241c:	d12a      	bne.n	8002474 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800241e:	2102      	movs	r1, #2
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f001 f9cb 	bl	80037bc <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002434:	d11e      	bne.n	8002474 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002444:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	2b00      	cmp	r3, #0
 800244c:	d012      	beq.n	8002474 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002452:	4a29      	ldr	r2, [pc, #164]	; (80024f8 <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
 8002454:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fc33 	bl	8001cc6 <HAL_DMA_Abort_IT>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002470:	4610      	mov	r0, r2
 8002472:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2229      	movs	r2, #41	; 0x29
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002498:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	88fa      	ldrh	r2, [r7, #6]
 80024a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4a10      	ldr	r2, [pc, #64]	; (80024fc <HAL_I2C_Slave_Seq_Transmit_IT+0x144>)
 80024ba:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	0c1b      	lsrs	r3, r3, #16
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d103      	bne.n	80024d8 <HAL_I2C_Slave_Seq_Transmit_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2208      	movs	r2, #8
 80024d6:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80024e0:	f248 0101 	movw	r1, #32769	; 0x8001
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f001 f905 	bl	80036f4 <I2C_Enable_IRQ>

    return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
  }
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	0800365b 	.word	0x0800365b
 80024fc:	080027e7 	.word	0x080027e7

08002500 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800251c:	2b28      	cmp	r3, #40	; 0x28
 800251e:	f040 808a 	bne.w	8002636 <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d105      	bne.n	800253a <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002534:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e07e      	b.n	8002638 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800253a:	f248 0102 	movw	r1, #32770	; 0x8002
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f001 f93c 	bl	80037bc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 800254e:	2302      	movs	r3, #2
 8002550:	e072      	b.n	8002638 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b29      	cmp	r3, #41	; 0x29
 8002564:	d12a      	bne.n	80025bc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002566:	2101      	movs	r1, #1
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f001 f927 	bl	80037bc <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800257c:	d11e      	bne.n	80025bc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800258c:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	2b00      	cmp	r3, #0
 8002594:	d012      	beq.n	80025bc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	4a29      	ldr	r2, [pc, #164]	; (8002640 <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
 800259c:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fb8f 	bl	8001cc6 <HAL_DMA_Abort_IT>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d006      	beq.n	80025bc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025b8:	4610      	mov	r0, r2
 80025ba:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	222a      	movs	r2, #42	; 0x2a
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025e0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	88fa      	ldrh	r2, [r7, #6]
 80025ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4a10      	ldr	r2, [pc, #64]	; (8002644 <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
 8002602:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	0c1b      	lsrs	r3, r3, #16
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d103      	bne.n	8002620 <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2208      	movs	r2, #8
 800261e:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002628:	f248 0102 	movw	r1, #32770	; 0x8002
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f001 f861 	bl	80036f4 <I2C_Enable_IRQ>

    return HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	e000      	b.n	8002638 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
  }
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	0800365b 	.word	0x0800365b
 8002644:	080027e7 	.word	0x080027e7

08002648 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b20      	cmp	r3, #32
 800265a:	d10d      	bne.n	8002678 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2228      	movs	r2, #40	; 0x28
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a07      	ldr	r2, [pc, #28]	; (8002684 <HAL_I2C_EnableListen_IT+0x3c>)
 8002668:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800266a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f001 f840 	bl	80036f4 <I2C_Enable_IRQ>

    return HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	e000      	b.n	800267a <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
  }
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	080027e7 	.word	0x080027e7

08002688 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	68f9      	ldr	r1, [r7, #12]
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
  }
}
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d010      	beq.n	8002702 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	09db      	lsrs	r3, r3, #7
 80026e4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	f043 0201 	orr.w	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002700:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	0a9b      	lsrs	r3, r3, #10
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d010      	beq.n	8002730 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	09db      	lsrs	r3, r3, #7
 8002712:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f043 0208 	orr.w	r2, r3, #8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800272e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	0a5b      	lsrs	r3, r3, #9
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d010      	beq.n	800275e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	09db      	lsrs	r3, r3, #7
 8002740:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274c:	f043 0202 	orr.w	r2, r3, #2
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800275c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 030b 	and.w	r3, r3, #11
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800276e:	68f9      	ldr	r1, [r7, #12]
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fe57 	bl	8003424 <I2C_ITError>
  }
}
 8002776:	bf00      	nop
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b086      	sub	sp, #24
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <I2C_Slave_ISR_IT+0x24>
 8002806:	2302      	movs	r3, #2
 8002808:	e0ec      	b.n	80029e4 <I2C_Slave_ISR_IT+0x1fe>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800282a:	6939      	ldr	r1, [r7, #16]
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 fc99 	bl	8003164 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d04d      	beq.n	80028da <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002846:	2b00      	cmp	r3, #0
 8002848:	d047      	beq.n	80028da <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d128      	bne.n	80028a6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b28      	cmp	r3, #40	; 0x28
 800285e:	d108      	bne.n	8002872 <I2C_Slave_ISR_IT+0x8c>
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002866:	d104      	bne.n	8002872 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002868:	6939      	ldr	r1, [r7, #16]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fd84 	bl	8003378 <I2C_ITListenCplt>
 8002870:	e032      	b.n	80028d8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b29      	cmp	r3, #41	; 0x29
 800287c:	d10e      	bne.n	800289c <I2C_Slave_ISR_IT+0xb6>
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002884:	d00a      	beq.n	800289c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2210      	movs	r2, #16
 800288c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 febf 	bl	8003612 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fb3d 	bl	8002f14 <I2C_ITSlaveSeqCplt>
 800289a:	e01d      	b.n	80028d8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2210      	movs	r2, #16
 80028a2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80028a4:	e096      	b.n	80029d4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2210      	movs	r2, #16
 80028ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f043 0204 	orr.w	r2, r3, #4
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d004      	beq.n	80028ca <I2C_Slave_ISR_IT+0xe4>
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c6:	f040 8085 	bne.w	80029d4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	4619      	mov	r1, r3
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fda7 	bl	8003424 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80028d6:	e07d      	b.n	80029d4 <I2C_Slave_ISR_IT+0x1ee>
 80028d8:	e07c      	b.n	80029d4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d030      	beq.n	8002948 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d02a      	beq.n	8002948 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d018      	beq.n	800292e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d14f      	bne.n	80029d8 <I2C_Slave_ISR_IT+0x1f2>
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800293e:	d04b      	beq.n	80029d8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fae7 	bl	8002f14 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002946:	e047      	b.n	80029d8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	08db      	lsrs	r3, r3, #3
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	08db      	lsrs	r3, r3, #3
 8002958:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800295c:	2b00      	cmp	r3, #0
 800295e:	d004      	beq.n	800296a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002960:	6939      	ldr	r1, [r7, #16]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fa15 	bl	8002d92 <I2C_ITAddrCplt>
 8002968:	e037      	b.n	80029da <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	085b      	lsrs	r3, r3, #1
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d031      	beq.n	80029da <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	085b      	lsrs	r3, r3, #1
 800297a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800297e:	2b00      	cmp	r3, #0
 8002980:	d02b      	beq.n	80029da <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d018      	beq.n	80029be <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	781a      	ldrb	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	851a      	strh	r2, [r3, #40]	; 0x28
 80029bc:	e00d      	b.n	80029da <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c4:	d002      	beq.n	80029cc <I2C_Slave_ISR_IT+0x1e6>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d106      	bne.n	80029da <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 faa1 	bl	8002f14 <I2C_ITSlaveSeqCplt>
 80029d2:	e002      	b.n	80029da <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80029d4:	bf00      	nop
 80029d6:	e000      	b.n	80029da <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80029d8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <I2C_Master_ISR_DMA+0x1a>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e0e1      	b.n	8002bca <I2C_Master_ISR_DMA+0x1de>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d017      	beq.n	8002a4a <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d011      	beq.n	8002a4a <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2210      	movs	r2, #16
 8002a2c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f043 0204 	orr.w	r2, r3, #4
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002a3a:	2120      	movs	r1, #32
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fe59 	bl	80036f4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 fde5 	bl	8003612 <I2C_Flush_TXDR>
 8002a48:	e0ba      	b.n	8002bc0 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	09db      	lsrs	r3, r3, #7
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d072      	beq.n	8002b3c <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	099b      	lsrs	r3, r3, #6
 8002a5a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d06c      	beq.n	8002b3c <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a70:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d04e      	beq.n	8002b1a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a88:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2bff      	cmp	r3, #255	; 0xff
 8002a92:	d906      	bls.n	8002aa2 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	22ff      	movs	r2, #255	; 0xff
 8002a98:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002a9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	e010      	b.n	8002ac4 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ab4:	d003      	beq.n	8002abe <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	e002      	b.n	8002ac4 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002abe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ac2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	8a79      	ldrh	r1, [r7, #18]
 8002acc:	2300      	movs	r3, #0
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fde0 	bl	8003698 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b22      	cmp	r3, #34	; 0x22
 8002af4:	d108      	bne.n	8002b08 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b04:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002b06:	e05b      	b.n	8002bc0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b16:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002b18:	e052      	b.n	8002bc0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b28:	d003      	beq.n	8002b32 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f9b5 	bl	8002e9a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002b30:	e046      	b.n	8002bc0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002b32:	2140      	movs	r1, #64	; 0x40
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fc75 	bl	8003424 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002b3a:	e041      	b.n	8002bc0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	099b      	lsrs	r3, r3, #6
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d029      	beq.n	8002b9c <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	099b      	lsrs	r3, r3, #6
 8002b4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d023      	beq.n	8002b9c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d119      	bne.n	8002b92 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b6c:	d027      	beq.n	8002bbe <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b76:	d108      	bne.n	8002b8a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b86:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002b88:	e019      	b.n	8002bbe <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f985 	bl	8002e9a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002b90:	e015      	b.n	8002bbe <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002b92:	2140      	movs	r1, #64	; 0x40
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 fc45 	bl	8003424 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002b9a:	e010      	b.n	8002bbe <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00b      	beq.n	8002bc0 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fa0a 	bl	8002fd0 <I2C_ITMasterCplt>
 8002bbc:	e000      	b.n	8002bc0 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002bbe:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b088      	sub	sp, #32
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <I2C_Slave_ISR_DMA+0x24>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e0c9      	b.n	8002d8a <I2C_Slave_ISR_DMA+0x1b8>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	095b      	lsrs	r3, r3, #5
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 faa3 	bl	8003164 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 809a 	beq.w	8002d60 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8093 	beq.w	8002d60 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0b9b      	lsrs	r3, r3, #14
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d105      	bne.n	8002c52 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	0bdb      	lsrs	r3, r3, #15
 8002c4a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d07f      	beq.n	8002d52 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00d      	beq.n	8002c76 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	0bdb      	lsrs	r3, r3, #15
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8002c72:	2301      	movs	r3, #1
 8002c74:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00d      	beq.n	8002c9a <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	0b9b      	lsrs	r3, r3, #14
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8002c96:	2301      	movs	r3, #1
 8002c98:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d128      	bne.n	8002cf2 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b28      	cmp	r3, #40	; 0x28
 8002caa:	d108      	bne.n	8002cbe <I2C_Slave_ISR_DMA+0xec>
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cb2:	d104      	bne.n	8002cbe <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fb5e 	bl	8003378 <I2C_ITListenCplt>
 8002cbc:	e048      	b.n	8002d50 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b29      	cmp	r3, #41	; 0x29
 8002cc8:	d10e      	bne.n	8002ce8 <I2C_Slave_ISR_DMA+0x116>
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cd0:	d00a      	beq.n	8002ce8 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fc99 	bl	8003612 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f917 	bl	8002f14 <I2C_ITSlaveSeqCplt>
 8002ce6:	e033      	b.n	8002d50 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2210      	movs	r2, #16
 8002cee:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002cf0:	e034      	b.n	8002d5c <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2210      	movs	r2, #16
 8002cf8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	f043 0204 	orr.w	r2, r3, #4
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d0c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <I2C_Slave_ISR_DMA+0x14a>
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d1a:	d11f      	bne.n	8002d5c <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
 8002d1e:	2b21      	cmp	r3, #33	; 0x21
 8002d20:	d002      	beq.n	8002d28 <I2C_Slave_ISR_DMA+0x156>
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	2b29      	cmp	r3, #41	; 0x29
 8002d26:	d103      	bne.n	8002d30 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2221      	movs	r2, #33	; 0x21
 8002d2c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d2e:	e008      	b.n	8002d42 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d30:	7dfb      	ldrb	r3, [r7, #23]
 8002d32:	2b22      	cmp	r3, #34	; 0x22
 8002d34:	d002      	beq.n	8002d3c <I2C_Slave_ISR_DMA+0x16a>
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
 8002d38:	2b2a      	cmp	r3, #42	; 0x2a
 8002d3a:	d102      	bne.n	8002d42 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2222      	movs	r2, #34	; 0x22
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	4619      	mov	r1, r3
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fb6b 	bl	8003424 <I2C_ITError>
      if (treatdmanack == 1U)
 8002d4e:	e005      	b.n	8002d5c <I2C_Slave_ISR_DMA+0x18a>
 8002d50:	e004      	b.n	8002d5c <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2210      	movs	r2, #16
 8002d58:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002d5a:	e011      	b.n	8002d80 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8002d5c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002d5e:	e00f      	b.n	8002d80 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	08db      	lsrs	r3, r3, #3
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d009      	beq.n	8002d80 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	08db      	lsrs	r3, r3, #3
 8002d70:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f809 	bl	8002d92 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002da8:	2b28      	cmp	r3, #40	; 0x28
 8002daa:	d16a      	bne.n	8002e82 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	0c1b      	lsrs	r3, r3, #16
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002dca:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dd8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002de6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d138      	bne.n	8002e62 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002df0:	897b      	ldrh	r3, [r7, #10]
 8002df2:	09db      	lsrs	r3, r3, #7
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	89bb      	ldrh	r3, [r7, #12]
 8002df8:	4053      	eors	r3, r2
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	f003 0306 	and.w	r3, r3, #6
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d11c      	bne.n	8002e3e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002e04:	897b      	ldrh	r3, [r7, #10]
 8002e06:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d13b      	bne.n	8002e92 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2208      	movs	r2, #8
 8002e26:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e30:	89ba      	ldrh	r2, [r7, #12]
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	4619      	mov	r1, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7fd fc20 	bl	800067c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e3c:	e029      	b.n	8002e92 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002e3e:	893b      	ldrh	r3, [r7, #8]
 8002e40:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fcb8 	bl	80037bc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e54:	89ba      	ldrh	r2, [r7, #12]
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fd fc0e 	bl	800067c <HAL_I2C_AddrCallback>
}
 8002e60:	e017      	b.n	8002e92 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fca8 	bl	80037bc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e74:	89ba      	ldrh	r2, [r7, #12]
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd fbfe 	bl	800067c <HAL_I2C_AddrCallback>
}
 8002e80:	e007      	b.n	8002e92 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2208      	movs	r2, #8
 8002e88:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b21      	cmp	r3, #33	; 0x21
 8002eb4:	d115      	bne.n	8002ee2 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2211      	movs	r2, #17
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002eca:	2101      	movs	r1, #1
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fc75 	bl	80037bc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff fc4f 	bl	800277e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ee0:	e014      	b.n	8002f0c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2212      	movs	r2, #18
 8002eee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fc5f 	bl	80037bc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff fc43 	bl	8002792 <HAL_I2C_MasterRxCpltCallback>
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	0b9b      	lsrs	r3, r3, #14
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e00d      	b.n	8002f66 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	0bdb      	lsrs	r3, r3, #15
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f64:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b29      	cmp	r3, #41	; 0x29
 8002f70:	d112      	bne.n	8002f98 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2228      	movs	r2, #40	; 0x28
 8002f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2221      	movs	r2, #33	; 0x21
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f80:	2101      	movs	r1, #1
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fc1a 	bl	80037bc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7fd fb95 	bl	80006c0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f96:	e017      	b.n	8002fc8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8002fa2:	d111      	bne.n	8002fc8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2228      	movs	r2, #40	; 0x28
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2222      	movs	r2, #34	; 0x22
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fc01 	bl	80037bc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd fb72 	bl	80006ac <HAL_I2C_SlaveRxCpltCallback>
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b21      	cmp	r3, #33	; 0x21
 8002ff0:	d107      	bne.n	8003002 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fbe1 	bl	80037bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2211      	movs	r2, #17
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8003000:	e00c      	b.n	800301c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b22      	cmp	r3, #34	; 0x22
 800300c:	d106      	bne.n	800301c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800300e:	2102      	movs	r1, #2
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fbd3 	bl	80037bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2212      	movs	r2, #18
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6859      	ldr	r1, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4b4d      	ldr	r3, [pc, #308]	; (800315c <I2C_ITMasterCplt+0x18c>)
 8003028:	400b      	ands	r3, r1
 800302a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a4a      	ldr	r2, [pc, #296]	; (8003160 <I2C_ITMasterCplt+0x190>)
 8003036:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	091b      	lsrs	r3, r3, #4
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d009      	beq.n	8003058 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2210      	movs	r2, #16
 800304a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003050:	f043 0204 	orr.w	r2, r3, #4
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b60      	cmp	r3, #96	; 0x60
 8003062:	d10b      	bne.n	800307c <I2C_ITMasterCplt+0xac>
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	089b      	lsrs	r3, r3, #2
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	b2db      	uxtb	r3, r3
 8003078:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800307a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fac8 	bl	8003612 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b60      	cmp	r3, #96	; 0x60
 8003092:	d002      	beq.n	800309a <I2C_ITMasterCplt+0xca>
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d006      	beq.n	80030a8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	4619      	mov	r1, r3
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f9bf 	bl	8003424 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80030a6:	e054      	b.n	8003152 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b21      	cmp	r3, #33	; 0x21
 80030b2:	d124      	bne.n	80030fe <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d10b      	bne.n	80030e6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7ff fb61 	bl	80027a6 <HAL_I2C_MemTxCpltCallback>
}
 80030e4:	e035      	b.n	8003152 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff fb41 	bl	800277e <HAL_I2C_MasterTxCpltCallback>
}
 80030fc:	e029      	b.n	8003152 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b22      	cmp	r3, #34	; 0x22
 8003108:	d123      	bne.n	8003152 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d10b      	bne.n	800313c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff fb40 	bl	80027ba <HAL_I2C_MemRxCpltCallback>
}
 800313a:	e00a      	b.n	8003152 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff fb20 	bl	8002792 <HAL_I2C_MasterRxCpltCallback>
}
 8003152:	bf00      	nop
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	fe00e800 	.word	0xfe00e800
 8003160:	ffff0000 	.word	0xffff0000

08003164 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003180:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2220      	movs	r2, #32
 8003188:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	2b21      	cmp	r3, #33	; 0x21
 800318e:	d002      	beq.n	8003196 <I2C_ITSlaveCplt+0x32>
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b29      	cmp	r3, #41	; 0x29
 8003194:	d108      	bne.n	80031a8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003196:	f248 0101 	movw	r1, #32769	; 0x8001
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fb0e 	bl	80037bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2221      	movs	r2, #33	; 0x21
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
 80031a6:	e00d      	b.n	80031c4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	2b22      	cmp	r3, #34	; 0x22
 80031ac:	d002      	beq.n	80031b4 <I2C_ITSlaveCplt+0x50>
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	2b2a      	cmp	r3, #42	; 0x2a
 80031b2:	d107      	bne.n	80031c4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80031b4:	f248 0102 	movw	r1, #32770	; 0x8002
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 faff 	bl	80037bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2222      	movs	r2, #34	; 0x22
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6859      	ldr	r1, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	4b64      	ldr	r3, [pc, #400]	; (8003370 <I2C_ITSlaveCplt+0x20c>)
 80031e0:	400b      	ands	r3, r1
 80031e2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fa14 	bl	8003612 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	0b9b      	lsrs	r3, r3, #14
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d013      	beq.n	800321e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003204:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	2b00      	cmp	r3, #0
 800320c:	d020      	beq.n	8003250 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	b29a      	uxth	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800321c:	e018      	b.n	8003250 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	0bdb      	lsrs	r3, r3, #15
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d012      	beq.n	8003250 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003238:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d006      	beq.n	8003250 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	b29a      	uxth	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	089b      	lsrs	r3, r3, #2
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d020      	beq.n	800329e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f023 0304 	bic.w	r3, r3, #4
 8003262:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00c      	beq.n	800329e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ac:	f043 0204 	orr.w	r2, r3, #4
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d010      	beq.n	80032ec <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	4619      	mov	r1, r3
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f8a7 	bl	8003424 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b28      	cmp	r3, #40	; 0x28
 80032e0:	d141      	bne.n	8003366 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80032e2:	6979      	ldr	r1, [r7, #20]
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f847 	bl	8003378 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032ea:	e03c      	b.n	8003366 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032f4:	d014      	beq.n	8003320 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff fe0c 	bl	8002f14 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <I2C_ITSlaveCplt+0x210>)
 8003300:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7fd f9f3 	bl	8000704 <HAL_I2C_ListenCpltCallback>
}
 800331e:	e022      	b.n	8003366 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b22      	cmp	r3, #34	; 0x22
 800332a:	d10e      	bne.n	800334a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fd f9b2 	bl	80006ac <HAL_I2C_SlaveRxCpltCallback>
}
 8003348:	e00d      	b.n	8003366 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7fd f9ad 	bl	80006c0 <HAL_I2C_SlaveTxCpltCallback>
}
 8003366:	bf00      	nop
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	fe00e800 	.word	0xfe00e800
 8003374:	ffff0000 	.word	0xffff0000

08003378 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a26      	ldr	r2, [pc, #152]	; (8003420 <I2C_ITListenCplt+0xa8>)
 8003386:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d022      	beq.n	80033f6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d012      	beq.n	80033f6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f043 0204 	orr.w	r2, r3, #4
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80033f6:	f248 0103 	movw	r1, #32771	; 0x8003
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f9de 	bl	80037bc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2210      	movs	r2, #16
 8003406:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7fd f977 	bl	8000704 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	ffff0000 	.word	0xffff0000

08003424 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a5d      	ldr	r2, [pc, #372]	; (80035b8 <I2C_ITError+0x194>)
 8003442:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	2b28      	cmp	r3, #40	; 0x28
 800345a:	d005      	beq.n	8003468 <I2C_ITError+0x44>
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	2b29      	cmp	r3, #41	; 0x29
 8003460:	d002      	beq.n	8003468 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b2a      	cmp	r3, #42	; 0x2a
 8003466:	d10b      	bne.n	8003480 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003468:	2103      	movs	r1, #3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f9a6 	bl	80037bc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2228      	movs	r2, #40	; 0x28
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a50      	ldr	r2, [pc, #320]	; (80035bc <I2C_ITError+0x198>)
 800347c:	635a      	str	r2, [r3, #52]	; 0x34
 800347e:	e011      	b.n	80034a4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003480:	f248 0103 	movw	r1, #32771	; 0x8003
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f999 	bl	80037bc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b60      	cmp	r3, #96	; 0x60
 8003494:	d003      	beq.n	800349e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d039      	beq.n	8003526 <I2C_ITError+0x102>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b11      	cmp	r3, #17
 80034b6:	d002      	beq.n	80034be <I2C_ITError+0x9a>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b21      	cmp	r3, #33	; 0x21
 80034bc:	d133      	bne.n	8003526 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034cc:	d107      	bne.n	80034de <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034dc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe fcd0 	bl	8001e88 <HAL_DMA_GetState>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d017      	beq.n	800351e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	4a33      	ldr	r2, [pc, #204]	; (80035c0 <I2C_ITError+0x19c>)
 80034f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe fbdf 	bl	8001cc6 <HAL_DMA_Abort_IT>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d04d      	beq.n	80035aa <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003518:	4610      	mov	r0, r2
 800351a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800351c:	e045      	b.n	80035aa <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f850 	bl	80035c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003524:	e041      	b.n	80035aa <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d039      	beq.n	80035a2 <I2C_ITError+0x17e>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b12      	cmp	r3, #18
 8003532:	d002      	beq.n	800353a <I2C_ITError+0x116>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b22      	cmp	r3, #34	; 0x22
 8003538:	d133      	bne.n	80035a2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003548:	d107      	bne.n	800355a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003558:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	4618      	mov	r0, r3
 8003560:	f7fe fc92 	bl	8001e88 <HAL_DMA_GetState>
 8003564:	4603      	mov	r3, r0
 8003566:	2b01      	cmp	r3, #1
 8003568:	d017      	beq.n	800359a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356e:	4a14      	ldr	r2, [pc, #80]	; (80035c0 <I2C_ITError+0x19c>)
 8003570:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe fba1 	bl	8001cc6 <HAL_DMA_Abort_IT>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d011      	beq.n	80035ae <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003594:	4610      	mov	r0, r2
 8003596:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003598:	e009      	b.n	80035ae <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f812 	bl	80035c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035a0:	e005      	b.n	80035ae <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f80e 	bl	80035c4 <I2C_TreatErrorCallback>
  }
}
 80035a8:	e002      	b.n	80035b0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035aa:	bf00      	nop
 80035ac:	e000      	b.n	80035b0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035ae:	bf00      	nop
}
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	ffff0000 	.word	0xffff0000
 80035bc:	080027e7 	.word	0x080027e7
 80035c0:	0800365b 	.word	0x0800365b

080035c4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b60      	cmp	r3, #96	; 0x60
 80035d6:	d10e      	bne.n	80035f6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fd f898 	bl	8000724 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035f4:	e009      	b.n	800360a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7fd f86b 	bl	80006e0 <HAL_I2C_ErrorCallback>
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b02      	cmp	r3, #2
 8003626:	d103      	bne.n	8003630 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2200      	movs	r2, #0
 800362e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d007      	beq.n	800364e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699a      	ldr	r2, [r3, #24]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	619a      	str	r2, [r3, #24]
  }
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	2200      	movs	r2, #0
 8003676:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003684:	2200      	movs	r2, #0
 8003686:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f7ff ff9b 	bl	80035c4 <I2C_TreatErrorCallback>
}
 800368e:	bf00      	nop
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	607b      	str	r3, [r7, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	817b      	strh	r3, [r7, #10]
 80036a6:	4613      	mov	r3, r2
 80036a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	0d5b      	lsrs	r3, r3, #21
 80036b4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <I2C_TransferConfig+0x58>)
 80036ba:	430b      	orrs	r3, r1
 80036bc:	43db      	mvns	r3, r3
 80036be:	ea02 0103 	and.w	r1, r2, r3
 80036c2:	897b      	ldrh	r3, [r7, #10]
 80036c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036c8:	7a7b      	ldrb	r3, [r7, #9]
 80036ca:	041b      	lsls	r3, r3, #16
 80036cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	431a      	orrs	r2, r3
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	431a      	orrs	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	03ff63ff 	.word	0x03ff63ff

080036f4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003708:	4a2a      	ldr	r2, [pc, #168]	; (80037b4 <I2C_Enable_IRQ+0xc0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d004      	beq.n	8003718 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003712:	4a29      	ldr	r2, [pc, #164]	; (80037b8 <I2C_Enable_IRQ+0xc4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d11d      	bne.n	8003754 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003718:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800371c:	2b00      	cmp	r3, #0
 800371e:	da03      	bge.n	8003728 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003726:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003728:	887b      	ldrh	r3, [r7, #2]
 800372a:	2b10      	cmp	r3, #16
 800372c:	d103      	bne.n	8003736 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003734:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003736:	887b      	ldrh	r3, [r7, #2]
 8003738:	2b20      	cmp	r3, #32
 800373a:	d103      	bne.n	8003744 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003742:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003744:	887b      	ldrh	r3, [r7, #2]
 8003746:	2b40      	cmp	r3, #64	; 0x40
 8003748:	d125      	bne.n	8003796 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003750:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003752:	e020      	b.n	8003796 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003754:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003758:	2b00      	cmp	r3, #0
 800375a:	da03      	bge.n	8003764 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003762:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003764:	887b      	ldrh	r3, [r7, #2]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003774:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003776:	887b      	ldrh	r3, [r7, #2]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003786:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003788:	887b      	ldrh	r3, [r7, #2]
 800378a:	2b20      	cmp	r3, #32
 800378c:	d103      	bne.n	8003796 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f043 0320 	orr.w	r3, r3, #32
 8003794:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6819      	ldr	r1, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	080029ed 	.word	0x080029ed
 80037b8:	08002bd3 	.word	0x08002bd3

080037bc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80037cc:	887b      	ldrh	r3, [r7, #2]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00f      	beq.n	80037f6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80037dc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037ea:	2b28      	cmp	r3, #40	; 0x28
 80037ec:	d003      	beq.n	80037f6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80037f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80037f6:	887b      	ldrh	r3, [r7, #2]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00f      	beq.n	8003820 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003806:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003814:	2b28      	cmp	r3, #40	; 0x28
 8003816:	d003      	beq.n	8003820 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800381e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003820:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003824:	2b00      	cmp	r3, #0
 8003826:	da03      	bge.n	8003830 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800382e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003830:	887b      	ldrh	r3, [r7, #2]
 8003832:	2b10      	cmp	r3, #16
 8003834:	d103      	bne.n	800383e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800383c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800383e:	887b      	ldrh	r3, [r7, #2]
 8003840:	2b20      	cmp	r3, #32
 8003842:	d103      	bne.n	800384c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f043 0320 	orr.w	r3, r3, #32
 800384a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800384c:	887b      	ldrh	r3, [r7, #2]
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d103      	bne.n	800385a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003858:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6819      	ldr	r1, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	43da      	mvns	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	400a      	ands	r2, r1
 800386a:	601a      	str	r2, [r3, #0]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b20      	cmp	r3, #32
 800388c:	d138      	bne.n	8003900 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003898:	2302      	movs	r3, #2
 800389a:	e032      	b.n	8003902 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	; 0x24
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0201 	bic.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6819      	ldr	r1, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e000      	b.n	8003902 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003900:	2302      	movs	r3, #2
  }
}
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800390e:	b480      	push	{r7}
 8003910:	b085      	sub	sp, #20
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b20      	cmp	r3, #32
 8003922:	d139      	bne.n	8003998 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800392e:	2302      	movs	r3, #2
 8003930:	e033      	b.n	800399a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2224      	movs	r2, #36	; 0x24
 800393e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003960:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	e000      	b.n	800399a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003998:	2302      	movs	r3, #2
  }
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	1d3b      	adds	r3, r7, #4
 80039b2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b4:	1d3b      	adds	r3, r7, #4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d102      	bne.n	80039c2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	f000 bef4 	b.w	80047aa <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 816a 	beq.w	8003ca6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80039d2:	4bb3      	ldr	r3, [pc, #716]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d00c      	beq.n	80039f8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039de:	4bb0      	ldr	r3, [pc, #704]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d159      	bne.n	8003a9e <HAL_RCC_OscConfig+0xf6>
 80039ea:	4bad      	ldr	r3, [pc, #692]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f6:	d152      	bne.n	8003a9e <HAL_RCC_OscConfig+0xf6>
 80039f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a00:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003a04:	fa93 f3a3 	rbit	r3, r3
 8003a08:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a0c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	fab3 f383 	clz	r3, r3
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d102      	bne.n	8003a2a <HAL_RCC_OscConfig+0x82>
 8003a24:	4b9e      	ldr	r3, [pc, #632]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	e015      	b.n	8003a56 <HAL_RCC_OscConfig+0xae>
 8003a2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a2e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003a36:	fa93 f3a3 	rbit	r3, r3
 8003a3a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a42:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003a46:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003a52:	4b93      	ldr	r3, [pc, #588]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a5a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003a5e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003a62:	fa92 f2a2 	rbit	r2, r2
 8003a66:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003a6a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003a6e:	fab2 f282 	clz	r2, r2
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	f042 0220 	orr.w	r2, r2, #32
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	f002 021f 	and.w	r2, r2, #31
 8003a7e:	2101      	movs	r1, #1
 8003a80:	fa01 f202 	lsl.w	r2, r1, r2
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 810c 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x2fc>
 8003a8c:	1d3b      	adds	r3, r7, #4
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f040 8106 	bne.w	8003ca4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f000 be86 	b.w	80047aa <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a9e:	1d3b      	adds	r3, r7, #4
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa8:	d106      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x110>
 8003aaa:	4b7d      	ldr	r3, [pc, #500]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a7c      	ldr	r2, [pc, #496]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e030      	b.n	8003b1a <HAL_RCC_OscConfig+0x172>
 8003ab8:	1d3b      	adds	r3, r7, #4
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCC_OscConfig+0x134>
 8003ac2:	4b77      	ldr	r3, [pc, #476]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a76      	ldr	r2, [pc, #472]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	4b74      	ldr	r3, [pc, #464]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a73      	ldr	r2, [pc, #460]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e01e      	b.n	8003b1a <HAL_RCC_OscConfig+0x172>
 8003adc:	1d3b      	adds	r3, r7, #4
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae6:	d10c      	bne.n	8003b02 <HAL_RCC_OscConfig+0x15a>
 8003ae8:	4b6d      	ldr	r3, [pc, #436]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a6c      	ldr	r2, [pc, #432]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003aee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	4b6a      	ldr	r3, [pc, #424]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a69      	ldr	r2, [pc, #420]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	e00b      	b.n	8003b1a <HAL_RCC_OscConfig+0x172>
 8003b02:	4b67      	ldr	r3, [pc, #412]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a66      	ldr	r2, [pc, #408]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	4b64      	ldr	r3, [pc, #400]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a63      	ldr	r2, [pc, #396]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b18:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b1a:	4b61      	ldr	r3, [pc, #388]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	f023 020f 	bic.w	r2, r3, #15
 8003b22:	1d3b      	adds	r3, r7, #4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	495d      	ldr	r1, [pc, #372]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b2e:	1d3b      	adds	r3, r7, #4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d059      	beq.n	8003bec <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7fd f8c2 	bl	8000cc0 <HAL_GetTick>
 8003b3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b40:	e00a      	b.n	8003b58 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b42:	f7fd f8bd 	bl	8000cc0 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	; 0x64
 8003b50:	d902      	bls.n	8003b58 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	f000 be29 	b.w	80047aa <HAL_RCC_OscConfig+0xe02>
 8003b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b5c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b60:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003b64:	fa93 f3a3 	rbit	r3, r3
 8003b68:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003b6c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b70:	fab3 f383 	clz	r3, r3
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d102      	bne.n	8003b8a <HAL_RCC_OscConfig+0x1e2>
 8003b84:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	e015      	b.n	8003bb6 <HAL_RCC_OscConfig+0x20e>
 8003b8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b8e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b92:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003b96:	fa93 f3a3 	rbit	r3, r3
 8003b9a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003b9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ba2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003ba6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003baa:	fa93 f3a3 	rbit	r3, r3
 8003bae:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003bb2:	4b3b      	ldr	r3, [pc, #236]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bba:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003bbe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003bc2:	fa92 f2a2 	rbit	r2, r2
 8003bc6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003bca:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003bce:	fab2 f282 	clz	r2, r2
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	f042 0220 	orr.w	r2, r2, #32
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	f002 021f 	and.w	r2, r2, #31
 8003bde:	2101      	movs	r1, #1
 8003be0:	fa01 f202 	lsl.w	r2, r1, r2
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0ab      	beq.n	8003b42 <HAL_RCC_OscConfig+0x19a>
 8003bea:	e05c      	b.n	8003ca6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7fd f868 	bl	8000cc0 <HAL_GetTick>
 8003bf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf4:	e00a      	b.n	8003c0c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf6:	f7fd f863 	bl	8000cc0 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	; 0x64
 8003c04:	d902      	bls.n	8003c0c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	f000 bdcf 	b.w	80047aa <HAL_RCC_OscConfig+0xe02>
 8003c0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c10:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003c20:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c24:	fab3 f383 	clz	r3, r3
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d102      	bne.n	8003c3e <HAL_RCC_OscConfig+0x296>
 8003c38:	4b19      	ldr	r3, [pc, #100]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	e015      	b.n	8003c6a <HAL_RCC_OscConfig+0x2c2>
 8003c3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c42:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003c4a:	fa93 f3a3 	rbit	r3, r3
 8003c4e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003c52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c56:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003c5a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003c66:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <HAL_RCC_OscConfig+0x2f8>)
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c6e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003c72:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003c76:	fa92 f2a2 	rbit	r2, r2
 8003c7a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003c7e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003c82:	fab2 f282 	clz	r2, r2
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	f042 0220 	orr.w	r2, r2, #32
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	f002 021f 	and.w	r2, r2, #31
 8003c92:	2101      	movs	r1, #1
 8003c94:	fa01 f202 	lsl.w	r2, r1, r2
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1ab      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x24e>
 8003c9e:	e002      	b.n	8003ca6 <HAL_RCC_OscConfig+0x2fe>
 8003ca0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca6:	1d3b      	adds	r3, r7, #4
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 816f 	beq.w	8003f94 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003cb6:	4bd0      	ldr	r3, [pc, #832]	; (8003ff8 <HAL_RCC_OscConfig+0x650>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003cc2:	4bcd      	ldr	r3, [pc, #820]	; (8003ff8 <HAL_RCC_OscConfig+0x650>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d16c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x400>
 8003cce:	4bca      	ldr	r3, [pc, #808]	; (8003ff8 <HAL_RCC_OscConfig+0x650>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d166      	bne.n	8003da8 <HAL_RCC_OscConfig+0x400>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003ce4:	fa93 f3a3 	rbit	r3, r3
 8003ce8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003cec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf0:	fab3 f383 	clz	r3, r3
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d102      	bne.n	8003d0a <HAL_RCC_OscConfig+0x362>
 8003d04:	4bbc      	ldr	r3, [pc, #752]	; (8003ff8 <HAL_RCC_OscConfig+0x650>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	e013      	b.n	8003d32 <HAL_RCC_OscConfig+0x38a>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d10:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003d14:	fa93 f3a3 	rbit	r3, r3
 8003d18:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003d22:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003d2e:	4bb2      	ldr	r3, [pc, #712]	; (8003ff8 <HAL_RCC_OscConfig+0x650>)
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	2202      	movs	r2, #2
 8003d34:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003d38:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003d3c:	fa92 f2a2 	rbit	r2, r2
 8003d40:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003d44:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003d48:	fab2 f282 	clz	r2, r2
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	f042 0220 	orr.w	r2, r2, #32
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	f002 021f 	and.w	r2, r2, #31
 8003d58:	2101      	movs	r1, #1
 8003d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d007      	beq.n	8003d74 <HAL_RCC_OscConfig+0x3cc>
 8003d64:	1d3b      	adds	r3, r7, #4
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d002      	beq.n	8003d74 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	f000 bd1b 	b.w	80047aa <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d74:	4ba0      	ldr	r3, [pc, #640]	; (8003ff8 <HAL_RCC_OscConfig+0x650>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d7c:	1d3b      	adds	r3, r7, #4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	21f8      	movs	r1, #248	; 0xf8
 8003d84:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d88:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003d8c:	fa91 f1a1 	rbit	r1, r1
 8003d90:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003d94:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003d98:	fab1 f181 	clz	r1, r1
 8003d9c:	b2c9      	uxtb	r1, r1
 8003d9e:	408b      	lsls	r3, r1
 8003da0:	4995      	ldr	r1, [pc, #596]	; (8003ff8 <HAL_RCC_OscConfig+0x650>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da6:	e0f5      	b.n	8003f94 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003da8:	1d3b      	adds	r3, r7, #4
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8085 	beq.w	8003ebe <HAL_RCC_OscConfig+0x516>
 8003db4:	2301      	movs	r3, #1
 8003db6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003dc6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dca:	fab3 f383 	clz	r3, r3
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2301      	movs	r3, #1
 8003dde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fc ff6e 	bl	8000cc0 <HAL_GetTick>
 8003de4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de8:	e00a      	b.n	8003e00 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dea:	f7fc ff69 	bl	8000cc0 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d902      	bls.n	8003e00 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	f000 bcd5 	b.w	80047aa <HAL_RCC_OscConfig+0xe02>
 8003e00:	2302      	movs	r3, #2
 8003e02:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003e0a:	fa93 f3a3 	rbit	r3, r3
 8003e0e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003e12:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d102      	bne.n	8003e30 <HAL_RCC_OscConfig+0x488>
 8003e2a:	4b73      	ldr	r3, [pc, #460]	; (8003ff8 <HAL_RCC_OscConfig+0x650>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	e013      	b.n	8003e58 <HAL_RCC_OscConfig+0x4b0>
 8003e30:	2302      	movs	r3, #2
 8003e32:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003e42:	2302      	movs	r3, #2
 8003e44:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003e48:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003e4c:	fa93 f3a3 	rbit	r3, r3
 8003e50:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003e54:	4b68      	ldr	r3, [pc, #416]	; (8003ff8 <HAL_RCC_OscConfig+0x650>)
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	2202      	movs	r2, #2
 8003e5a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003e5e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003e62:	fa92 f2a2 	rbit	r2, r2
 8003e66:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003e6a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003e6e:	fab2 f282 	clz	r2, r2
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	f042 0220 	orr.w	r2, r2, #32
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	f002 021f 	and.w	r2, r2, #31
 8003e7e:	2101      	movs	r1, #1
 8003e80:	fa01 f202 	lsl.w	r2, r1, r2
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0af      	beq.n	8003dea <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8a:	4b5b      	ldr	r3, [pc, #364]	; (8003ff8 <HAL_RCC_OscConfig+0x650>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e92:	1d3b      	adds	r3, r7, #4
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	21f8      	movs	r1, #248	; 0xf8
 8003e9a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003ea2:	fa91 f1a1 	rbit	r1, r1
 8003ea6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003eaa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003eae:	fab1 f181 	clz	r1, r1
 8003eb2:	b2c9      	uxtb	r1, r1
 8003eb4:	408b      	lsls	r3, r1
 8003eb6:	4950      	ldr	r1, [pc, #320]	; (8003ff8 <HAL_RCC_OscConfig+0x650>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]
 8003ebc:	e06a      	b.n	8003f94 <HAL_RCC_OscConfig+0x5ec>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ec8:	fa93 f3a3 	rbit	r3, r3
 8003ecc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003ed0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ed4:	fab3 f383 	clz	r3, r3
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ede:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eea:	f7fc fee9 	bl	8000cc0 <HAL_GetTick>
 8003eee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ef4:	f7fc fee4 	bl	8000cc0 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d902      	bls.n	8003f0a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	f000 bc50 	b.w	80047aa <HAL_RCC_OscConfig+0xe02>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f10:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003f14:	fa93 f3a3 	rbit	r3, r3
 8003f18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f20:	fab3 f383 	clz	r3, r3
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d102      	bne.n	8003f3a <HAL_RCC_OscConfig+0x592>
 8003f34:	4b30      	ldr	r3, [pc, #192]	; (8003ff8 <HAL_RCC_OscConfig+0x650>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	e013      	b.n	8003f62 <HAL_RCC_OscConfig+0x5ba>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f44:	fa93 f3a3 	rbit	r3, r3
 8003f48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003f52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003f56:	fa93 f3a3 	rbit	r3, r3
 8003f5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003f5e:	4b26      	ldr	r3, [pc, #152]	; (8003ff8 <HAL_RCC_OscConfig+0x650>)
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	2202      	movs	r2, #2
 8003f64:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003f68:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003f6c:	fa92 f2a2 	rbit	r2, r2
 8003f70:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003f74:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003f78:	fab2 f282 	clz	r2, r2
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	f042 0220 	orr.w	r2, r2, #32
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	f002 021f 	and.w	r2, r2, #31
 8003f88:	2101      	movs	r1, #1
 8003f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1af      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f94:	1d3b      	adds	r3, r7, #4
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80da 	beq.w	8004158 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fa4:	1d3b      	adds	r3, r7, #4
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d069      	beq.n	8004082 <HAL_RCC_OscConfig+0x6da>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003fb8:	fa93 f3a3 	rbit	r3, r3
 8003fbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc4:	fab3 f383 	clz	r3, r3
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <HAL_RCC_OscConfig+0x654>)
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd8:	f7fc fe72 	bl	8000cc0 <HAL_GetTick>
 8003fdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe0:	e00e      	b.n	8004000 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe2:	f7fc fe6d 	bl	8000cc0 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d906      	bls.n	8004000 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e3d9      	b.n	80047aa <HAL_RCC_OscConfig+0xe02>
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	10908120 	.word	0x10908120
 8004000:	2302      	movs	r3, #2
 8004002:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004006:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004012:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004016:	2202      	movs	r2, #2
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	fa93 f2a3 	rbit	r2, r3
 8004024:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800402e:	2202      	movs	r2, #2
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	fa93 f2a3 	rbit	r2, r3
 800403c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004040:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004042:	4ba5      	ldr	r3, [pc, #660]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 8004044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004046:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800404a:	2102      	movs	r1, #2
 800404c:	6019      	str	r1, [r3, #0]
 800404e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	fa93 f1a3 	rbit	r1, r3
 8004058:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800405c:	6019      	str	r1, [r3, #0]
  return result;
 800405e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	fab3 f383 	clz	r3, r3
 8004068:	b2db      	uxtb	r3, r3
 800406a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800406e:	b2db      	uxtb	r3, r3
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2101      	movs	r1, #1
 8004076:	fa01 f303 	lsl.w	r3, r1, r3
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0b0      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x63a>
 8004080:	e06a      	b.n	8004158 <HAL_RCC_OscConfig+0x7b0>
 8004082:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004086:	2201      	movs	r2, #1
 8004088:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	fa93 f2a3 	rbit	r2, r3
 8004094:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004098:	601a      	str	r2, [r3, #0]
  return result;
 800409a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800409e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a0:	fab3 f383 	clz	r3, r3
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	461a      	mov	r2, r3
 80040a8:	4b8c      	ldr	r3, [pc, #560]	; (80042dc <HAL_RCC_OscConfig+0x934>)
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	461a      	mov	r2, r3
 80040b0:	2300      	movs	r3, #0
 80040b2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b4:	f7fc fe04 	bl	8000cc0 <HAL_GetTick>
 80040b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040bc:	e009      	b.n	80040d2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040be:	f7fc fdff 	bl	8000cc0 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e36b      	b.n	80047aa <HAL_RCC_OscConfig+0xe02>
 80040d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80040d6:	2202      	movs	r2, #2
 80040d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	fa93 f2a3 	rbit	r2, r3
 80040e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80040ee:	2202      	movs	r2, #2
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	fa93 f2a3 	rbit	r2, r3
 80040fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004106:	2202      	movs	r2, #2
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	fa93 f2a3 	rbit	r2, r3
 8004114:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004118:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800411a:	4b6f      	ldr	r3, [pc, #444]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 800411c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800411e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004122:	2102      	movs	r1, #2
 8004124:	6019      	str	r1, [r3, #0]
 8004126:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	fa93 f1a3 	rbit	r1, r3
 8004130:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004134:	6019      	str	r1, [r3, #0]
  return result;
 8004136:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	fab3 f383 	clz	r3, r3
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	2101      	movs	r1, #1
 800414e:	fa01 f303 	lsl.w	r3, r1, r3
 8004152:	4013      	ands	r3, r2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1b2      	bne.n	80040be <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004158:	1d3b      	adds	r3, r7, #4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8158 	beq.w	8004418 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004168:	2300      	movs	r3, #0
 800416a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416e:	4b5a      	ldr	r3, [pc, #360]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d112      	bne.n	80041a0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	4b57      	ldr	r3, [pc, #348]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	4a56      	ldr	r2, [pc, #344]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 8004180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004184:	61d3      	str	r3, [r2, #28]
 8004186:	4b54      	ldr	r3, [pc, #336]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800418e:	f107 0308 	add.w	r3, r7, #8
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	f107 0308 	add.w	r3, r7, #8
 8004198:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800419a:	2301      	movs	r3, #1
 800419c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a0:	4b4f      	ldr	r3, [pc, #316]	; (80042e0 <HAL_RCC_OscConfig+0x938>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d11a      	bne.n	80041e2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ac:	4b4c      	ldr	r3, [pc, #304]	; (80042e0 <HAL_RCC_OscConfig+0x938>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a4b      	ldr	r2, [pc, #300]	; (80042e0 <HAL_RCC_OscConfig+0x938>)
 80041b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b8:	f7fc fd82 	bl	8000cc0 <HAL_GetTick>
 80041bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c0:	e009      	b.n	80041d6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c2:	f7fc fd7d 	bl	8000cc0 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	; 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e2e9      	b.n	80047aa <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d6:	4b42      	ldr	r3, [pc, #264]	; (80042e0 <HAL_RCC_OscConfig+0x938>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0ef      	beq.n	80041c2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e2:	1d3b      	adds	r3, r7, #4
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d106      	bne.n	80041fa <HAL_RCC_OscConfig+0x852>
 80041ec:	4b3a      	ldr	r3, [pc, #232]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	4a39      	ldr	r2, [pc, #228]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	6213      	str	r3, [r2, #32]
 80041f8:	e02f      	b.n	800425a <HAL_RCC_OscConfig+0x8b2>
 80041fa:	1d3b      	adds	r3, r7, #4
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10c      	bne.n	800421e <HAL_RCC_OscConfig+0x876>
 8004204:	4b34      	ldr	r3, [pc, #208]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	4a33      	ldr	r2, [pc, #204]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 800420a:	f023 0301 	bic.w	r3, r3, #1
 800420e:	6213      	str	r3, [r2, #32]
 8004210:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	4a30      	ldr	r2, [pc, #192]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 8004216:	f023 0304 	bic.w	r3, r3, #4
 800421a:	6213      	str	r3, [r2, #32]
 800421c:	e01d      	b.n	800425a <HAL_RCC_OscConfig+0x8b2>
 800421e:	1d3b      	adds	r3, r7, #4
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	2b05      	cmp	r3, #5
 8004226:	d10c      	bne.n	8004242 <HAL_RCC_OscConfig+0x89a>
 8004228:	4b2b      	ldr	r3, [pc, #172]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	4a2a      	ldr	r2, [pc, #168]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 800422e:	f043 0304 	orr.w	r3, r3, #4
 8004232:	6213      	str	r3, [r2, #32]
 8004234:	4b28      	ldr	r3, [pc, #160]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	4a27      	ldr	r2, [pc, #156]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	6213      	str	r3, [r2, #32]
 8004240:	e00b      	b.n	800425a <HAL_RCC_OscConfig+0x8b2>
 8004242:	4b25      	ldr	r3, [pc, #148]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	4a24      	ldr	r2, [pc, #144]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	6213      	str	r3, [r2, #32]
 800424e:	4b22      	ldr	r3, [pc, #136]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	4a21      	ldr	r2, [pc, #132]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 8004254:	f023 0304 	bic.w	r3, r3, #4
 8004258:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800425a:	1d3b      	adds	r3, r7, #4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d06b      	beq.n	800433c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004264:	f7fc fd2c 	bl	8000cc0 <HAL_GetTick>
 8004268:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426c:	e00b      	b.n	8004286 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426e:	f7fc fd27 	bl	8000cc0 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f241 3288 	movw	r2, #5000	; 0x1388
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e291      	b.n	80047aa <HAL_RCC_OscConfig+0xe02>
 8004286:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800428a:	2202      	movs	r2, #2
 800428c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	fa93 f2a3 	rbit	r2, r3
 8004298:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80042a2:	2202      	movs	r2, #2
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	fa93 f2a3 	rbit	r2, r3
 80042b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80042b4:	601a      	str	r2, [r3, #0]
  return result;
 80042b6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80042ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042bc:	fab3 f383 	clz	r3, r3
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	f043 0302 	orr.w	r3, r3, #2
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d109      	bne.n	80042e4 <HAL_RCC_OscConfig+0x93c>
 80042d0:	4b01      	ldr	r3, [pc, #4]	; (80042d8 <HAL_RCC_OscConfig+0x930>)
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	e014      	b.n	8004300 <HAL_RCC_OscConfig+0x958>
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	10908120 	.word	0x10908120
 80042e0:	40007000 	.word	0x40007000
 80042e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80042e8:	2202      	movs	r2, #2
 80042ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	fa93 f2a3 	rbit	r2, r3
 80042f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	4bbb      	ldr	r3, [pc, #748]	; (80045ec <HAL_RCC_OscConfig+0xc44>)
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004304:	2102      	movs	r1, #2
 8004306:	6011      	str	r1, [r2, #0]
 8004308:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	fa92 f1a2 	rbit	r1, r2
 8004312:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004316:	6011      	str	r1, [r2, #0]
  return result;
 8004318:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	fab2 f282 	clz	r2, r2
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	f002 021f 	and.w	r2, r2, #31
 800432e:	2101      	movs	r1, #1
 8004330:	fa01 f202 	lsl.w	r2, r1, r2
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d099      	beq.n	800426e <HAL_RCC_OscConfig+0x8c6>
 800433a:	e063      	b.n	8004404 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433c:	f7fc fcc0 	bl	8000cc0 <HAL_GetTick>
 8004340:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004344:	e00b      	b.n	800435e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004346:	f7fc fcbb 	bl	8000cc0 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	; 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e225      	b.n	80047aa <HAL_RCC_OscConfig+0xe02>
 800435e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004362:	2202      	movs	r2, #2
 8004364:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	fa93 f2a3 	rbit	r2, r3
 8004370:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800437a:	2202      	movs	r2, #2
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	fa93 f2a3 	rbit	r2, r3
 8004388:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800438c:	601a      	str	r2, [r3, #0]
  return result;
 800438e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004392:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004394:	fab3 f383 	clz	r3, r3
 8004398:	b2db      	uxtb	r3, r3
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	b2db      	uxtb	r3, r3
 800439e:	f043 0302 	orr.w	r3, r3, #2
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d102      	bne.n	80043ae <HAL_RCC_OscConfig+0xa06>
 80043a8:	4b90      	ldr	r3, [pc, #576]	; (80045ec <HAL_RCC_OscConfig+0xc44>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	e00d      	b.n	80043ca <HAL_RCC_OscConfig+0xa22>
 80043ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80043b2:	2202      	movs	r2, #2
 80043b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	fa93 f2a3 	rbit	r2, r3
 80043c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	4b89      	ldr	r3, [pc, #548]	; (80045ec <HAL_RCC_OscConfig+0xc44>)
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80043ce:	2102      	movs	r1, #2
 80043d0:	6011      	str	r1, [r2, #0]
 80043d2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	fa92 f1a2 	rbit	r1, r2
 80043dc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80043e0:	6011      	str	r1, [r2, #0]
  return result;
 80043e2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80043e6:	6812      	ldr	r2, [r2, #0]
 80043e8:	fab2 f282 	clz	r2, r2
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	f002 021f 	and.w	r2, r2, #31
 80043f8:	2101      	movs	r1, #1
 80043fa:	fa01 f202 	lsl.w	r2, r1, r2
 80043fe:	4013      	ands	r3, r2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1a0      	bne.n	8004346 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004404:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004408:	2b01      	cmp	r3, #1
 800440a:	d105      	bne.n	8004418 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440c:	4b77      	ldr	r3, [pc, #476]	; (80045ec <HAL_RCC_OscConfig+0xc44>)
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	4a76      	ldr	r2, [pc, #472]	; (80045ec <HAL_RCC_OscConfig+0xc44>)
 8004412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004416:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004418:	1d3b      	adds	r3, r7, #4
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 81c2 	beq.w	80047a8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004424:	4b71      	ldr	r3, [pc, #452]	; (80045ec <HAL_RCC_OscConfig+0xc44>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f003 030c 	and.w	r3, r3, #12
 800442c:	2b08      	cmp	r3, #8
 800442e:	f000 819c 	beq.w	800476a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004432:	1d3b      	adds	r3, r7, #4
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	2b02      	cmp	r3, #2
 800443a:	f040 8114 	bne.w	8004666 <HAL_RCC_OscConfig+0xcbe>
 800443e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004442:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004448:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	fa93 f2a3 	rbit	r2, r3
 8004452:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004456:	601a      	str	r2, [r3, #0]
  return result;
 8004458:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800445c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445e:	fab3 f383 	clz	r3, r3
 8004462:	b2db      	uxtb	r3, r3
 8004464:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004468:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	461a      	mov	r2, r3
 8004470:	2300      	movs	r3, #0
 8004472:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004474:	f7fc fc24 	bl	8000cc0 <HAL_GetTick>
 8004478:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800447c:	e009      	b.n	8004492 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447e:	f7fc fc1f 	bl	8000cc0 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e18b      	b.n	80047aa <HAL_RCC_OscConfig+0xe02>
 8004492:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004496:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800449a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	fa93 f2a3 	rbit	r2, r3
 80044a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80044aa:	601a      	str	r2, [r3, #0]
  return result;
 80044ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80044b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044b2:	fab3 f383 	clz	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d102      	bne.n	80044cc <HAL_RCC_OscConfig+0xb24>
 80044c6:	4b49      	ldr	r3, [pc, #292]	; (80045ec <HAL_RCC_OscConfig+0xc44>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	e01b      	b.n	8004504 <HAL_RCC_OscConfig+0xb5c>
 80044cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80044d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	fa93 f2a3 	rbit	r2, r3
 80044e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80044ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	fa93 f2a3 	rbit	r2, r3
 80044fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	4b3a      	ldr	r3, [pc, #232]	; (80045ec <HAL_RCC_OscConfig+0xc44>)
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004508:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800450c:	6011      	str	r1, [r2, #0]
 800450e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	fa92 f1a2 	rbit	r1, r2
 8004518:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800451c:	6011      	str	r1, [r2, #0]
  return result;
 800451e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	fab2 f282 	clz	r2, r2
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	f042 0220 	orr.w	r2, r2, #32
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	f002 021f 	and.w	r2, r2, #31
 8004534:	2101      	movs	r1, #1
 8004536:	fa01 f202 	lsl.w	r2, r1, r2
 800453a:	4013      	ands	r3, r2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d19e      	bne.n	800447e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004540:	4b2a      	ldr	r3, [pc, #168]	; (80045ec <HAL_RCC_OscConfig+0xc44>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004548:	1d3b      	adds	r3, r7, #4
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800454e:	1d3b      	adds	r3, r7, #4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	430b      	orrs	r3, r1
 8004556:	4925      	ldr	r1, [pc, #148]	; (80045ec <HAL_RCC_OscConfig+0xc44>)
 8004558:	4313      	orrs	r3, r2
 800455a:	604b      	str	r3, [r1, #4]
 800455c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004560:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004566:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	fa93 f2a3 	rbit	r2, r3
 8004570:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004574:	601a      	str	r2, [r3, #0]
  return result;
 8004576:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800457a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800457c:	fab3 f383 	clz	r3, r3
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004586:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	461a      	mov	r2, r3
 800458e:	2301      	movs	r3, #1
 8004590:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004592:	f7fc fb95 	bl	8000cc0 <HAL_GetTick>
 8004596:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800459a:	e009      	b.n	80045b0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459c:	f7fc fb90 	bl	8000cc0 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e0fc      	b.n	80047aa <HAL_RCC_OscConfig+0xe02>
 80045b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80045b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	fa93 f2a3 	rbit	r2, r3
 80045c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80045c8:	601a      	str	r2, [r3, #0]
  return result;
 80045ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80045ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045d0:	fab3 f383 	clz	r3, r3
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d105      	bne.n	80045f0 <HAL_RCC_OscConfig+0xc48>
 80045e4:	4b01      	ldr	r3, [pc, #4]	; (80045ec <HAL_RCC_OscConfig+0xc44>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	e01e      	b.n	8004628 <HAL_RCC_OscConfig+0xc80>
 80045ea:	bf00      	nop
 80045ec:	40021000 	.word	0x40021000
 80045f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	fa93 f2a3 	rbit	r2, r3
 8004604:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800460e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	fa93 f2a3 	rbit	r2, r3
 800461e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	4b63      	ldr	r3, [pc, #396]	; (80047b4 <HAL_RCC_OscConfig+0xe0c>)
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800462c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004630:	6011      	str	r1, [r2, #0]
 8004632:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	fa92 f1a2 	rbit	r1, r2
 800463c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004640:	6011      	str	r1, [r2, #0]
  return result;
 8004642:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	fab2 f282 	clz	r2, r2
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	f042 0220 	orr.w	r2, r2, #32
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	f002 021f 	and.w	r2, r2, #31
 8004658:	2101      	movs	r1, #1
 800465a:	fa01 f202 	lsl.w	r2, r1, r2
 800465e:	4013      	ands	r3, r2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d09b      	beq.n	800459c <HAL_RCC_OscConfig+0xbf4>
 8004664:	e0a0      	b.n	80047a8 <HAL_RCC_OscConfig+0xe00>
 8004666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800466a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800466e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004670:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	fa93 f2a3 	rbit	r2, r3
 800467a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800467e:	601a      	str	r2, [r3, #0]
  return result;
 8004680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004684:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004686:	fab3 f383 	clz	r3, r3
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004690:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	461a      	mov	r2, r3
 8004698:	2300      	movs	r3, #0
 800469a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469c:	f7fc fb10 	bl	8000cc0 <HAL_GetTick>
 80046a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a4:	e009      	b.n	80046ba <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a6:	f7fc fb0b 	bl	8000cc0 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e077      	b.n	80047aa <HAL_RCC_OscConfig+0xe02>
 80046ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	fa93 f2a3 	rbit	r2, r3
 80046ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d2:	601a      	str	r2, [r3, #0]
  return result;
 80046d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046da:	fab3 f383 	clz	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d102      	bne.n	80046f4 <HAL_RCC_OscConfig+0xd4c>
 80046ee:	4b31      	ldr	r3, [pc, #196]	; (80047b4 <HAL_RCC_OscConfig+0xe0c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	e01b      	b.n	800472c <HAL_RCC_OscConfig+0xd84>
 80046f4:	f107 0320 	add.w	r3, r7, #32
 80046f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fe:	f107 0320 	add.w	r3, r7, #32
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	fa93 f2a3 	rbit	r2, r3
 8004708:	f107 031c 	add.w	r3, r7, #28
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	f107 0318 	add.w	r3, r7, #24
 8004712:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	f107 0318 	add.w	r3, r7, #24
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	fa93 f2a3 	rbit	r2, r3
 8004722:	f107 0314 	add.w	r3, r7, #20
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	4b22      	ldr	r3, [pc, #136]	; (80047b4 <HAL_RCC_OscConfig+0xe0c>)
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	f107 0210 	add.w	r2, r7, #16
 8004730:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004734:	6011      	str	r1, [r2, #0]
 8004736:	f107 0210 	add.w	r2, r7, #16
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	fa92 f1a2 	rbit	r1, r2
 8004740:	f107 020c 	add.w	r2, r7, #12
 8004744:	6011      	str	r1, [r2, #0]
  return result;
 8004746:	f107 020c 	add.w	r2, r7, #12
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	fab2 f282 	clz	r2, r2
 8004750:	b2d2      	uxtb	r2, r2
 8004752:	f042 0220 	orr.w	r2, r2, #32
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	f002 021f 	and.w	r2, r2, #31
 800475c:	2101      	movs	r1, #1
 800475e:	fa01 f202 	lsl.w	r2, r1, r2
 8004762:	4013      	ands	r3, r2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d19e      	bne.n	80046a6 <HAL_RCC_OscConfig+0xcfe>
 8004768:	e01e      	b.n	80047a8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800476a:	1d3b      	adds	r3, r7, #4
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e018      	b.n	80047aa <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004778:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <HAL_RCC_OscConfig+0xe0c>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004780:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004784:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004788:	1d3b      	adds	r3, r7, #4
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	429a      	cmp	r2, r3
 8004790:	d108      	bne.n	80047a4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004792:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004796:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800479a:	1d3b      	adds	r3, r7, #4
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40021000 	.word	0x40021000

080047b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b09e      	sub	sp, #120	; 0x78
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e162      	b.n	8004a96 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047d0:	4b90      	ldr	r3, [pc, #576]	; (8004a14 <HAL_RCC_ClockConfig+0x25c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d910      	bls.n	8004800 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b8d      	ldr	r3, [pc, #564]	; (8004a14 <HAL_RCC_ClockConfig+0x25c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 0207 	bic.w	r2, r3, #7
 80047e6:	498b      	ldr	r1, [pc, #556]	; (8004a14 <HAL_RCC_ClockConfig+0x25c>)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ee:	4b89      	ldr	r3, [pc, #548]	; (8004a14 <HAL_RCC_ClockConfig+0x25c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e14a      	b.n	8004a96 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800480c:	4b82      	ldr	r3, [pc, #520]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	497f      	ldr	r1, [pc, #508]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 800481a:	4313      	orrs	r3, r2
 800481c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80dc 	beq.w	80049e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d13c      	bne.n	80048ae <HAL_RCC_ClockConfig+0xf6>
 8004834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004838:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800483c:	fa93 f3a3 	rbit	r3, r3
 8004840:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004844:	fab3 f383 	clz	r3, r3
 8004848:	b2db      	uxtb	r3, r3
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	d102      	bne.n	800485e <HAL_RCC_ClockConfig+0xa6>
 8004858:	4b6f      	ldr	r3, [pc, #444]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	e00f      	b.n	800487e <HAL_RCC_ClockConfig+0xc6>
 800485e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004862:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004864:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004866:	fa93 f3a3 	rbit	r3, r3
 800486a:	667b      	str	r3, [r7, #100]	; 0x64
 800486c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004870:	663b      	str	r3, [r7, #96]	; 0x60
 8004872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004874:	fa93 f3a3 	rbit	r3, r3
 8004878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800487a:	4b67      	ldr	r3, [pc, #412]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004882:	65ba      	str	r2, [r7, #88]	; 0x58
 8004884:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004886:	fa92 f2a2 	rbit	r2, r2
 800488a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800488c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800488e:	fab2 f282 	clz	r2, r2
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	f042 0220 	orr.w	r2, r2, #32
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	f002 021f 	and.w	r2, r2, #31
 800489e:	2101      	movs	r1, #1
 80048a0:	fa01 f202 	lsl.w	r2, r1, r2
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d17b      	bne.n	80049a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e0f3      	b.n	8004a96 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d13c      	bne.n	8004930 <HAL_RCC_ClockConfig+0x178>
 80048b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048be:	fa93 f3a3 	rbit	r3, r3
 80048c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80048c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c6:	fab3 f383 	clz	r3, r3
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	095b      	lsrs	r3, r3, #5
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d102      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x128>
 80048da:	4b4f      	ldr	r3, [pc, #316]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	e00f      	b.n	8004900 <HAL_RCC_ClockConfig+0x148>
 80048e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e8:	fa93 f3a3 	rbit	r3, r3
 80048ec:	647b      	str	r3, [r7, #68]	; 0x44
 80048ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048f2:	643b      	str	r3, [r7, #64]	; 0x40
 80048f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f6:	fa93 f3a3 	rbit	r3, r3
 80048fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048fc:	4b46      	ldr	r3, [pc, #280]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004904:	63ba      	str	r2, [r7, #56]	; 0x38
 8004906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004908:	fa92 f2a2 	rbit	r2, r2
 800490c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800490e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004910:	fab2 f282 	clz	r2, r2
 8004914:	b2d2      	uxtb	r2, r2
 8004916:	f042 0220 	orr.w	r2, r2, #32
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	f002 021f 	and.w	r2, r2, #31
 8004920:	2101      	movs	r1, #1
 8004922:	fa01 f202 	lsl.w	r2, r1, r2
 8004926:	4013      	ands	r3, r2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d13a      	bne.n	80049a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0b2      	b.n	8004a96 <HAL_RCC_ClockConfig+0x2de>
 8004930:	2302      	movs	r3, #2
 8004932:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	fa93 f3a3 	rbit	r3, r3
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800493c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493e:	fab3 f383 	clz	r3, r3
 8004942:	b2db      	uxtb	r3, r3
 8004944:	095b      	lsrs	r3, r3, #5
 8004946:	b2db      	uxtb	r3, r3
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b01      	cmp	r3, #1
 8004950:	d102      	bne.n	8004958 <HAL_RCC_ClockConfig+0x1a0>
 8004952:	4b31      	ldr	r3, [pc, #196]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	e00d      	b.n	8004974 <HAL_RCC_ClockConfig+0x1bc>
 8004958:	2302      	movs	r3, #2
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	fa93 f3a3 	rbit	r3, r3
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
 8004964:	2302      	movs	r3, #2
 8004966:	623b      	str	r3, [r7, #32]
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	fa93 f3a3 	rbit	r3, r3
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	2202      	movs	r2, #2
 8004976:	61ba      	str	r2, [r7, #24]
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	fa92 f2a2 	rbit	r2, r2
 800497e:	617a      	str	r2, [r7, #20]
  return result;
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	fab2 f282 	clz	r2, r2
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	f042 0220 	orr.w	r2, r2, #32
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	f002 021f 	and.w	r2, r2, #31
 8004992:	2101      	movs	r1, #1
 8004994:	fa01 f202 	lsl.w	r2, r1, r2
 8004998:	4013      	ands	r3, r2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e079      	b.n	8004a96 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049a2:	4b1d      	ldr	r3, [pc, #116]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f023 0203 	bic.w	r2, r3, #3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	491a      	ldr	r1, [pc, #104]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049b4:	f7fc f984 	bl	8000cc0 <HAL_GetTick>
 80049b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ba:	e00a      	b.n	80049d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049bc:	f7fc f980 	bl	8000cc0 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e061      	b.n	8004a96 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d2:	4b11      	ldr	r3, [pc, #68]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f003 020c 	and.w	r2, r3, #12
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d1eb      	bne.n	80049bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <HAL_RCC_ClockConfig+0x25c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d214      	bcs.n	8004a1c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f2:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <HAL_RCC_ClockConfig+0x25c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 0207 	bic.w	r2, r3, #7
 80049fa:	4906      	ldr	r1, [pc, #24]	; (8004a14 <HAL_RCC_ClockConfig+0x25c>)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a02:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <HAL_RCC_ClockConfig+0x25c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e040      	b.n	8004a96 <HAL_RCC_ClockConfig+0x2de>
 8004a14:	40022000 	.word	0x40022000
 8004a18:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a28:	4b1d      	ldr	r3, [pc, #116]	; (8004aa0 <HAL_RCC_ClockConfig+0x2e8>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	491a      	ldr	r1, [pc, #104]	; (8004aa0 <HAL_RCC_ClockConfig+0x2e8>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a46:	4b16      	ldr	r3, [pc, #88]	; (8004aa0 <HAL_RCC_ClockConfig+0x2e8>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	4912      	ldr	r1, [pc, #72]	; (8004aa0 <HAL_RCC_ClockConfig+0x2e8>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a5a:	f000 f829 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 8004a5e:	4601      	mov	r1, r0
 8004a60:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <HAL_RCC_ClockConfig+0x2e8>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a68:	22f0      	movs	r2, #240	; 0xf0
 8004a6a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	fa92 f2a2 	rbit	r2, r2
 8004a72:	60fa      	str	r2, [r7, #12]
  return result;
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	fab2 f282 	clz	r2, r2
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	40d3      	lsrs	r3, r2
 8004a7e:	4a09      	ldr	r2, [pc, #36]	; (8004aa4 <HAL_RCC_ClockConfig+0x2ec>)
 8004a80:	5cd3      	ldrb	r3, [r2, r3]
 8004a82:	fa21 f303 	lsr.w	r3, r1, r3
 8004a86:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <HAL_RCC_ClockConfig+0x2f0>)
 8004a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004a8a:	4b08      	ldr	r3, [pc, #32]	; (8004aac <HAL_RCC_ClockConfig+0x2f4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fc f8d2 	bl	8000c38 <HAL_InitTick>
  
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3778      	adds	r7, #120	; 0x78
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	08005dac 	.word	0x08005dac
 8004aa8:	20000004 	.word	0x20000004
 8004aac:	20000008 	.word	0x20000008

08004ab0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b08b      	sub	sp, #44	; 0x2c
 8004ab4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	2300      	movs	r3, #0
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004aca:	4b29      	ldr	r3, [pc, #164]	; (8004b70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d002      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x30>
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x36>
 8004ade:	e03c      	b.n	8004b5a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ae0:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ae2:	623b      	str	r3, [r7, #32]
      break;
 8004ae4:	e03c      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004aec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004af0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	fa92 f2a2 	rbit	r2, r2
 8004af8:	607a      	str	r2, [r7, #4]
  return result;
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	fab2 f282 	clz	r2, r2
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	40d3      	lsrs	r3, r2
 8004b04:	4a1c      	ldr	r2, [pc, #112]	; (8004b78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b06:	5cd3      	ldrb	r3, [r2, r3]
 8004b08:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004b0a:	4b19      	ldr	r3, [pc, #100]	; (8004b70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	220f      	movs	r2, #15
 8004b14:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	fa92 f2a2 	rbit	r2, r2
 8004b1c:	60fa      	str	r2, [r7, #12]
  return result;
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	fab2 f282 	clz	r2, r2
 8004b24:	b2d2      	uxtb	r2, r2
 8004b26:	40d3      	lsrs	r3, r2
 8004b28:	4a14      	ldr	r2, [pc, #80]	; (8004b7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b2a:	5cd3      	ldrb	r3, [r2, r3]
 8004b2c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d008      	beq.n	8004b4a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b38:	4a0e      	ldr	r2, [pc, #56]	; (8004b74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
 8004b48:	e004      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	4a0c      	ldr	r2, [pc, #48]	; (8004b80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b4e:	fb02 f303 	mul.w	r3, r2, r3
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	623b      	str	r3, [r7, #32]
      break;
 8004b58:	e002      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b5c:	623b      	str	r3, [r7, #32]
      break;
 8004b5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b60:	6a3b      	ldr	r3, [r7, #32]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	372c      	adds	r7, #44	; 0x2c
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40021000 	.word	0x40021000
 8004b74:	007a1200 	.word	0x007a1200
 8004b78:	08005dc4 	.word	0x08005dc4
 8004b7c:	08005dd4 	.word	0x08005dd4
 8004b80:	003d0900 	.word	0x003d0900

08004b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b88:	4b03      	ldr	r3, [pc, #12]	; (8004b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000004 	.word	0x20000004

08004b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004ba2:	f7ff ffef 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8004ba6:	4601      	mov	r1, r0
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bb0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004bb4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	fa92 f2a2 	rbit	r2, r2
 8004bbc:	603a      	str	r2, [r7, #0]
  return result;
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	fab2 f282 	clz	r2, r2
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	40d3      	lsrs	r3, r2
 8004bc8:	4a04      	ldr	r2, [pc, #16]	; (8004bdc <HAL_RCC_GetPCLK1Freq+0x40>)
 8004bca:	5cd3      	ldrb	r3, [r2, r3]
 8004bcc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	08005dbc 	.word	0x08005dbc

08004be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004be6:	f7ff ffcd 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8004bea:	4601      	mov	r1, r0
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004bf4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004bf8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	fa92 f2a2 	rbit	r2, r2
 8004c00:	603a      	str	r2, [r7, #0]
  return result;
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	fab2 f282 	clz	r2, r2
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	40d3      	lsrs	r3, r2
 8004c0c:	4a04      	ldr	r2, [pc, #16]	; (8004c20 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004c0e:	5cd3      	ldrb	r3, [r2, r3]
 8004c10:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	08005dbc 	.word	0x08005dbc

08004c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b092      	sub	sp, #72	; 0x48
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004c34:	2300      	movs	r3, #0
 8004c36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80d4 	beq.w	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c48:	4b4e      	ldr	r3, [pc, #312]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10e      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c54:	4b4b      	ldr	r3, [pc, #300]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	4a4a      	ldr	r2, [pc, #296]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	61d3      	str	r3, [r2, #28]
 8004c60:	4b48      	ldr	r3, [pc, #288]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c72:	4b45      	ldr	r3, [pc, #276]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d118      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c7e:	4b42      	ldr	r3, [pc, #264]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a41      	ldr	r2, [pc, #260]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c8a:	f7fc f819 	bl	8000cc0 <HAL_GetTick>
 8004c8e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c90:	e008      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c92:	f7fc f815 	bl	8000cc0 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b64      	cmp	r3, #100	; 0x64
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e14b      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca4:	4b38      	ldr	r3, [pc, #224]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cb0:	4b34      	ldr	r3, [pc, #208]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 8084 	beq.w	8004dca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d07c      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cd0:	4b2c      	ldr	r3, [pc, #176]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	fa93 f3a3 	rbit	r3, r3
 8004ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cea:	fab3 f383 	clz	r3, r3
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	4b26      	ldr	r3, [pc, #152]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	fa93 f3a3 	rbit	r3, r3
 8004d0a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d0e:	fab3 f383 	clz	r3, r3
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	4b1d      	ldr	r3, [pc, #116]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2300      	movs	r3, #0
 8004d20:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d22:	4a18      	ldr	r2, [pc, #96]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d26:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d04b      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d32:	f7fb ffc5 	bl	8000cc0 <HAL_GetTick>
 8004d36:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d38:	e00a      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3a:	f7fb ffc1 	bl	8000cc0 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e0f5      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004d50:	2302      	movs	r3, #2
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	fa93 f3a3 	rbit	r3, r3
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	623b      	str	r3, [r7, #32]
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	fa93 f3a3 	rbit	r3, r3
 8004d66:	61fb      	str	r3, [r7, #28]
  return result;
 8004d68:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d6a:	fab3 f383 	clz	r3, r3
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	095b      	lsrs	r3, r3, #5
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	f043 0302 	orr.w	r3, r3, #2
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d108      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004d7e:	4b01      	ldr	r3, [pc, #4]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	e00d      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004d84:	40021000 	.word	0x40021000
 8004d88:	40007000 	.word	0x40007000
 8004d8c:	10908100 	.word	0x10908100
 8004d90:	2302      	movs	r3, #2
 8004d92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	fa93 f3a3 	rbit	r3, r3
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	4b69      	ldr	r3, [pc, #420]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	2202      	movs	r2, #2
 8004da2:	613a      	str	r2, [r7, #16]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	fa92 f2a2 	rbit	r2, r2
 8004daa:	60fa      	str	r2, [r7, #12]
  return result;
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	fab2 f282 	clz	r2, r2
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	f002 021f 	and.w	r2, r2, #31
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0b7      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004dca:	4b5e      	ldr	r3, [pc, #376]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	495b      	ldr	r1, [pc, #364]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ddc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d105      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de4:	4b57      	ldr	r3, [pc, #348]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	4a56      	ldr	r2, [pc, #344]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d008      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dfc:	4b51      	ldr	r3, [pc, #324]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	f023 0203 	bic.w	r2, r3, #3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	494e      	ldr	r1, [pc, #312]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d008      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e1a:	4b4a      	ldr	r3, [pc, #296]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	f023 0210 	bic.w	r2, r3, #16
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	4947      	ldr	r1, [pc, #284]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004e38:	4b42      	ldr	r3, [pc, #264]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e44:	493f      	ldr	r1, [pc, #252]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d008      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e56:	4b3b      	ldr	r3, [pc, #236]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	f023 0220 	bic.w	r2, r3, #32
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	4938      	ldr	r1, [pc, #224]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d008      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e74:	4b33      	ldr	r3, [pc, #204]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	4930      	ldr	r1, [pc, #192]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e92:	4b2c      	ldr	r3, [pc, #176]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	4929      	ldr	r1, [pc, #164]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004eb0:	4b24      	ldr	r3, [pc, #144]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	4921      	ldr	r1, [pc, #132]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d008      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ece:	4b1d      	ldr	r3, [pc, #116]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	491a      	ldr	r1, [pc, #104]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004eec:	4b15      	ldr	r3, [pc, #84]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	4912      	ldr	r1, [pc, #72]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d008      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004f0a:	4b0e      	ldr	r3, [pc, #56]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	490b      	ldr	r1, [pc, #44]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004f28:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	4903      	ldr	r1, [pc, #12]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3748      	adds	r7, #72	; 0x48
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40021000 	.word	0x40021000

08004f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e040      	b.n	8004fdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fb fd20 	bl	80009b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2224      	movs	r2, #36	; 0x24
 8004f74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0201 	bic.w	r2, r2, #1
 8004f84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f92e 	bl	80051e8 <UART_SetConfig>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e022      	b.n	8004fdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fa5a 	bl	8005458 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fae1 	bl	800559c <UART_CheckIdleState>
 8004fda:	4603      	mov	r3, r0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	; 0x28
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	f040 8082 	bne.w	8005102 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <HAL_UART_Transmit+0x26>
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e07a      	b.n	8005104 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_UART_Transmit+0x38>
 8005018:	2302      	movs	r3, #2
 800501a:	e073      	b.n	8005104 <HAL_UART_Transmit+0x120>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2221      	movs	r2, #33	; 0x21
 8005030:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005032:	f7fb fe45 	bl	8000cc0 <HAL_GetTick>
 8005036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	88fa      	ldrh	r2, [r7, #6]
 800503c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005050:	d108      	bne.n	8005064 <HAL_UART_Transmit+0x80>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d104      	bne.n	8005064 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800505a:	2300      	movs	r3, #0
 800505c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	e003      	b.n	800506c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005068:	2300      	movs	r3, #0
 800506a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005074:	e02d      	b.n	80050d2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2200      	movs	r2, #0
 800507e:	2180      	movs	r1, #128	; 0x80
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 fad4 	bl	800562e <UART_WaitOnFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e039      	b.n	8005104 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10b      	bne.n	80050ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	881a      	ldrh	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a2:	b292      	uxth	r2, r2
 80050a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	3302      	adds	r3, #2
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	e008      	b.n	80050c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	781a      	ldrb	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	b292      	uxth	r2, r2
 80050b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	3301      	adds	r3, #1
 80050be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1cb      	bne.n	8005076 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2200      	movs	r2, #0
 80050e6:	2140      	movs	r1, #64	; 0x40
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 faa0 	bl	800562e <UART_WaitOnFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e005      	b.n	8005104 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e000      	b.n	8005104 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005102:	2302      	movs	r3, #2
  }
}
 8005104:	4618      	mov	r0, r3
 8005106:	3720      	adds	r7, #32
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	; 0x28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	4613      	mov	r3, r2
 8005118:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800511e:	2b20      	cmp	r3, #32
 8005120:	d13d      	bne.n	800519e <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <HAL_UART_Receive_DMA+0x22>
 8005128:	88fb      	ldrh	r3, [r7, #6]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e036      	b.n	80051a0 <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005138:	2b01      	cmp	r3, #1
 800513a:	d101      	bne.n	8005140 <HAL_UART_Receive_DMA+0x34>
 800513c:	2302      	movs	r3, #2
 800513e:	e02f      	b.n	80051a0 <HAL_UART_Receive_DMA+0x94>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d018      	beq.n	800518e <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	613b      	str	r3, [r7, #16]
   return(result);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	623b      	str	r3, [r7, #32]
 800517c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517e:	69f9      	ldr	r1, [r7, #28]
 8005180:	6a3a      	ldr	r2, [r7, #32]
 8005182:	e841 2300 	strex	r3, r2, [r1]
 8005186:	61bb      	str	r3, [r7, #24]
   return(result);
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1e6      	bne.n	800515c <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	461a      	mov	r2, r3
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 fb0f 	bl	80057b8 <UART_Start_Receive_DMA>
 800519a:	4603      	mov	r3, r0
 800519c:	e000      	b.n	80051a0 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800519e:	2302      	movs	r3, #2
  }
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3728      	adds	r7, #40	; 0x28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4b8b      	ldr	r3, [pc, #556]	; (8005440 <UART_SetConfig+0x258>)
 8005214:	4013      	ands	r3, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	6979      	ldr	r1, [r7, #20]
 800521c:	430b      	orrs	r3, r1
 800521e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	430a      	orrs	r2, r1
 8005258:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a79      	ldr	r2, [pc, #484]	; (8005444 <UART_SetConfig+0x25c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d121      	bne.n	80052a8 <UART_SetConfig+0xc0>
 8005264:	4b78      	ldr	r3, [pc, #480]	; (8005448 <UART_SetConfig+0x260>)
 8005266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	2b03      	cmp	r3, #3
 800526e:	d817      	bhi.n	80052a0 <UART_SetConfig+0xb8>
 8005270:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <UART_SetConfig+0x90>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	08005289 	.word	0x08005289
 800527c:	08005295 	.word	0x08005295
 8005280:	0800529b 	.word	0x0800529b
 8005284:	0800528f 	.word	0x0800528f
 8005288:	2300      	movs	r3, #0
 800528a:	77fb      	strb	r3, [r7, #31]
 800528c:	e01e      	b.n	80052cc <UART_SetConfig+0xe4>
 800528e:	2302      	movs	r3, #2
 8005290:	77fb      	strb	r3, [r7, #31]
 8005292:	e01b      	b.n	80052cc <UART_SetConfig+0xe4>
 8005294:	2304      	movs	r3, #4
 8005296:	77fb      	strb	r3, [r7, #31]
 8005298:	e018      	b.n	80052cc <UART_SetConfig+0xe4>
 800529a:	2308      	movs	r3, #8
 800529c:	77fb      	strb	r3, [r7, #31]
 800529e:	e015      	b.n	80052cc <UART_SetConfig+0xe4>
 80052a0:	2310      	movs	r3, #16
 80052a2:	77fb      	strb	r3, [r7, #31]
 80052a4:	bf00      	nop
 80052a6:	e011      	b.n	80052cc <UART_SetConfig+0xe4>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a67      	ldr	r2, [pc, #412]	; (800544c <UART_SetConfig+0x264>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d102      	bne.n	80052b8 <UART_SetConfig+0xd0>
 80052b2:	2300      	movs	r3, #0
 80052b4:	77fb      	strb	r3, [r7, #31]
 80052b6:	e009      	b.n	80052cc <UART_SetConfig+0xe4>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a64      	ldr	r2, [pc, #400]	; (8005450 <UART_SetConfig+0x268>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d102      	bne.n	80052c8 <UART_SetConfig+0xe0>
 80052c2:	2300      	movs	r3, #0
 80052c4:	77fb      	strb	r3, [r7, #31]
 80052c6:	e001      	b.n	80052cc <UART_SetConfig+0xe4>
 80052c8:	2310      	movs	r3, #16
 80052ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d4:	d15c      	bne.n	8005390 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 80052d6:	7ffb      	ldrb	r3, [r7, #31]
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d828      	bhi.n	800532e <UART_SetConfig+0x146>
 80052dc:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0xfc>)
 80052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e2:	bf00      	nop
 80052e4:	08005309 	.word	0x08005309
 80052e8:	08005311 	.word	0x08005311
 80052ec:	08005319 	.word	0x08005319
 80052f0:	0800532f 	.word	0x0800532f
 80052f4:	0800531f 	.word	0x0800531f
 80052f8:	0800532f 	.word	0x0800532f
 80052fc:	0800532f 	.word	0x0800532f
 8005300:	0800532f 	.word	0x0800532f
 8005304:	08005327 	.word	0x08005327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005308:	f7ff fc48 	bl	8004b9c <HAL_RCC_GetPCLK1Freq>
 800530c:	61b8      	str	r0, [r7, #24]
        break;
 800530e:	e013      	b.n	8005338 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005310:	f7ff fc66 	bl	8004be0 <HAL_RCC_GetPCLK2Freq>
 8005314:	61b8      	str	r0, [r7, #24]
        break;
 8005316:	e00f      	b.n	8005338 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005318:	4b4e      	ldr	r3, [pc, #312]	; (8005454 <UART_SetConfig+0x26c>)
 800531a:	61bb      	str	r3, [r7, #24]
        break;
 800531c:	e00c      	b.n	8005338 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800531e:	f7ff fbc7 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 8005322:	61b8      	str	r0, [r7, #24]
        break;
 8005324:	e008      	b.n	8005338 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800532a:	61bb      	str	r3, [r7, #24]
        break;
 800532c:	e004      	b.n	8005338 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	77bb      	strb	r3, [r7, #30]
        break;
 8005336:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d074      	beq.n	8005428 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	005a      	lsls	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	085b      	lsrs	r3, r3, #1
 8005348:	441a      	add	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005352:	b29b      	uxth	r3, r3
 8005354:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	2b0f      	cmp	r3, #15
 800535a:	d916      	bls.n	800538a <UART_SetConfig+0x1a2>
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005362:	d212      	bcs.n	800538a <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f023 030f 	bic.w	r3, r3, #15
 800536c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	085b      	lsrs	r3, r3, #1
 8005372:	b29b      	uxth	r3, r3
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	b29a      	uxth	r2, r3
 800537a:	89fb      	ldrh	r3, [r7, #14]
 800537c:	4313      	orrs	r3, r2
 800537e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	89fa      	ldrh	r2, [r7, #14]
 8005386:	60da      	str	r2, [r3, #12]
 8005388:	e04e      	b.n	8005428 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	77bb      	strb	r3, [r7, #30]
 800538e:	e04b      	b.n	8005428 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005390:	7ffb      	ldrb	r3, [r7, #31]
 8005392:	2b08      	cmp	r3, #8
 8005394:	d827      	bhi.n	80053e6 <UART_SetConfig+0x1fe>
 8005396:	a201      	add	r2, pc, #4	; (adr r2, 800539c <UART_SetConfig+0x1b4>)
 8005398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539c:	080053c1 	.word	0x080053c1
 80053a0:	080053c9 	.word	0x080053c9
 80053a4:	080053d1 	.word	0x080053d1
 80053a8:	080053e7 	.word	0x080053e7
 80053ac:	080053d7 	.word	0x080053d7
 80053b0:	080053e7 	.word	0x080053e7
 80053b4:	080053e7 	.word	0x080053e7
 80053b8:	080053e7 	.word	0x080053e7
 80053bc:	080053df 	.word	0x080053df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c0:	f7ff fbec 	bl	8004b9c <HAL_RCC_GetPCLK1Freq>
 80053c4:	61b8      	str	r0, [r7, #24]
        break;
 80053c6:	e013      	b.n	80053f0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053c8:	f7ff fc0a 	bl	8004be0 <HAL_RCC_GetPCLK2Freq>
 80053cc:	61b8      	str	r0, [r7, #24]
        break;
 80053ce:	e00f      	b.n	80053f0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d0:	4b20      	ldr	r3, [pc, #128]	; (8005454 <UART_SetConfig+0x26c>)
 80053d2:	61bb      	str	r3, [r7, #24]
        break;
 80053d4:	e00c      	b.n	80053f0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053d6:	f7ff fb6b 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 80053da:	61b8      	str	r0, [r7, #24]
        break;
 80053dc:	e008      	b.n	80053f0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053e2:	61bb      	str	r3, [r7, #24]
        break;
 80053e4:	e004      	b.n	80053f0 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	77bb      	strb	r3, [r7, #30]
        break;
 80053ee:	bf00      	nop
    }

    if (pclk != 0U)
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d018      	beq.n	8005428 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	085a      	lsrs	r2, r3, #1
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	441a      	add	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	fbb2 f3f3 	udiv	r3, r2, r3
 8005408:	b29b      	uxth	r3, r3
 800540a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	2b0f      	cmp	r3, #15
 8005410:	d908      	bls.n	8005424 <UART_SetConfig+0x23c>
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005418:	d204      	bcs.n	8005424 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	60da      	str	r2, [r3, #12]
 8005422:	e001      	b.n	8005428 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005434:	7fbb      	ldrb	r3, [r7, #30]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3720      	adds	r7, #32
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	efff69f3 	.word	0xefff69f3
 8005444:	40013800 	.word	0x40013800
 8005448:	40021000 	.word	0x40021000
 800544c:	40004400 	.word	0x40004400
 8005450:	40004800 	.word	0x40004800
 8005454:	007a1200 	.word	0x007a1200

08005458 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00a      	beq.n	800550a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005534:	2b00      	cmp	r3, #0
 8005536:	d01a      	beq.n	800556e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005556:	d10a      	bne.n	800556e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	605a      	str	r2, [r3, #4]
  }
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055ac:	f7fb fb88 	bl	8000cc0 <HAL_GetTick>
 80055b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d10e      	bne.n	80055de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f82d 	bl	800562e <UART_WaitOnFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e023      	b.n	8005626 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d10e      	bne.n	800560a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f817 	bl	800562e <UART_WaitOnFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e00d      	b.n	8005626 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b09c      	sub	sp, #112	; 0x70
 8005632:	af00      	add	r7, sp, #0
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	603b      	str	r3, [r7, #0]
 800563a:	4613      	mov	r3, r2
 800563c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800563e:	e0a5      	b.n	800578c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	f000 80a1 	beq.w	800578c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564a:	f7fb fb39 	bl	8000cc0 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005656:	429a      	cmp	r2, r3
 8005658:	d302      	bcc.n	8005660 <UART_WaitOnFlagUntilTimeout+0x32>
 800565a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800565c:	2b00      	cmp	r3, #0
 800565e:	d13e      	bne.n	80056de <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800566e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005670:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005674:	667b      	str	r3, [r7, #100]	; 0x64
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800567e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005680:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005684:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800568c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e6      	bne.n	8005660 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3308      	adds	r3, #8
 8005698:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	f023 0301 	bic.w	r3, r3, #1
 80056a8:	663b      	str	r3, [r7, #96]	; 0x60
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3308      	adds	r3, #8
 80056b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80056b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e5      	bne.n	8005692 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2220      	movs	r2, #32
 80056ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e067      	b.n	80057ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d04f      	beq.n	800578c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056fa:	d147      	bne.n	800578c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005704:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800571a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005724:	637b      	str	r3, [r7, #52]	; 0x34
 8005726:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800572a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e6      	bne.n	8005706 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3308      	adds	r3, #8
 800573e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	613b      	str	r3, [r7, #16]
   return(result);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f023 0301 	bic.w	r3, r3, #1
 800574e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3308      	adds	r3, #8
 8005756:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005758:	623a      	str	r2, [r7, #32]
 800575a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	69f9      	ldr	r1, [r7, #28]
 800575e:	6a3a      	ldr	r2, [r7, #32]
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	61bb      	str	r3, [r7, #24]
   return(result);
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e5      	bne.n	8005738 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2220      	movs	r2, #32
 8005770:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2220      	movs	r2, #32
 8005776:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e010      	b.n	80057ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69da      	ldr	r2, [r3, #28]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	4013      	ands	r3, r2
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	429a      	cmp	r2, r3
 800579a:	bf0c      	ite	eq
 800579c:	2301      	moveq	r3, #1
 800579e:	2300      	movne	r3, #0
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	f43f af4a 	beq.w	8005640 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3770      	adds	r7, #112	; 0x70
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b096      	sub	sp, #88	; 0x58
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	4613      	mov	r3, r2
 80057c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2222      	movs	r2, #34	; 0x22
 80057e0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d02b      	beq.n	8005842 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	4a40      	ldr	r2, [pc, #256]	; (80058f0 <UART_Start_Receive_DMA+0x138>)
 80057f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	4a3f      	ldr	r2, [pc, #252]	; (80058f4 <UART_Start_Receive_DMA+0x13c>)
 80057f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fe:	4a3e      	ldr	r2, [pc, #248]	; (80058f8 <UART_Start_Receive_DMA+0x140>)
 8005800:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	2200      	movs	r2, #0
 8005808:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3324      	adds	r3, #36	; 0x24
 8005814:	4619      	mov	r1, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581a:	461a      	mov	r2, r3
 800581c:	88fb      	ldrh	r3, [r7, #6]
 800581e:	f7fc f9f3 	bl	8001c08 <HAL_DMA_Start_IT>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00c      	beq.n	8005842 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2210      	movs	r2, #16
 800582c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2220      	movs	r2, #32
 800583c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e051      	b.n	80058e6 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585e:	657b      	str	r3, [r7, #84]	; 0x54
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	461a      	mov	r2, r3
 8005866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005868:	64bb      	str	r3, [r7, #72]	; 0x48
 800586a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800586e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e6      	bne.n	800584a <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3308      	adds	r3, #8
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	f043 0301 	orr.w	r3, r3, #1
 8005892:	653b      	str	r3, [r7, #80]	; 0x50
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3308      	adds	r3, #8
 800589a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800589c:	637a      	str	r2, [r7, #52]	; 0x34
 800589e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058a4:	e841 2300 	strex	r3, r2, [r1]
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1e5      	bne.n	800587c <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3308      	adds	r3, #8
 80058b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	613b      	str	r3, [r7, #16]
   return(result);
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3308      	adds	r3, #8
 80058ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058d0:	623a      	str	r2, [r7, #32]
 80058d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	69f9      	ldr	r1, [r7, #28]
 80058d6:	6a3a      	ldr	r2, [r7, #32]
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e5      	bne.n	80058b0 <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3758      	adds	r7, #88	; 0x58
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	08005a0f 	.word	0x08005a0f
 80058f4:	08005b2d 	.word	0x08005b2d
 80058f8:	08005b65 	.word	0x08005b65

080058fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b089      	sub	sp, #36	; 0x24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	60bb      	str	r3, [r7, #8]
   return(result);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005918:	61fb      	str	r3, [r7, #28]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	61bb      	str	r3, [r7, #24]
 8005924:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	6979      	ldr	r1, [r7, #20]
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	613b      	str	r3, [r7, #16]
   return(result);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1e6      	bne.n	8005904 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800593c:	bf00      	nop
 800593e:	3724      	adds	r7, #36	; 0x24
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005948:	b480      	push	{r7}
 800594a:	b095      	sub	sp, #84	; 0x54
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005964:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800596e:	643b      	str	r3, [r7, #64]	; 0x40
 8005970:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e6      	bne.n	8005950 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3308      	adds	r3, #8
 8005988:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	61fb      	str	r3, [r7, #28]
   return(result);
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	64bb      	str	r3, [r7, #72]	; 0x48
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3308      	adds	r3, #8
 80059a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e5      	bne.n	8005982 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d118      	bne.n	80059f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f023 0310 	bic.w	r3, r3, #16
 80059d2:	647b      	str	r3, [r7, #68]	; 0x44
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	461a      	mov	r2, r3
 80059da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059dc:	61bb      	str	r3, [r7, #24]
 80059de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	6979      	ldr	r1, [r7, #20]
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	613b      	str	r3, [r7, #16]
   return(result);
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e6      	bne.n	80059be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2220      	movs	r2, #32
 80059f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005a02:	bf00      	nop
 8005a04:	3754      	adds	r7, #84	; 0x54
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b09c      	sub	sp, #112	; 0x70
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	d070      	beq.n	8005b06 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8005a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a40:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a4c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e6      	bne.n	8005a2c <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3308      	adds	r3, #8
 8005a64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a70:	f023 0301 	bic.w	r3, r3, #1
 8005a74:	667b      	str	r3, [r7, #100]	; 0x64
 8005a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a7e:	647a      	str	r2, [r7, #68]	; 0x44
 8005a80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e5      	bne.n	8005a5e <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3308      	adds	r3, #8
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	623b      	str	r3, [r7, #32]
   return(result);
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa8:	663b      	str	r3, [r7, #96]	; 0x60
 8005aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ab2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e5      	bne.n	8005a92 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac8:	2220      	movs	r2, #32
 8005aca:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d118      	bne.n	8005b06 <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f023 0310 	bic.w	r3, r3, #16
 8005ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005af2:	61fb      	str	r3, [r7, #28]
 8005af4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	69b9      	ldr	r1, [r7, #24]
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	617b      	str	r3, [r7, #20]
   return(result);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1e6      	bne.n	8005ad4 <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d107      	bne.n	8005b1e <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b14:	4619      	mov	r1, r3
 8005b16:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b18:	f7ff fb5a 	bl	80051d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b1c:	e002      	b.n	8005b24 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8005b1e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b20:	f7fa fe0a 	bl	8000738 <HAL_UART_RxCpltCallback>
}
 8005b24:	bf00      	nop
 8005b26:	3770      	adds	r7, #112	; 0x70
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d109      	bne.n	8005b56 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b48:	085b      	lsrs	r3, r3, #1
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f7ff fb3e 	bl	80051d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b54:	e002      	b.n	8005b5c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7ff fb26 	bl	80051a8 <HAL_UART_RxHalfCpltCallback>
}
 8005b5c:	bf00      	nop
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b76:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b88:	2b80      	cmp	r3, #128	; 0x80
 8005b8a:	d109      	bne.n	8005ba0 <UART_DMAError+0x3c>
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	2b21      	cmp	r3, #33	; 0x21
 8005b90:	d106      	bne.n	8005ba0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005b9a:	6978      	ldr	r0, [r7, #20]
 8005b9c:	f7ff feae 	bl	80058fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b40      	cmp	r3, #64	; 0x40
 8005bac:	d109      	bne.n	8005bc2 <UART_DMAError+0x5e>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b22      	cmp	r3, #34	; 0x22
 8005bb2:	d106      	bne.n	8005bc2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005bbc:	6978      	ldr	r0, [r7, #20]
 8005bbe:	f7ff fec3 	bl	8005948 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bc8:	f043 0210 	orr.w	r2, r3, #16
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bd2:	6978      	ldr	r0, [r7, #20]
 8005bd4:	f7ff faf2 	bl	80051bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bd8:	bf00      	nop
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <__errno>:
 8005be0:	4b01      	ldr	r3, [pc, #4]	; (8005be8 <__errno+0x8>)
 8005be2:	6818      	ldr	r0, [r3, #0]
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	20000010 	.word	0x20000010

08005bec <__libc_init_array>:
 8005bec:	b570      	push	{r4, r5, r6, lr}
 8005bee:	4e0d      	ldr	r6, [pc, #52]	; (8005c24 <__libc_init_array+0x38>)
 8005bf0:	4c0d      	ldr	r4, [pc, #52]	; (8005c28 <__libc_init_array+0x3c>)
 8005bf2:	1ba4      	subs	r4, r4, r6
 8005bf4:	10a4      	asrs	r4, r4, #2
 8005bf6:	2500      	movs	r5, #0
 8005bf8:	42a5      	cmp	r5, r4
 8005bfa:	d109      	bne.n	8005c10 <__libc_init_array+0x24>
 8005bfc:	4e0b      	ldr	r6, [pc, #44]	; (8005c2c <__libc_init_array+0x40>)
 8005bfe:	4c0c      	ldr	r4, [pc, #48]	; (8005c30 <__libc_init_array+0x44>)
 8005c00:	f000 f8c8 	bl	8005d94 <_init>
 8005c04:	1ba4      	subs	r4, r4, r6
 8005c06:	10a4      	asrs	r4, r4, #2
 8005c08:	2500      	movs	r5, #0
 8005c0a:	42a5      	cmp	r5, r4
 8005c0c:	d105      	bne.n	8005c1a <__libc_init_array+0x2e>
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
 8005c10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c14:	4798      	blx	r3
 8005c16:	3501      	adds	r5, #1
 8005c18:	e7ee      	b.n	8005bf8 <__libc_init_array+0xc>
 8005c1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c1e:	4798      	blx	r3
 8005c20:	3501      	adds	r5, #1
 8005c22:	e7f2      	b.n	8005c0a <__libc_init_array+0x1e>
 8005c24:	08005de4 	.word	0x08005de4
 8005c28:	08005de4 	.word	0x08005de4
 8005c2c:	08005de4 	.word	0x08005de4
 8005c30:	08005de8 	.word	0x08005de8

08005c34 <memset>:
 8005c34:	4402      	add	r2, r0
 8005c36:	4603      	mov	r3, r0
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d100      	bne.n	8005c3e <memset+0xa>
 8005c3c:	4770      	bx	lr
 8005c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c42:	e7f9      	b.n	8005c38 <memset+0x4>

08005c44 <rand>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	4b13      	ldr	r3, [pc, #76]	; (8005c94 <rand+0x50>)
 8005c48:	681c      	ldr	r4, [r3, #0]
 8005c4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c4c:	b97b      	cbnz	r3, 8005c6e <rand+0x2a>
 8005c4e:	2018      	movs	r0, #24
 8005c50:	f000 f82c 	bl	8005cac <malloc>
 8005c54:	4a10      	ldr	r2, [pc, #64]	; (8005c98 <rand+0x54>)
 8005c56:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <rand+0x58>)
 8005c58:	63a0      	str	r0, [r4, #56]	; 0x38
 8005c5a:	e9c0 2300 	strd	r2, r3, [r0]
 8005c5e:	4b10      	ldr	r3, [pc, #64]	; (8005ca0 <rand+0x5c>)
 8005c60:	6083      	str	r3, [r0, #8]
 8005c62:	230b      	movs	r3, #11
 8005c64:	8183      	strh	r3, [r0, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005c6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005c70:	480c      	ldr	r0, [pc, #48]	; (8005ca4 <rand+0x60>)
 8005c72:	690a      	ldr	r2, [r1, #16]
 8005c74:	694b      	ldr	r3, [r1, #20]
 8005c76:	4c0c      	ldr	r4, [pc, #48]	; (8005ca8 <rand+0x64>)
 8005c78:	4350      	muls	r0, r2
 8005c7a:	fb04 0003 	mla	r0, r4, r3, r0
 8005c7e:	fba2 2304 	umull	r2, r3, r2, r4
 8005c82:	4403      	add	r3, r0
 8005c84:	1c54      	adds	r4, r2, #1
 8005c86:	f143 0500 	adc.w	r5, r3, #0
 8005c8a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8005c8e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8005c92:	bd38      	pop	{r3, r4, r5, pc}
 8005c94:	20000010 	.word	0x20000010
 8005c98:	abcd330e 	.word	0xabcd330e
 8005c9c:	e66d1234 	.word	0xe66d1234
 8005ca0:	0005deec 	.word	0x0005deec
 8005ca4:	5851f42d 	.word	0x5851f42d
 8005ca8:	4c957f2d 	.word	0x4c957f2d

08005cac <malloc>:
 8005cac:	4b02      	ldr	r3, [pc, #8]	; (8005cb8 <malloc+0xc>)
 8005cae:	4601      	mov	r1, r0
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	f000 b803 	b.w	8005cbc <_malloc_r>
 8005cb6:	bf00      	nop
 8005cb8:	20000010 	.word	0x20000010

08005cbc <_malloc_r>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	1ccd      	adds	r5, r1, #3
 8005cc0:	f025 0503 	bic.w	r5, r5, #3
 8005cc4:	3508      	adds	r5, #8
 8005cc6:	2d0c      	cmp	r5, #12
 8005cc8:	bf38      	it	cc
 8005cca:	250c      	movcc	r5, #12
 8005ccc:	2d00      	cmp	r5, #0
 8005cce:	4606      	mov	r6, r0
 8005cd0:	db01      	blt.n	8005cd6 <_malloc_r+0x1a>
 8005cd2:	42a9      	cmp	r1, r5
 8005cd4:	d903      	bls.n	8005cde <_malloc_r+0x22>
 8005cd6:	230c      	movs	r3, #12
 8005cd8:	6033      	str	r3, [r6, #0]
 8005cda:	2000      	movs	r0, #0
 8005cdc:	bd70      	pop	{r4, r5, r6, pc}
 8005cde:	f000 f857 	bl	8005d90 <__malloc_lock>
 8005ce2:	4a21      	ldr	r2, [pc, #132]	; (8005d68 <_malloc_r+0xac>)
 8005ce4:	6814      	ldr	r4, [r2, #0]
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	b991      	cbnz	r1, 8005d10 <_malloc_r+0x54>
 8005cea:	4c20      	ldr	r4, [pc, #128]	; (8005d6c <_malloc_r+0xb0>)
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	b91b      	cbnz	r3, 8005cf8 <_malloc_r+0x3c>
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	f000 f83d 	bl	8005d70 <_sbrk_r>
 8005cf6:	6020      	str	r0, [r4, #0]
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f000 f838 	bl	8005d70 <_sbrk_r>
 8005d00:	1c43      	adds	r3, r0, #1
 8005d02:	d124      	bne.n	8005d4e <_malloc_r+0x92>
 8005d04:	230c      	movs	r3, #12
 8005d06:	6033      	str	r3, [r6, #0]
 8005d08:	4630      	mov	r0, r6
 8005d0a:	f000 f842 	bl	8005d92 <__malloc_unlock>
 8005d0e:	e7e4      	b.n	8005cda <_malloc_r+0x1e>
 8005d10:	680b      	ldr	r3, [r1, #0]
 8005d12:	1b5b      	subs	r3, r3, r5
 8005d14:	d418      	bmi.n	8005d48 <_malloc_r+0x8c>
 8005d16:	2b0b      	cmp	r3, #11
 8005d18:	d90f      	bls.n	8005d3a <_malloc_r+0x7e>
 8005d1a:	600b      	str	r3, [r1, #0]
 8005d1c:	50cd      	str	r5, [r1, r3]
 8005d1e:	18cc      	adds	r4, r1, r3
 8005d20:	4630      	mov	r0, r6
 8005d22:	f000 f836 	bl	8005d92 <__malloc_unlock>
 8005d26:	f104 000b 	add.w	r0, r4, #11
 8005d2a:	1d23      	adds	r3, r4, #4
 8005d2c:	f020 0007 	bic.w	r0, r0, #7
 8005d30:	1ac3      	subs	r3, r0, r3
 8005d32:	d0d3      	beq.n	8005cdc <_malloc_r+0x20>
 8005d34:	425a      	negs	r2, r3
 8005d36:	50e2      	str	r2, [r4, r3]
 8005d38:	e7d0      	b.n	8005cdc <_malloc_r+0x20>
 8005d3a:	428c      	cmp	r4, r1
 8005d3c:	684b      	ldr	r3, [r1, #4]
 8005d3e:	bf16      	itet	ne
 8005d40:	6063      	strne	r3, [r4, #4]
 8005d42:	6013      	streq	r3, [r2, #0]
 8005d44:	460c      	movne	r4, r1
 8005d46:	e7eb      	b.n	8005d20 <_malloc_r+0x64>
 8005d48:	460c      	mov	r4, r1
 8005d4a:	6849      	ldr	r1, [r1, #4]
 8005d4c:	e7cc      	b.n	8005ce8 <_malloc_r+0x2c>
 8005d4e:	1cc4      	adds	r4, r0, #3
 8005d50:	f024 0403 	bic.w	r4, r4, #3
 8005d54:	42a0      	cmp	r0, r4
 8005d56:	d005      	beq.n	8005d64 <_malloc_r+0xa8>
 8005d58:	1a21      	subs	r1, r4, r0
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	f000 f808 	bl	8005d70 <_sbrk_r>
 8005d60:	3001      	adds	r0, #1
 8005d62:	d0cf      	beq.n	8005d04 <_malloc_r+0x48>
 8005d64:	6025      	str	r5, [r4, #0]
 8005d66:	e7db      	b.n	8005d20 <_malloc_r+0x64>
 8005d68:	2000009c 	.word	0x2000009c
 8005d6c:	200000a0 	.word	0x200000a0

08005d70 <_sbrk_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4c06      	ldr	r4, [pc, #24]	; (8005d8c <_sbrk_r+0x1c>)
 8005d74:	2300      	movs	r3, #0
 8005d76:	4605      	mov	r5, r0
 8005d78:	4608      	mov	r0, r1
 8005d7a:	6023      	str	r3, [r4, #0]
 8005d7c:	f7fa fed4 	bl	8000b28 <_sbrk>
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	d102      	bne.n	8005d8a <_sbrk_r+0x1a>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	b103      	cbz	r3, 8005d8a <_sbrk_r+0x1a>
 8005d88:	602b      	str	r3, [r5, #0]
 8005d8a:	bd38      	pop	{r3, r4, r5, pc}
 8005d8c:	20000214 	.word	0x20000214

08005d90 <__malloc_lock>:
 8005d90:	4770      	bx	lr

08005d92 <__malloc_unlock>:
 8005d92:	4770      	bx	lr

08005d94 <_init>:
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	bf00      	nop
 8005d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9a:	bc08      	pop	{r3}
 8005d9c:	469e      	mov	lr, r3
 8005d9e:	4770      	bx	lr

08005da0 <_fini>:
 8005da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da2:	bf00      	nop
 8005da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da6:	bc08      	pop	{r3}
 8005da8:	469e      	mov	lr, r3
 8005daa:	4770      	bx	lr
