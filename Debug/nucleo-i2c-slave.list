
nucleo-i2c-slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005968  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005af0  08005af0  00015af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b28  08005b28  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005b28  08005b28  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b28  08005b28  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b28  08005b28  00015b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b2c  08005b2c  00015b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000010  08005b40  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08005b40  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eef0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c44  00000000  00000000  0002ef30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b70  00000000  00000000  00030b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ab8  00000000  00000000  000316e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001af91  00000000  00000000  000321a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b16d  00000000  00000000  0004d131  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009fc16  00000000  00000000  0005829e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7eb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f14  00000000  00000000  000f7f30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ad8 	.word	0x08005ad8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005ad8 	.word	0x08005ad8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fc6e 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f82c 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f96e 	bl	80004b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f94e 	bl	8000478 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001dc:	f000 f91c 	bl	8000418 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001e0:	f000 f8da 	bl	8000398 <MX_I2C1_Init>
  MX_ADC1_Init();
 80001e4:	f000 f87c 	bl	80002e0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, uart_rx_buff, 1);
 80001e8:	2201      	movs	r2, #1
 80001ea:	490b      	ldr	r1, [pc, #44]	; (8000218 <main+0x50>)
 80001ec:	480b      	ldr	r0, [pc, #44]	; (800021c <main+0x54>)
 80001ee:	f004 fedd 	bl	8004fac <HAL_UART_Receive_DMA>
  HAL_I2C_EnableListen_IT(&hi2c1);
 80001f2:	480b      	ldr	r0, [pc, #44]	; (8000220 <main+0x58>)
 80001f4:	f002 f978 	bl	80024e8 <HAL_I2C_EnableListen_IT>
  HAL_ADC_Start(&hadc1);
 80001f8:	480a      	ldr	r0, [pc, #40]	; (8000224 <main+0x5c>)
 80001fa:	f000 fe43 	bl	8000e84 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80001fe:	f04f 31ff 	mov.w	r1, #4294967295
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <main+0x5c>)
 8000204:	f000 feac 	bl	8000f60 <HAL_ADC_PollForConversion>
	  adc_raw_value = HAL_ADC_GetValue(&hadc1);
 8000208:	4806      	ldr	r0, [pc, #24]	; (8000224 <main+0x5c>)
 800020a:	f000 ff67 	bl	80010dc <HAL_ADC_GetValue>
 800020e:	4603      	mov	r3, r0
 8000210:	b2da      	uxtb	r2, r3
 8000212:	4b05      	ldr	r3, [pc, #20]	; (8000228 <main+0x60>)
 8000214:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000216:	e7f2      	b.n	80001fe <main+0x36>
 8000218:	20000198 	.word	0x20000198
 800021c:	20000114 	.word	0x20000114
 8000220:	20000078 	.word	0x20000078
 8000224:	200000c4 	.word	0x200000c4
 8000228:	2000002c 	.word	0x2000002c

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b09c      	sub	sp, #112	; 0x70
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000236:	2228      	movs	r2, #40	; 0x28
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f005 fc44 	bl	8005ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	60da      	str	r2, [r3, #12]
 800024e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000250:	463b      	mov	r3, r7
 8000252:	2234      	movs	r2, #52	; 0x34
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f005 fc36 	bl	8005ac8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025c:	2302      	movs	r3, #2
 800025e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000260:	2301      	movs	r3, #1
 8000262:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000264:	2310      	movs	r3, #16
 8000266:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000268:	2302      	movs	r3, #2
 800026a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800026c:	2300      	movs	r3, #0
 800026e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000270:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000274:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000276:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800027a:	4618      	mov	r0, r3
 800027c:	f003 fae4 	bl	8003848 <HAL_RCC_OscConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000286:	f000 fa61 	bl	800074c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028a:	230f      	movs	r3, #15
 800028c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028e:	2302      	movs	r3, #2
 8000290:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002a4:	2102      	movs	r1, #2
 80002a6:	4618      	mov	r0, r3
 80002a8:	f004 f9d6 	bl	8004658 <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002b2:	f000 fa4b 	bl	800074c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC1;
 80002b6:	23a0      	movs	r3, #160	; 0xa0
 80002b8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80002be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c4:	463b      	mov	r3, r7
 80002c6:	4618      	mov	r0, r3
 80002c8:	f004 fbfc 	bl	8004ac4 <HAL_RCCEx_PeriphCLKConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002d2:	f000 fa3b 	bl	800074c <Error_Handler>
  }
}
 80002d6:	bf00      	nop
 80002d8:	3770      	adds	r7, #112	; 0x70
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e6:	463b      	mov	r3, r7
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
 80002f4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002f6:	4b27      	ldr	r3, [pc, #156]	; (8000394 <MX_ADC1_Init+0xb4>)
 80002f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002fe:	4b25      	ldr	r3, [pc, #148]	; (8000394 <MX_ADC1_Init+0xb4>)
 8000300:	2200      	movs	r2, #0
 8000302:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000304:	4b23      	ldr	r3, [pc, #140]	; (8000394 <MX_ADC1_Init+0xb4>)
 8000306:	2210      	movs	r2, #16
 8000308:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <MX_ADC1_Init+0xb4>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000310:	4b20      	ldr	r3, [pc, #128]	; (8000394 <MX_ADC1_Init+0xb4>)
 8000312:	2201      	movs	r2, #1
 8000314:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000316:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <MX_ADC1_Init+0xb4>)
 8000318:	2200      	movs	r2, #0
 800031a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800031e:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <MX_ADC1_Init+0xb4>)
 8000320:	2200      	movs	r2, #0
 8000322:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_ADC1_Init+0xb4>)
 8000326:	2201      	movs	r2, #1
 8000328:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MX_ADC1_Init+0xb4>)
 800032c:	2200      	movs	r2, #0
 800032e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_ADC1_Init+0xb4>)
 8000332:	2201      	movs	r2, #1
 8000334:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <MX_ADC1_Init+0xb4>)
 8000338:	2200      	movs	r2, #0
 800033a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800033e:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_ADC1_Init+0xb4>)
 8000340:	2204      	movs	r2, #4
 8000342:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000344:	4b13      	ldr	r3, [pc, #76]	; (8000394 <MX_ADC1_Init+0xb4>)
 8000346:	2200      	movs	r2, #0
 8000348:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800034a:	4b12      	ldr	r3, [pc, #72]	; (8000394 <MX_ADC1_Init+0xb4>)
 800034c:	2200      	movs	r2, #0
 800034e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000350:	4810      	ldr	r0, [pc, #64]	; (8000394 <MX_ADC1_Init+0xb4>)
 8000352:	f000 fc11 	bl	8000b78 <HAL_ADC_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 800035c:	f000 f9f6 	bl	800074c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000360:	2301      	movs	r3, #1
 8000362:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000364:	2301      	movs	r3, #1
 8000366:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800036c:	2300      	movs	r3, #0
 800036e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000370:	2300      	movs	r3, #0
 8000372:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000378:	463b      	mov	r3, r7
 800037a:	4619      	mov	r1, r3
 800037c:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_ADC1_Init+0xb4>)
 800037e:	f000 febb 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000388:	f000 f9e0 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800038c:	bf00      	nop
 800038e:	3718      	adds	r7, #24
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	200000c4 	.word	0x200000c4

08000398 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800039c:	4b1b      	ldr	r3, [pc, #108]	; (800040c <MX_I2C1_Init+0x74>)
 800039e:	4a1c      	ldr	r2, [pc, #112]	; (8000410 <MX_I2C1_Init+0x78>)
 80003a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003a2:	4b1a      	ldr	r3, [pc, #104]	; (800040c <MX_I2C1_Init+0x74>)
 80003a4:	4a1b      	ldr	r2, [pc, #108]	; (8000414 <MX_I2C1_Init+0x7c>)
 80003a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 64;
 80003a8:	4b18      	ldr	r3, [pc, #96]	; (800040c <MX_I2C1_Init+0x74>)
 80003aa:	2240      	movs	r2, #64	; 0x40
 80003ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ae:	4b17      	ldr	r3, [pc, #92]	; (800040c <MX_I2C1_Init+0x74>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b4:	4b15      	ldr	r3, [pc, #84]	; (800040c <MX_I2C1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003ba:	4b14      	ldr	r3, [pc, #80]	; (800040c <MX_I2C1_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c0:	4b12      	ldr	r3, [pc, #72]	; (800040c <MX_I2C1_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003c6:	4b11      	ldr	r3, [pc, #68]	; (800040c <MX_I2C1_Init+0x74>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003cc:	4b0f      	ldr	r3, [pc, #60]	; (800040c <MX_I2C1_Init+0x74>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003d2:	480e      	ldr	r0, [pc, #56]	; (800040c <MX_I2C1_Init+0x74>)
 80003d4:	f001 feb1 	bl	800213a <HAL_I2C_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003de:	f000 f9b5 	bl	800074c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003e2:	2100      	movs	r1, #0
 80003e4:	4809      	ldr	r0, [pc, #36]	; (800040c <MX_I2C1_Init+0x74>)
 80003e6:	f003 f997 	bl	8003718 <HAL_I2CEx_ConfigAnalogFilter>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003f0:	f000 f9ac 	bl	800074c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003f4:	2100      	movs	r1, #0
 80003f6:	4805      	ldr	r0, [pc, #20]	; (800040c <MX_I2C1_Init+0x74>)
 80003f8:	f003 f9d9 	bl	80037ae <HAL_I2CEx_ConfigDigitalFilter>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000402:	f000 f9a3 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000078 	.word	0x20000078
 8000410:	40005400 	.word	0x40005400
 8000414:	2000090e 	.word	0x2000090e

08000418 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800041c:	4b14      	ldr	r3, [pc, #80]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800041e:	4a15      	ldr	r2, [pc, #84]	; (8000474 <MX_USART2_UART_Init+0x5c>)
 8000420:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000422:	4b13      	ldr	r3, [pc, #76]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000424:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000428:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800042a:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800043e:	220c      	movs	r2, #12
 8000440:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800044a:	2200      	movs	r2, #0
 800044c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000456:	2200      	movs	r2, #0
 8000458:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800045a:	4805      	ldr	r0, [pc, #20]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800045c:	f004 fcc4 	bl	8004de8 <HAL_UART_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000466:	f000 f971 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000114 	.word	0x20000114
 8000474:	40004400 	.word	0x40004400

08000478 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <MX_DMA_Init+0x38>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <MX_DMA_Init+0x38>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <MX_DMA_Init+0x38>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	2100      	movs	r1, #0
 800049a:	2010      	movs	r0, #16
 800049c:	f001 fa87 	bl	80019ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004a0:	2010      	movs	r0, #16
 80004a2:	f001 faa0 	bl	80019e6 <HAL_NVIC_EnableIRQ>

}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	f107 0314 	add.w	r3, r7, #20
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ca:	4b3b      	ldr	r3, [pc, #236]	; (80005b8 <MX_GPIO_Init+0x104>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a3a      	ldr	r2, [pc, #232]	; (80005b8 <MX_GPIO_Init+0x104>)
 80004d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b38      	ldr	r3, [pc, #224]	; (80005b8 <MX_GPIO_Init+0x104>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004de:	613b      	str	r3, [r7, #16]
 80004e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e2:	4b35      	ldr	r3, [pc, #212]	; (80005b8 <MX_GPIO_Init+0x104>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a34      	ldr	r2, [pc, #208]	; (80005b8 <MX_GPIO_Init+0x104>)
 80004e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b32      	ldr	r3, [pc, #200]	; (80005b8 <MX_GPIO_Init+0x104>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b2f      	ldr	r3, [pc, #188]	; (80005b8 <MX_GPIO_Init+0x104>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a2e      	ldr	r2, [pc, #184]	; (80005b8 <MX_GPIO_Init+0x104>)
 8000500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <MX_GPIO_Init+0x104>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <MX_GPIO_Init+0x104>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a28      	ldr	r2, [pc, #160]	; (80005b8 <MX_GPIO_Init+0x104>)
 8000518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b26      	ldr	r3, [pc, #152]	; (80005b8 <MX_GPIO_Init+0x104>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LDR2_Pin|LD2_Pin|LDG2_Pin|LDR1_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f242 4130 	movw	r1, #9264	; 0x2430
 8000530:	4822      	ldr	r0, [pc, #136]	; (80005bc <MX_GPIO_Init+0x108>)
 8000532:	f001 fdc7 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDG1_GPIO_Port, LDG1_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000540:	f001 fdc0 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800054a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800054e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	4619      	mov	r1, r3
 800055a:	4819      	ldr	r0, [pc, #100]	; (80005c0 <MX_GPIO_Init+0x10c>)
 800055c:	f001 fc40 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDR2_Pin LD2_Pin LDG2_Pin LDR1_Pin */
  GPIO_InitStruct.Pin = LDR2_Pin|LD2_Pin|LDG2_Pin|LDR1_Pin;
 8000560:	f242 4330 	movw	r3, #9264	; 0x2430
 8000564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000566:	2301      	movs	r3, #1
 8000568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	2300      	movs	r3, #0
 8000570:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4619      	mov	r1, r3
 8000578:	4810      	ldr	r0, [pc, #64]	; (80005bc <MX_GPIO_Init+0x108>)
 800057a:	f001 fc31 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDG1_Pin */
  GPIO_InitStruct.Pin = LDG1_Pin;
 800057e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	2301      	movs	r3, #1
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2300      	movs	r3, #0
 800058e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LDG1_GPIO_Port, &GPIO_InitStruct);
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4619      	mov	r1, r3
 8000596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059a:	f001 fc21 	bl	8001de0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	2028      	movs	r0, #40	; 0x28
 80005a4:	f001 fa03 	bl	80019ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005a8:	2028      	movs	r0, #40	; 0x28
 80005aa:	f001 fa1c 	bl	80019e6 <HAL_NVIC_EnableIRQ>

}
 80005ae:	bf00      	nop
 80005b0:	3728      	adds	r7, #40	; 0x28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000
 80005bc:	48000400 	.word	0x48000400
 80005c0:	48000800 	.word	0x48000800

080005c4 <HAL_I2C_AddrCallback>:


#ifdef SLAVE_WORKING

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
 80005d0:	4613      	mov	r3, r2
 80005d2:	803b      	strh	r3, [r7, #0]
	// Static data for now
	switch (receive_buff){
 80005d4:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <HAL_I2C_AddrCallback+0xcc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	3b10      	subs	r3, #16
 80005dc:	2b13      	cmp	r3, #19
 80005de:	d83d      	bhi.n	800065c <HAL_I2C_AddrCallback+0x98>
 80005e0:	a201      	add	r2, pc, #4	; (adr r2, 80005e8 <HAL_I2C_AddrCallback+0x24>)
 80005e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e6:	bf00      	nop
 80005e8:	08000639 	.word	0x08000639
 80005ec:	0800065d 	.word	0x0800065d
 80005f0:	0800065d 	.word	0x0800065d
 80005f4:	0800065d 	.word	0x0800065d
 80005f8:	0800065d 	.word	0x0800065d
 80005fc:	0800065d 	.word	0x0800065d
 8000600:	0800065d 	.word	0x0800065d
 8000604:	0800065d 	.word	0x0800065d
 8000608:	0800065d 	.word	0x0800065d
 800060c:	0800065d 	.word	0x0800065d
 8000610:	0800065d 	.word	0x0800065d
 8000614:	0800065d 	.word	0x0800065d
 8000618:	0800065d 	.word	0x0800065d
 800061c:	0800065d 	.word	0x0800065d
 8000620:	0800065d 	.word	0x0800065d
 8000624:	0800065d 	.word	0x0800065d
 8000628:	0800065d 	.word	0x0800065d
 800062c:	08000641 	.word	0x08000641
 8000630:	0800064d 	.word	0x0800064d
 8000634:	08000655 	.word	0x08000655
		case WHO_AM_I:
			data = 0xEE;
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <HAL_I2C_AddrCallback+0xd0>)
 800063a:	22ee      	movs	r2, #238	; 0xee
 800063c:	701a      	strb	r2, [r3, #0]
			break;
 800063e:	e011      	b.n	8000664 <HAL_I2C_AddrCallback+0xa0>
		case OUT_X:
			data = adc_raw_value;
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <HAL_I2C_AddrCallback+0xd4>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <HAL_I2C_AddrCallback+0xd0>)
 8000648:	701a      	strb	r2, [r3, #0]
			break;
 800064a:	e00b      	b.n	8000664 <HAL_I2C_AddrCallback+0xa0>
		case OUT_Y:
			data = 0xb8;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <HAL_I2C_AddrCallback+0xd0>)
 800064e:	22b8      	movs	r2, #184	; 0xb8
 8000650:	701a      	strb	r2, [r3, #0]
			break;
 8000652:	e007      	b.n	8000664 <HAL_I2C_AddrCallback+0xa0>
		case OUT_Z:
			data = 0xc7;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_I2C_AddrCallback+0xd0>)
 8000656:	22c7      	movs	r2, #199	; 0xc7
 8000658:	701a      	strb	r2, [r3, #0]
			break;
 800065a:	e003      	b.n	8000664 <HAL_I2C_AddrCallback+0xa0>
		default:
			data = 0xf9;
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <HAL_I2C_AddrCallback+0xd0>)
 800065e:	22f9      	movs	r2, #249	; 0xf9
 8000660:	701a      	strb	r2, [r3, #0]
			break;
 8000662:	bf00      	nop
	}
	// Receiving
	if( TransferDirection == I2C_DIRECTION_TRANSMIT )
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d107      	bne.n	800067a <HAL_I2C_AddrCallback+0xb6>
	{
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, &receive_buff, 1, I2C_NEXT_FRAME);
 800066a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800066e:	2201      	movs	r2, #1
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <HAL_I2C_AddrCallback+0xcc>)
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f001 fe94 	bl	80023a0 <HAL_I2C_Slave_Seq_Receive_IT>
	else
	{
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &data, 1, I2C_NEXT_FRAME);
	}

}
 8000678:	e006      	b.n	8000688 <HAL_I2C_AddrCallback+0xc4>
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &data, 1, I2C_NEXT_FRAME);
 800067a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800067e:	2201      	movs	r2, #1
 8000680:	4904      	ldr	r1, [pc, #16]	; (8000694 <HAL_I2C_AddrCallback+0xd0>)
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f001 fde8 	bl	8002258 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000074 	.word	0x20000074
 8000694:	20000000 	.word	0x20000000
 8000698:	2000002c 	.word	0x2000002c

0800069c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &data, 1, I2C_NEXT_FRAME);
 80006b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006bc:	2201      	movs	r2, #1
 80006be:	4904      	ldr	r1, [pc, #16]	; (80006d0 <HAL_I2C_SlaveTxCpltCallback+0x20>)
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f001 fdc9 	bl	8002258 <HAL_I2C_Slave_Seq_Transmit_IT>

}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000000 	.word	0x20000000

080006d4 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	if( HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF )
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f001 ffc6 	bl	800266e <HAL_I2C_GetError>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b04      	cmp	r3, #4
 80006e6:	d002      	beq.n	80006ee <HAL_I2C_ErrorCallback+0x1a>
	{
		HAL_I2C_GetError(hi2c);
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f001 ffc0 	bl	800266e <HAL_I2C_GetError>
	}
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f001 fef2 	bl	80024e8 <HAL_I2C_EnableListen_IT>

}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]

}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]

	UNUSED(huart);

	// Receive
	uint8_t buff = uart_rx_buff[0];
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_UART_RxCpltCallback+0x24>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart2, uart_rx_buff, 1, HAL_MAX_DELAY);
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	2201      	movs	r2, #1
 8000734:	4903      	ldr	r1, [pc, #12]	; (8000744 <HAL_UART_RxCpltCallback+0x24>)
 8000736:	4804      	ldr	r0, [pc, #16]	; (8000748 <HAL_UART_RxCpltCallback+0x28>)
 8000738:	f004 fba4 	bl	8004e84 <HAL_UART_Transmit>

}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000198 	.word	0x20000198
 8000748:	20000114 	.word	0x20000114

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000752:	e7fe      	b.n	8000752 <Error_Handler+0x6>

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_MspInit+0x44>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <HAL_MspInit+0x44>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6193      	str	r3, [r2, #24]
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_MspInit+0x44>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_MspInit+0x44>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <HAL_MspInit+0x44>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	61d3      	str	r3, [r2, #28]
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_MspInit+0x44>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800078a:	2007      	movs	r0, #7
 800078c:	f001 f904 	bl	8001998 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000

0800079c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007bc:	d124      	bne.n	8000808 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_ADC_MspInit+0x74>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	4a13      	ldr	r2, [pc, #76]	; (8000810 <HAL_ADC_MspInit+0x74>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	6153      	str	r3, [r2, #20]
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <HAL_ADC_MspInit+0x74>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <HAL_ADC_MspInit+0x74>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <HAL_ADC_MspInit+0x74>)
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <HAL_ADC_MspInit+0x74>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ee:	2301      	movs	r3, #1
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f2:	2303      	movs	r3, #3
 80007f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f001 faec 	bl	8001de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	; 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a1f      	ldr	r2, [pc, #124]	; (80008b0 <HAL_I2C_MspInit+0x9c>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d138      	bne.n	80008a8 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <HAL_I2C_MspInit+0xa0>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	4a1e      	ldr	r2, [pc, #120]	; (80008b4 <HAL_I2C_MspInit+0xa0>)
 800083c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000840:	6153      	str	r3, [r2, #20]
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <HAL_I2C_MspInit+0xa0>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800084e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000854:	2312      	movs	r3, #18
 8000856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000858:	2301      	movs	r3, #1
 800085a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000860:	2304      	movs	r3, #4
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4813      	ldr	r0, [pc, #76]	; (80008b8 <HAL_I2C_MspInit+0xa4>)
 800086c:	f001 fab8 	bl	8001de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_I2C_MspInit+0xa0>)
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <HAL_I2C_MspInit+0xa0>)
 8000876:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800087a:	61d3      	str	r3, [r2, #28]
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <HAL_I2C_MspInit+0xa0>)
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	201f      	movs	r0, #31
 800088e:	f001 f88e 	bl	80019ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000892:	201f      	movs	r0, #31
 8000894:	f001 f8a7 	bl	80019e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	2020      	movs	r0, #32
 800089e:	f001 f886 	bl	80019ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008a2:	2020      	movs	r0, #32
 80008a4:	f001 f89f 	bl	80019e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40005400 	.word	0x40005400
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000400 	.word	0x48000400

080008bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a2a      	ldr	r2, [pc, #168]	; (8000984 <HAL_UART_MspInit+0xc8>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d14e      	bne.n	800097c <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008de:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <HAL_UART_MspInit+0xcc>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a29      	ldr	r2, [pc, #164]	; (8000988 <HAL_UART_MspInit+0xcc>)
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b27      	ldr	r3, [pc, #156]	; (8000988 <HAL_UART_MspInit+0xcc>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <HAL_UART_MspInit+0xcc>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a23      	ldr	r2, [pc, #140]	; (8000988 <HAL_UART_MspInit+0xcc>)
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <HAL_UART_MspInit+0xcc>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800090e:	230c      	movs	r3, #12
 8000910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800091e:	2307      	movs	r3, #7
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092c:	f001 fa58 	bl	8001de0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <HAL_UART_MspInit+0xd0>)
 8000932:	4a17      	ldr	r2, [pc, #92]	; (8000990 <HAL_UART_MspInit+0xd4>)
 8000934:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_UART_MspInit+0xd0>)
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <HAL_UART_MspInit+0xd0>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_UART_MspInit+0xd0>)
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000948:	4b10      	ldr	r3, [pc, #64]	; (800098c <HAL_UART_MspInit+0xd0>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_UART_MspInit+0xd0>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000954:	4b0d      	ldr	r3, [pc, #52]	; (800098c <HAL_UART_MspInit+0xd0>)
 8000956:	2220      	movs	r2, #32
 8000958:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_UART_MspInit+0xd0>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000960:	480a      	ldr	r0, [pc, #40]	; (800098c <HAL_UART_MspInit+0xd0>)
 8000962:	f001 f85a 	bl	8001a1a <HAL_DMA_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 800096c:	f7ff feee 	bl	800074c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a06      	ldr	r2, [pc, #24]	; (800098c <HAL_UART_MspInit+0xd0>)
 8000974:	671a      	str	r2, [r3, #112]	; 0x70
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <HAL_UART_MspInit+0xd0>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40004400 	.word	0x40004400
 8000988:	40021000 	.word	0x40021000
 800098c:	20000030 	.word	0x20000030
 8000990:	4002006c 	.word	0x4002006c

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <NMI_Handler+0x4>

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <MemManage_Handler+0x4>

080009a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 f8aa 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <DMA1_Channel6_IRQHandler+0x10>)
 80009ee:	f001 f8f8 	bl	8001be2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000030 	.word	0x20000030

080009fc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <I2C1_EV_IRQHandler+0x10>)
 8000a02:	f001 fd91 	bl	8002528 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000078 	.word	0x20000078

08000a10 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <I2C1_ER_IRQHandler+0x10>)
 8000a16:	f001 fda1 	bl	800255c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000078 	.word	0x20000078

08000a24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a2c:	f001 fb62 	bl	80020f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <SystemInit+0x20>)
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <SystemInit+0x20>)
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <Reset_Handler>:
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a90 <LoopForever+0x2>
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <LoopForever+0x6>)
 8000a5e:	490e      	ldr	r1, [pc, #56]	; (8000a98 <LoopForever+0xa>)
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <LoopForever+0xe>)
 8000a62:	2300      	movs	r3, #0
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:
 8000a66:	58d4      	ldr	r4, [r2, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:
 8000a6c:	18c4      	adds	r4, r0, r3
 8000a6e:	428c      	cmp	r4, r1
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <LoopForever+0x12>)
 8000a74:	4c0b      	ldr	r4, [pc, #44]	; (8000aa4 <LoopForever+0x16>)
 8000a76:	2300      	movs	r3, #0
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:
 8000a7e:	42a2      	cmp	r2, r4
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>
 8000a82:	f7ff ffd7 	bl	8000a34 <SystemInit>
 8000a86:	f004 fffb 	bl	8005a80 <__libc_init_array>
 8000a8a:	f7ff fb9d 	bl	80001c8 <main>

08000a8e <LoopForever>:
 8000a8e:	e7fe      	b.n	8000a8e <LoopForever>
 8000a90:	20004000 	.word	0x20004000
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000010 	.word	0x20000010
 8000a9c:	08005b30 	.word	0x08005b30
 8000aa0:	20000010 	.word	0x20000010
 8000aa4:	200001a0 	.word	0x200001a0

08000aa8 <ADC1_IRQHandler>:
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_IRQHandler>
	...

08000aac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_Init+0x28>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_Init+0x28>)
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 ff6b 	bl	8001998 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 f808 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fe44 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x54>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x58>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 ff83 	bl	8001a02 <HAL_SYSTICK_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00e      	b.n	8000b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d80a      	bhi.n	8000b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f000 ff4b 	bl	80019ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <HAL_InitTick+0x5c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000004 	.word	0x20000004
 8000b30:	2000000c 	.word	0x2000000c
 8000b34:	20000008 	.word	0x20000008

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	2000000c 	.word	0x2000000c
 8000b5c:	2000019c 	.word	0x2000019c

08000b60 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	2000019c 	.word	0x2000019c

08000b78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b09a      	sub	sp, #104	; 0x68
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b86:	2300      	movs	r3, #0
 8000b88:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d101      	bne.n	8000b98 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e169      	b.n	8000e6c <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	691b      	ldr	r3, [r3, #16]
 8000b9c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d176      	bne.n	8000c98 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d152      	bne.n	8000c58 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fde5 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d13b      	bne.n	8000c58 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f000 fda3 	bl	800172c <ADC_Disable>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f003 0310 	and.w	r3, r3, #16
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d12f      	bne.n	8000c58 <HAL_ADC_Init+0xe0>
 8000bf8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d12b      	bne.n	8000c58 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c08:	f023 0302 	bic.w	r3, r3, #2
 8000c0c:	f043 0202 	orr.w	r2, r3, #2
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c22:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c32:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c34:	4b8f      	ldr	r3, [pc, #572]	; (8000e74 <HAL_ADC_Init+0x2fc>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a8f      	ldr	r2, [pc, #572]	; (8000e78 <HAL_ADC_Init+0x300>)
 8000c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3e:	0c9a      	lsrs	r2, r3, #18
 8000c40:	4613      	mov	r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	4413      	add	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c4a:	e002      	b.n	8000c52 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f9      	bne.n	8000c4c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d007      	beq.n	8000c76 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c74:	d110      	bne.n	8000c98 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f023 0312 	bic.w	r3, r3, #18
 8000c7e:	f043 0210 	orr.w	r2, r3, #16
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f043 0201 	orr.w	r2, r3, #1
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f040 80d6 	bne.w	8000e52 <HAL_ADC_Init+0x2da>
 8000ca6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f040 80d1 	bne.w	8000e52 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f040 80c9 	bne.w	8000e52 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000cc8:	f043 0202 	orr.w	r2, r3, #2
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cd0:	4b6a      	ldr	r3, [pc, #424]	; (8000e7c <HAL_ADC_Init+0x304>)
 8000cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d108      	bne.n	8000cf8 <HAL_ADC_Init+0x180>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d101      	bne.n	8000cf8 <HAL_ADC_Init+0x180>
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e000      	b.n	8000cfa <HAL_ADC_Init+0x182>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d11c      	bne.n	8000d38 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cfe:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d010      	beq.n	8000d26 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d107      	bne.n	8000d20 <HAL_ADC_Init+0x1a8>
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d101      	bne.n	8000d20 <HAL_ADC_Init+0x1a8>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e000      	b.n	8000d22 <HAL_ADC_Init+0x1aa>
 8000d20:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d108      	bne.n	8000d38 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	431a      	orrs	r2, r3
 8000d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d36:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7e5b      	ldrb	r3, [r3, #25]
 8000d3c:	035b      	lsls	r3, r3, #13
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d42:	2a01      	cmp	r2, #1
 8000d44:	d002      	beq.n	8000d4c <HAL_ADC_Init+0x1d4>
 8000d46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d4a:	e000      	b.n	8000d4e <HAL_ADC_Init+0x1d6>
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	431a      	orrs	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d11b      	bne.n	8000da4 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7e5b      	ldrb	r3, [r3, #25]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d109      	bne.n	8000d88 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	045a      	lsls	r2, r3, #17
 8000d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d84:	663b      	str	r3, [r7, #96]	; 0x60
 8000d86:	e00d      	b.n	8000da4 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000d90:	f043 0220 	orr.w	r2, r3, #32
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9c:	f043 0201 	orr.w	r2, r3, #1
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d007      	beq.n	8000dbc <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db4:	4313      	orrs	r3, r2
 8000db6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000db8:	4313      	orrs	r3, r2
 8000dba:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f003 030c 	and.w	r3, r3, #12
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d114      	bne.n	8000df4 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	6812      	ldr	r2, [r2, #0]
 8000dd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000dd8:	f023 0302 	bic.w	r3, r3, #2
 8000ddc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7e1b      	ldrb	r3, [r3, #24]
 8000de2:	039a      	lsls	r2, r3, #14
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	4313      	orrs	r3, r2
 8000dee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000df0:	4313      	orrs	r3, r2
 8000df2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <HAL_ADC_Init+0x308>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	6812      	ldr	r2, [r2, #0]
 8000e02:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000e04:	430b      	orrs	r3, r1
 8000e06:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d10c      	bne.n	8000e2a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f023 010f 	bic.w	r1, r3, #15
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	1e5a      	subs	r2, r3, #1
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	430a      	orrs	r2, r1
 8000e26:	631a      	str	r2, [r3, #48]	; 0x30
 8000e28:	e007      	b.n	8000e3a <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 020f 	bic.w	r2, r2, #15
 8000e38:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	f023 0303 	bic.w	r3, r3, #3
 8000e48:	f043 0201 	orr.w	r2, r3, #1
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e50:	e00a      	b.n	8000e68 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f023 0312 	bic.w	r3, r3, #18
 8000e5a:	f043 0210 	orr.w	r2, r3, #16
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e62:	2301      	movs	r3, #1
 8000e64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3768      	adds	r7, #104	; 0x68
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000004 	.word	0x20000004
 8000e78:	431bde83 	.word	0x431bde83
 8000e7c:	50000300 	.word	0x50000300
 8000e80:	fff0c007 	.word	0xfff0c007

08000e84 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d158      	bne.n	8000f50 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d101      	bne.n	8000eac <HAL_ADC_Start+0x28>
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	e054      	b.n	8000f56 <HAL_ADC_Start+0xd2>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 fbd5 	bl	8001664 <ADC_Enable>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d140      	bne.n	8000f46 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ecc:	f023 0301 	bic.w	r3, r3, #1
 8000ed0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d007      	beq.n	8000f02 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000efa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f0e:	d106      	bne.n	8000f1e <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f14:	f023 0206 	bic.w	r2, r3, #6
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	645a      	str	r2, [r3, #68]	; 0x44
 8000f1c:	e002      	b.n	8000f24 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	221c      	movs	r2, #28
 8000f32:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0204 	orr.w	r2, r2, #4
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	e006      	b.n	8000f54 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000f4e:	e001      	b.n	8000f54 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f50:	2302      	movs	r3, #2
 8000f52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d102      	bne.n	8000f7c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000f76:	2308      	movs	r3, #8
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	e02e      	b.n	8000fda <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f7c:	4b56      	ldr	r3, [pc, #344]	; (80010d8 <HAL_ADC_PollForConversion+0x178>)
 8000f7e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 031f 	and.w	r3, r3, #31
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d112      	bne.n	8000fb2 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d11d      	bne.n	8000fd6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f043 0220 	orr.w	r2, r3, #32
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e08d      	b.n	80010ce <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00b      	beq.n	8000fd6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f043 0220 	orr.w	r2, r3, #32
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e07b      	b.n	80010ce <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8000fe2:	f7ff fdbd 	bl	8000b60 <HAL_GetTick>
 8000fe6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fe8:	e021      	b.n	800102e <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff0:	d01d      	beq.n	800102e <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d007      	beq.n	8001008 <HAL_ADC_PollForConversion+0xa8>
 8000ff8:	f7ff fdb2 	bl	8000b60 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	429a      	cmp	r2, r3
 8001006:	d212      	bcs.n	800102e <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	4013      	ands	r3, r2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10b      	bne.n	800102e <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f043 0204 	orr.w	r2, r3, #4
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e04f      	b.n	80010ce <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	4013      	ands	r3, r2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0d6      	beq.n	8000fea <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001052:	2b00      	cmp	r3, #0
 8001054:	d131      	bne.n	80010ba <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800105c:	2b00      	cmp	r3, #0
 800105e:	d12c      	bne.n	80010ba <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b08      	cmp	r3, #8
 800106c:	d125      	bne.n	80010ba <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	2b00      	cmp	r3, #0
 800107a:	d112      	bne.n	80010a2 <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d112      	bne.n	80010ba <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	f043 0201 	orr.w	r2, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	641a      	str	r2, [r3, #64]	; 0x40
 80010a0:	e00b      	b.n	80010ba <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f043 0220 	orr.w	r2, r3, #32
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f043 0201 	orr.w	r2, r3, #1
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d103      	bne.n	80010cc <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	50000300 	.word	0x50000300

080010dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b09b      	sub	sp, #108	; 0x6c
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001112:	2b01      	cmp	r3, #1
 8001114:	d101      	bne.n	800111a <HAL_ADC_ConfigChannel+0x22>
 8001116:	2302      	movs	r3, #2
 8001118:	e299      	b.n	800164e <HAL_ADC_ConfigChannel+0x556>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	f040 827d 	bne.w	800162c <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b04      	cmp	r3, #4
 8001138:	d81c      	bhi.n	8001174 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	461a      	mov	r2, r3
 800114e:	231f      	movs	r3, #31
 8001150:	4093      	lsls	r3, r2
 8001152:	43db      	mvns	r3, r3
 8001154:	4019      	ands	r1, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4413      	add	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa00 f203 	lsl.w	r2, r0, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	430a      	orrs	r2, r1
 8001170:	631a      	str	r2, [r3, #48]	; 0x30
 8001172:	e063      	b.n	800123c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b09      	cmp	r3, #9
 800117a:	d81e      	bhi.n	80011ba <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	3b1e      	subs	r3, #30
 8001190:	221f      	movs	r2, #31
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	4019      	ands	r1, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	3b1e      	subs	r3, #30
 80011ac:	fa00 f203 	lsl.w	r2, r0, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	635a      	str	r2, [r3, #52]	; 0x34
 80011b8:	e040      	b.n	800123c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b0e      	cmp	r3, #14
 80011c0:	d81e      	bhi.n	8001200 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	3b3c      	subs	r3, #60	; 0x3c
 80011d6:	221f      	movs	r2, #31
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	4019      	ands	r1, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	3b3c      	subs	r3, #60	; 0x3c
 80011f2:	fa00 f203 	lsl.w	r2, r0, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	639a      	str	r2, [r3, #56]	; 0x38
 80011fe:	e01d      	b.n	800123c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	3b5a      	subs	r3, #90	; 0x5a
 8001214:	221f      	movs	r2, #31
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	4019      	ands	r1, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	6818      	ldr	r0, [r3, #0]
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	3b5a      	subs	r3, #90	; 0x5a
 8001230:	fa00 f203 	lsl.w	r2, r0, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	430a      	orrs	r2, r1
 800123a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 030c 	and.w	r3, r3, #12
 8001246:	2b00      	cmp	r3, #0
 8001248:	f040 80e5 	bne.w	8001416 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b09      	cmp	r3, #9
 8001252:	d91c      	bls.n	800128e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6999      	ldr	r1, [r3, #24]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4613      	mov	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4413      	add	r3, r2
 8001264:	3b1e      	subs	r3, #30
 8001266:	2207      	movs	r2, #7
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	4019      	ands	r1, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	6898      	ldr	r0, [r3, #8]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	3b1e      	subs	r3, #30
 8001280:	fa00 f203 	lsl.w	r2, r0, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	619a      	str	r2, [r3, #24]
 800128c:	e019      	b.n	80012c2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6959      	ldr	r1, [r3, #20]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4613      	mov	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4413      	add	r3, r2
 800129e:	2207      	movs	r2, #7
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	4019      	ands	r1, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	6898      	ldr	r0, [r3, #8]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	430a      	orrs	r2, r1
 80012c0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	08db      	lsrs	r3, r3, #3
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	3b01      	subs	r3, #1
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d84f      	bhi.n	8001384 <HAL_ADC_ConfigChannel+0x28c>
 80012e4:	a201      	add	r2, pc, #4	; (adr r2, 80012ec <HAL_ADC_ConfigChannel+0x1f4>)
 80012e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ea:	bf00      	nop
 80012ec:	080012fd 	.word	0x080012fd
 80012f0:	0800131f 	.word	0x0800131f
 80012f4:	08001341 	.word	0x08001341
 80012f8:	08001363 	.word	0x08001363
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001302:	4b99      	ldr	r3, [pc, #612]	; (8001568 <HAL_ADC_ConfigChannel+0x470>)
 8001304:	4013      	ands	r3, r2
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	0691      	lsls	r1, r2, #26
 800130c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800130e:	430a      	orrs	r2, r1
 8001310:	431a      	orrs	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800131a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800131c:	e07e      	b.n	800141c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001324:	4b90      	ldr	r3, [pc, #576]	; (8001568 <HAL_ADC_ConfigChannel+0x470>)
 8001326:	4013      	ands	r3, r2
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	6812      	ldr	r2, [r2, #0]
 800132c:	0691      	lsls	r1, r2, #26
 800132e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001330:	430a      	orrs	r2, r1
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800133c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800133e:	e06d      	b.n	800141c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001346:	4b88      	ldr	r3, [pc, #544]	; (8001568 <HAL_ADC_ConfigChannel+0x470>)
 8001348:	4013      	ands	r3, r2
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	0691      	lsls	r1, r2, #26
 8001350:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001352:	430a      	orrs	r2, r1
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800135e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001360:	e05c      	b.n	800141c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001368:	4b7f      	ldr	r3, [pc, #508]	; (8001568 <HAL_ADC_ConfigChannel+0x470>)
 800136a:	4013      	ands	r3, r2
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	0691      	lsls	r1, r2, #26
 8001372:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001374:	430a      	orrs	r2, r1
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001380:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001382:	e04b      	b.n	800141c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	069b      	lsls	r3, r3, #26
 8001394:	429a      	cmp	r2, r3
 8001396:	d107      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013a6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	069b      	lsls	r3, r3, #26
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d107      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013ca:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	069b      	lsls	r3, r3, #26
 80013dc:	429a      	cmp	r2, r3
 80013de:	d107      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013ee:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	069b      	lsls	r3, r3, #26
 8001400:	429a      	cmp	r2, r3
 8001402:	d10a      	bne.n	800141a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001412:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001414:	e001      	b.n	800141a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001416:	bf00      	nop
 8001418:	e000      	b.n	800141c <HAL_ADC_ConfigChannel+0x324>
      break;
 800141a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	2b01      	cmp	r3, #1
 8001428:	d108      	bne.n	800143c <HAL_ADC_ConfigChannel+0x344>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_ADC_ConfigChannel+0x344>
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <HAL_ADC_ConfigChannel+0x346>
 800143c:	2300      	movs	r3, #0
 800143e:	2b00      	cmp	r3, #0
 8001440:	f040 80ff 	bne.w	8001642 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d00f      	beq.n	800146c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2201      	movs	r2, #1
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	400a      	ands	r2, r1
 8001466:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800146a:	e049      	b.n	8001500 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2201      	movs	r2, #1
 800147a:	409a      	lsls	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b09      	cmp	r3, #9
 800148c:	d91c      	bls.n	80014c8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6999      	ldr	r1, [r3, #24]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4613      	mov	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	3b1b      	subs	r3, #27
 80014a0:	2207      	movs	r2, #7
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	4019      	ands	r1, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	6898      	ldr	r0, [r3, #8]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	3b1b      	subs	r3, #27
 80014ba:	fa00 f203 	lsl.w	r2, r0, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	619a      	str	r2, [r3, #24]
 80014c6:	e01b      	b.n	8001500 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6959      	ldr	r1, [r3, #20]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	2207      	movs	r2, #7
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	4019      	ands	r1, r3
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	6898      	ldr	r0, [r3, #8]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	fa00 f203 	lsl.w	r2, r0, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <HAL_ADC_ConfigChannel+0x474>)
 8001502:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b10      	cmp	r3, #16
 800150a:	d105      	bne.n	8001518 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800150c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001514:	2b00      	cmp	r3, #0
 8001516:	d014      	beq.n	8001542 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800151c:	2b11      	cmp	r3, #17
 800151e:	d105      	bne.n	800152c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00a      	beq.n	8001542 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001530:	2b12      	cmp	r3, #18
 8001532:	f040 8086 	bne.w	8001642 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800153e:	2b00      	cmp	r3, #0
 8001540:	d17f      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	2b01      	cmp	r3, #1
 8001552:	d10d      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x478>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b01      	cmp	r3, #1
 8001560:	d106      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x478>
 8001562:	2301      	movs	r3, #1
 8001564:	e005      	b.n	8001572 <HAL_ADC_ConfigChannel+0x47a>
 8001566:	bf00      	nop
 8001568:	83fff000 	.word	0x83fff000
 800156c:	50000300 	.word	0x50000300
 8001570:	2300      	movs	r3, #0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d150      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001576:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001578:	2b00      	cmp	r3, #0
 800157a:	d010      	beq.n	800159e <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b01      	cmp	r3, #1
 8001586:	d107      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x4a0>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x4a0>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <HAL_ADC_ConfigChannel+0x4a2>
 8001598:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800159a:	2b00      	cmp	r3, #0
 800159c:	d13c      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b10      	cmp	r3, #16
 80015a4:	d11d      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x4ea>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ae:	d118      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80015b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ba:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <HAL_ADC_ConfigChannel+0x564>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a27      	ldr	r2, [pc, #156]	; (8001660 <HAL_ADC_ConfigChannel+0x568>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0c9a      	lsrs	r2, r3, #18
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015d2:	e002      	b.n	80015da <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f9      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015e0:	e02e      	b.n	8001640 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b11      	cmp	r3, #17
 80015e8:	d10b      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x50a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015f2:	d106      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80015f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80015fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015fe:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001600:	e01e      	b.n	8001640 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b12      	cmp	r3, #18
 8001608:	d11a      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800160a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001614:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001616:	e013      	b.n	8001640 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f043 0220 	orr.w	r2, r3, #32
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800162a:	e00a      	b.n	8001642 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	f043 0220 	orr.w	r2, r3, #32
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800163e:	e000      	b.n	8001642 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001640:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800164a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800164e:	4618      	mov	r0, r3
 8001650:	376c      	adds	r7, #108	; 0x6c
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000004 	.word	0x20000004
 8001660:	431bde83 	.word	0x431bde83

08001664 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b01      	cmp	r3, #1
 800167c:	d108      	bne.n	8001690 <ADC_Enable+0x2c>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <ADC_Enable+0x2c>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <ADC_Enable+0x2e>
 8001690:	2300      	movs	r3, #0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d143      	bne.n	800171e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <ADC_Enable+0xc4>)
 800169e:	4013      	ands	r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00d      	beq.n	80016c0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f043 0210 	orr.w	r2, r3, #16
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b4:	f043 0201 	orr.w	r2, r3, #1
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e02f      	b.n	8001720 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0201 	orr.w	r2, r2, #1
 80016ce:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80016d0:	f7ff fa46 	bl	8000b60 <HAL_GetTick>
 80016d4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016d6:	e01b      	b.n	8001710 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016d8:	f7ff fa42 	bl	8000b60 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d914      	bls.n	8001710 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d00d      	beq.n	8001710 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	f043 0210 	orr.w	r2, r3, #16
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001704:	f043 0201 	orr.w	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e007      	b.n	8001720 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b01      	cmp	r3, #1
 800171c:	d1dc      	bne.n	80016d8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	8000003f 	.word	0x8000003f

0800172c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d108      	bne.n	8001758 <ADC_Disable+0x2c>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b01      	cmp	r3, #1
 8001752:	d101      	bne.n	8001758 <ADC_Disable+0x2c>
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <ADC_Disable+0x2e>
 8001758:	2300      	movs	r3, #0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d047      	beq.n	80017ee <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 030d 	and.w	r3, r3, #13
 8001768:	2b01      	cmp	r3, #1
 800176a:	d10f      	bne.n	800178c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0202 	orr.w	r2, r2, #2
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2203      	movs	r2, #3
 8001782:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001784:	f7ff f9ec 	bl	8000b60 <HAL_GetTick>
 8001788:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800178a:	e029      	b.n	80017e0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f043 0210 	orr.w	r2, r3, #16
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179c:	f043 0201 	orr.w	r2, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e023      	b.n	80017f0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017a8:	f7ff f9da 	bl	8000b60 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d914      	bls.n	80017e0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d10d      	bne.n	80017e0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f043 0210 	orr.w	r2, r3, #16
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e007      	b.n	80017f0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d0dc      	beq.n	80017a8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001814:	4013      	ands	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182a:	4a04      	ldr	r2, [pc, #16]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	60d3      	str	r3, [r2, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <__NVIC_GetPriorityGrouping+0x18>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	f003 0307 	and.w	r3, r3, #7
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	2b00      	cmp	r3, #0
 800186c:	db0b      	blt.n	8001886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	f003 021f 	and.w	r2, r3, #31
 8001874:	4907      	ldr	r1, [pc, #28]	; (8001894 <__NVIC_EnableIRQ+0x38>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	2001      	movs	r0, #1
 800187e:	fa00 f202 	lsl.w	r2, r0, r2
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000e100 	.word	0xe000e100

08001898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db0a      	blt.n	80018c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	490c      	ldr	r1, [pc, #48]	; (80018e4 <__NVIC_SetPriority+0x4c>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	0112      	lsls	r2, r2, #4
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	440b      	add	r3, r1
 80018bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c0:	e00a      	b.n	80018d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4908      	ldr	r1, [pc, #32]	; (80018e8 <__NVIC_SetPriority+0x50>)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	3b04      	subs	r3, #4
 80018d0:	0112      	lsls	r2, r2, #4
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	440b      	add	r3, r1
 80018d6:	761a      	strb	r2, [r3, #24]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f1c3 0307 	rsb	r3, r3, #7
 8001906:	2b04      	cmp	r3, #4
 8001908:	bf28      	it	cs
 800190a:	2304      	movcs	r3, #4
 800190c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3304      	adds	r3, #4
 8001912:	2b06      	cmp	r3, #6
 8001914:	d902      	bls.n	800191c <NVIC_EncodePriority+0x30>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3b03      	subs	r3, #3
 800191a:	e000      	b.n	800191e <NVIC_EncodePriority+0x32>
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	401a      	ands	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001934:	f04f 31ff 	mov.w	r1, #4294967295
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43d9      	mvns	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	4313      	orrs	r3, r2
         );
}
 8001946:	4618      	mov	r0, r3
 8001948:	3724      	adds	r7, #36	; 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001964:	d301      	bcc.n	800196a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001966:	2301      	movs	r3, #1
 8001968:	e00f      	b.n	800198a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <SysTick_Config+0x40>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001972:	210f      	movs	r1, #15
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	f7ff ff8e 	bl	8001898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <SysTick_Config+0x40>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <SysTick_Config+0x40>)
 8001984:	2207      	movs	r2, #7
 8001986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	e000e010 	.word	0xe000e010

08001998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ff29 	bl	80017f8 <__NVIC_SetPriorityGrouping>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c0:	f7ff ff3e 	bl	8001840 <__NVIC_GetPriorityGrouping>
 80019c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	f7ff ff8e 	bl	80018ec <NVIC_EncodePriority>
 80019d0:	4602      	mov	r2, r0
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff5d 	bl	8001898 <__NVIC_SetPriority>
}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff31 	bl	800185c <__NVIC_EnableIRQ>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffa2 	bl	8001954 <SysTick_Config>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e037      	b.n	8001aa0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f98c 	bl	8001da0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}  
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_DMA_Start_IT+0x20>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e04a      	b.n	8001b5e <HAL_DMA_Start_IT+0xb6>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d13a      	bne.n	8001b50 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2202      	movs	r2, #2
 8001ade:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f91f 	bl	8001d42 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 020e 	orr.w	r2, r2, #14
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	e00f      	b.n	8001b3e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 020a 	orr.w	r2, r2, #10
 8001b2c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0204 	bic.w	r2, r2, #4
 8001b3c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 0201 	orr.w	r2, r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	e005      	b.n	8001b5c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001b5c:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d005      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2204      	movs	r2, #4
 8001b80:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	73fb      	strb	r3, [r7, #15]
 8001b86:	e027      	b.n	8001bd8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 020e 	bic.w	r2, r2, #14
 8001b96:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	4798      	blx	r3
    } 
  }
  return status;
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	2204      	movs	r2, #4
 8001c00:	409a      	lsls	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d024      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x72>
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d01f      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d107      	bne.n	8001c32 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0204 	bic.w	r2, r2, #4
 8001c30:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c40:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d06a      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001c52:	e065      	b.n	8001d20 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	2202      	movs	r2, #2
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d02c      	beq.n	8001cbe <HAL_DMA_IRQHandler+0xdc>
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d027      	beq.n	8001cbe <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0320 	and.w	r3, r3, #32
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10b      	bne.n	8001c94 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 020a 	bic.w	r2, r2, #10
 8001c8a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9c:	2102      	movs	r1, #2
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d035      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001cbc:	e030      	b.n	8001d20 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d028      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x13e>
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d023      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 020e 	bic.w	r2, r2, #14
 8001ce6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d004      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	4798      	blx	r3
    }
  }
}  
 8001d1e:	e7ff      	b.n	8001d20 <HAL_DMA_IRQHandler+0x13e>
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b085      	sub	sp, #20
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d58:	2101      	movs	r1, #1
 8001d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b10      	cmp	r3, #16
 8001d6e:	d108      	bne.n	8001d82 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d80:	e007      	b.n	8001d92 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	60da      	str	r2, [r3, #12]
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <DMA_CalcBaseAndBitshift+0x34>)
 8001db0:	4413      	add	r3, r2
 8001db2:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <DMA_CalcBaseAndBitshift+0x38>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	009a      	lsls	r2, r3, #2
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a06      	ldr	r2, [pc, #24]	; (8001ddc <DMA_CalcBaseAndBitshift+0x3c>)
 8001dc4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	bffdfff8 	.word	0xbffdfff8
 8001dd8:	cccccccd 	.word	0xcccccccd
 8001ddc:	40020000 	.word	0x40020000

08001de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dee:	e14e      	b.n	800208e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	2101      	movs	r1, #1
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 8140 	beq.w	8002088 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d005      	beq.n	8001e20 <HAL_GPIO_Init+0x40>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d130      	bne.n	8001e82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e56:	2201      	movs	r2, #1
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	f003 0201 	and.w	r2, r3, #1
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d017      	beq.n	8001ebe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d123      	bne.n	8001f12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	08da      	lsrs	r2, r3, #3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3208      	adds	r2, #8
 8001ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	691a      	ldr	r2, [r3, #16]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	08da      	lsrs	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3208      	adds	r2, #8
 8001f0c:	6939      	ldr	r1, [r7, #16]
 8001f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0203 	and.w	r2, r3, #3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 809a 	beq.w	8002088 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f54:	4b55      	ldr	r3, [pc, #340]	; (80020ac <HAL_GPIO_Init+0x2cc>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a54      	ldr	r2, [pc, #336]	; (80020ac <HAL_GPIO_Init+0x2cc>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b52      	ldr	r3, [pc, #328]	; (80020ac <HAL_GPIO_Init+0x2cc>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f6c:	4a50      	ldr	r2, [pc, #320]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	3302      	adds	r3, #2
 8001f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f96:	d013      	beq.n	8001fc0 <HAL_GPIO_Init+0x1e0>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a46      	ldr	r2, [pc, #280]	; (80020b4 <HAL_GPIO_Init+0x2d4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00d      	beq.n	8001fbc <HAL_GPIO_Init+0x1dc>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a45      	ldr	r2, [pc, #276]	; (80020b8 <HAL_GPIO_Init+0x2d8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d007      	beq.n	8001fb8 <HAL_GPIO_Init+0x1d8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a44      	ldr	r2, [pc, #272]	; (80020bc <HAL_GPIO_Init+0x2dc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d101      	bne.n	8001fb4 <HAL_GPIO_Init+0x1d4>
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e006      	b.n	8001fc2 <HAL_GPIO_Init+0x1e2>
 8001fb4:	2305      	movs	r3, #5
 8001fb6:	e004      	b.n	8001fc2 <HAL_GPIO_Init+0x1e2>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e002      	b.n	8001fc2 <HAL_GPIO_Init+0x1e2>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_GPIO_Init+0x1e2>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	f002 0203 	and.w	r2, r2, #3
 8001fc8:	0092      	lsls	r2, r2, #2
 8001fca:	4093      	lsls	r3, r2
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fd2:	4937      	ldr	r1, [pc, #220]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe0:	4b37      	ldr	r3, [pc, #220]	; (80020c0 <HAL_GPIO_Init+0x2e0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002004:	4a2e      	ldr	r2, [pc, #184]	; (80020c0 <HAL_GPIO_Init+0x2e0>)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800200a:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <HAL_GPIO_Init+0x2e0>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	43db      	mvns	r3, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800202e:	4a24      	ldr	r2, [pc, #144]	; (80020c0 <HAL_GPIO_Init+0x2e0>)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002034:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <HAL_GPIO_Init+0x2e0>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	43db      	mvns	r3, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002058:	4a19      	ldr	r2, [pc, #100]	; (80020c0 <HAL_GPIO_Init+0x2e0>)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <HAL_GPIO_Init+0x2e0>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	43db      	mvns	r3, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002082:	4a0f      	ldr	r2, [pc, #60]	; (80020c0 <HAL_GPIO_Init+0x2e0>)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	3301      	adds	r3, #1
 800208c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	f47f aea9 	bne.w	8001df0 <HAL_GPIO_Init+0x10>
  }
}
 800209e:	bf00      	nop
 80020a0:	371c      	adds	r7, #28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40010000 	.word	0x40010000
 80020b4:	48000400 	.word	0x48000400
 80020b8:	48000800 	.word	0x48000800
 80020bc:	48000c00 	.word	0x48000c00
 80020c0:	40010400 	.word	0x40010400

080020c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	807b      	strh	r3, [r7, #2]
 80020d0:	4613      	mov	r3, r2
 80020d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020d4:	787b      	ldrb	r3, [r7, #1]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020e0:	e002      	b.n	80020e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d006      	beq.n	8002118 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800210a:	4a05      	ldr	r2, [pc, #20]	; (8002120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800210c:	88fb      	ldrh	r3, [r7, #6]
 800210e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f806 	bl	8002124 <HAL_GPIO_EXTI_Callback>
  }
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40010400 	.word	0x40010400

08002124 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e081      	b.n	8002250 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d106      	bne.n	8002166 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7fe fb57 	bl	8000814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2224      	movs	r2, #36	; 0x24
 800216a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0201 	bic.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800218a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800219a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d107      	bne.n	80021b4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	e006      	b.n	80021c2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d104      	bne.n	80021d4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021d2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69d9      	ldr	r1, [r3, #28]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a1a      	ldr	r2, [r3, #32]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002274:	2b28      	cmp	r3, #40	; 0x28
 8002276:	f040 808a 	bne.w	800238e <HAL_I2C_Slave_Seq_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d105      	bne.n	8002292 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800228c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e07e      	b.n	8002390 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002292:	f248 0101 	movw	r1, #32769	; 0x8001
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f001 f9e0 	bl	800365c <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e072      	b.n	8002390 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b2a      	cmp	r3, #42	; 0x2a
 80022bc:	d12a      	bne.n	8002314 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80022be:	2102      	movs	r1, #2
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f001 f9cb 	bl	800365c <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d4:	d11e      	bne.n	8002314 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022e4:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d012      	beq.n	8002314 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f2:	4a29      	ldr	r2, [pc, #164]	; (8002398 <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
 80022f4:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fc33 	bl	8001b66 <HAL_DMA_Abort_IT>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d006      	beq.n	8002314 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002310:	4610      	mov	r0, r2
 8002312:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2229      	movs	r2, #41	; 0x29
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002338:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	88fa      	ldrh	r2, [r7, #6]
 8002344:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4a10      	ldr	r2, [pc, #64]	; (800239c <HAL_I2C_Slave_Seq_Transmit_IT+0x144>)
 800235a:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	0c1b      	lsrs	r3, r3, #16
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b01      	cmp	r3, #1
 800236e:	d103      	bne.n	8002378 <HAL_I2C_Slave_Seq_Transmit_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2208      	movs	r2, #8
 8002376:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8002380:	f248 0101 	movw	r1, #32769	; 0x8001
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f001 f905 	bl	8003594 <I2C_Enable_IRQ>

    return HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	e000      	b.n	8002390 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
  }
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	080034fb 	.word	0x080034fb
 800239c:	08002687 	.word	0x08002687

080023a0 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023bc:	2b28      	cmp	r3, #40	; 0x28
 80023be:	f040 808a 	bne.w	80024d6 <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d105      	bne.n	80023da <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e07e      	b.n	80024d8 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80023da:	f248 0102 	movw	r1, #32770	; 0x8002
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f001 f93c 	bl	800365c <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e072      	b.n	80024d8 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b29      	cmp	r3, #41	; 0x29
 8002404:	d12a      	bne.n	800245c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002406:	2101      	movs	r1, #1
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f001 f927 	bl	800365c <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800241c:	d11e      	bne.n	800245c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800242c:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	2b00      	cmp	r3, #0
 8002434:	d012      	beq.n	800245c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243a:	4a29      	ldr	r2, [pc, #164]	; (80024e0 <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
 800243c:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fb8f 	bl	8001b66 <HAL_DMA_Abort_IT>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d006      	beq.n	800245c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002458:	4610      	mov	r0, r2
 800245a:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	222a      	movs	r2, #42	; 0x2a
 8002460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002480:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	88fa      	ldrh	r2, [r7, #6]
 800248c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a10      	ldr	r2, [pc, #64]	; (80024e4 <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
 80024a2:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	0c1b      	lsrs	r3, r3, #16
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d103      	bne.n	80024c0 <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2208      	movs	r2, #8
 80024be:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80024c8:	f248 0102 	movw	r1, #32770	; 0x8002
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f001 f861 	bl	8003594 <I2C_Enable_IRQ>

    return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e000      	b.n	80024d8 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
  }
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	080034fb 	.word	0x080034fb
 80024e4:	08002687 	.word	0x08002687

080024e8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	d10d      	bne.n	8002518 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2228      	movs	r2, #40	; 0x28
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a07      	ldr	r2, [pc, #28]	; (8002524 <HAL_I2C_EnableListen_IT+0x3c>)
 8002508:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800250a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f001 f840 	bl	8003594 <I2C_Enable_IRQ>

    return HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	e000      	b.n	800251a <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8002518:	2302      	movs	r3, #2
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	08002687 	.word	0x08002687

08002528 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	68f9      	ldr	r1, [r7, #12]
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4798      	blx	r3
  }
}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d010      	beq.n	80025a2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	09db      	lsrs	r3, r3, #7
 8002584:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002590:	f043 0201 	orr.w	r2, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	0a9b      	lsrs	r3, r3, #10
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d010      	beq.n	80025d0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	09db      	lsrs	r3, r3, #7
 80025b2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f043 0208 	orr.w	r2, r3, #8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	0a5b      	lsrs	r3, r3, #9
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d010      	beq.n	80025fe <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	09db      	lsrs	r3, r3, #7
 80025e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	f043 0202 	orr.w	r2, r3, #2
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025fc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 030b 	and.w	r3, r3, #11
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800260e:	68f9      	ldr	r1, [r7, #12]
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fe57 	bl	80032c4 <I2C_ITError>
  }
}
 8002616:	bf00      	nop
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <I2C_Slave_ISR_IT+0x24>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e0ec      	b.n	8002884 <I2C_Slave_ISR_IT+0x1fe>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	095b      	lsrs	r3, r3, #5
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	095b      	lsrs	r3, r3, #5
 80026c2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80026ca:	6939      	ldr	r1, [r7, #16]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fc99 	bl	8003004 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d04d      	beq.n	800277a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d047      	beq.n	800277a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d128      	bne.n	8002746 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b28      	cmp	r3, #40	; 0x28
 80026fe:	d108      	bne.n	8002712 <I2C_Slave_ISR_IT+0x8c>
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002706:	d104      	bne.n	8002712 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002708:	6939      	ldr	r1, [r7, #16]
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 fd84 	bl	8003218 <I2C_ITListenCplt>
 8002710:	e032      	b.n	8002778 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b29      	cmp	r3, #41	; 0x29
 800271c:	d10e      	bne.n	800273c <I2C_Slave_ISR_IT+0xb6>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002724:	d00a      	beq.n	800273c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2210      	movs	r2, #16
 800272c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 febf 	bl	80034b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fb3d 	bl	8002db4 <I2C_ITSlaveSeqCplt>
 800273a:	e01d      	b.n	8002778 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2210      	movs	r2, #16
 8002742:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002744:	e096      	b.n	8002874 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2210      	movs	r2, #16
 800274c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	f043 0204 	orr.w	r2, r3, #4
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d004      	beq.n	800276a <I2C_Slave_ISR_IT+0xe4>
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002766:	f040 8085 	bne.w	8002874 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	4619      	mov	r1, r3
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 fda7 	bl	80032c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002776:	e07d      	b.n	8002874 <I2C_Slave_ISR_IT+0x1ee>
 8002778:	e07c      	b.n	8002874 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d030      	beq.n	80027e8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800278e:	2b00      	cmp	r3, #0
 8002790:	d02a      	beq.n	80027e8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d14f      	bne.n	8002878 <I2C_Slave_ISR_IT+0x1f2>
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027de:	d04b      	beq.n	8002878 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fae7 	bl	8002db4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80027e6:	e047      	b.n	8002878 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	08db      	lsrs	r3, r3, #3
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	08db      	lsrs	r3, r3, #3
 80027f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d004      	beq.n	800280a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002800:	6939      	ldr	r1, [r7, #16]
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fa15 	bl	8002c32 <I2C_ITAddrCplt>
 8002808:	e037      	b.n	800287a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	085b      	lsrs	r3, r3, #1
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d031      	beq.n	800287a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800281e:	2b00      	cmp	r3, #0
 8002820:	d02b      	beq.n	800287a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d018      	beq.n	800285e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	851a      	strh	r2, [r3, #40]	; 0x28
 800285c:	e00d      	b.n	800287a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002864:	d002      	beq.n	800286c <I2C_Slave_ISR_IT+0x1e6>
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d106      	bne.n	800287a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 faa1 	bl	8002db4 <I2C_ITSlaveSeqCplt>
 8002872:	e002      	b.n	800287a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002874:	bf00      	nop
 8002876:	e000      	b.n	800287a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002878:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af02      	add	r7, sp, #8
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <I2C_Master_ISR_DMA+0x1a>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e0e1      	b.n	8002a6a <I2C_Master_ISR_DMA+0x1de>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d017      	beq.n	80028ea <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d011      	beq.n	80028ea <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2210      	movs	r2, #16
 80028cc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	f043 0204 	orr.w	r2, r3, #4
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80028da:	2120      	movs	r1, #32
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fe59 	bl	8003594 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fde5 	bl	80034b2 <I2C_Flush_TXDR>
 80028e8:	e0ba      	b.n	8002a60 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	09db      	lsrs	r3, r3, #7
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d072      	beq.n	80029dc <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	099b      	lsrs	r3, r3, #6
 80028fa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d06c      	beq.n	80029dc <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002910:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d04e      	beq.n	80029ba <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	b29b      	uxth	r3, r3
 8002924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002928:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	2bff      	cmp	r3, #255	; 0xff
 8002932:	d906      	bls.n	8002942 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	22ff      	movs	r2, #255	; 0xff
 8002938:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800293a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	e010      	b.n	8002964 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002954:	d003      	beq.n	800295e <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	e002      	b.n	8002964 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800295e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002962:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002968:	b2da      	uxtb	r2, r3
 800296a:	8a79      	ldrh	r1, [r7, #18]
 800296c:	2300      	movs	r3, #0
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fde0 	bl	8003538 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b22      	cmp	r3, #34	; 0x22
 8002994:	d108      	bne.n	80029a8 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029a4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80029a6:	e05b      	b.n	8002a60 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029b6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80029b8:	e052      	b.n	8002a60 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029c8:	d003      	beq.n	80029d2 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f9b5 	bl	8002d3a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80029d0:	e046      	b.n	8002a60 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80029d2:	2140      	movs	r1, #64	; 0x40
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 fc75 	bl	80032c4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80029da:	e041      	b.n	8002a60 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d029      	beq.n	8002a3c <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	099b      	lsrs	r3, r3, #6
 80029ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d023      	beq.n	8002a3c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d119      	bne.n	8002a32 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a0c:	d027      	beq.n	8002a5e <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a16:	d108      	bne.n	8002a2a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a26:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002a28:	e019      	b.n	8002a5e <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f985 	bl	8002d3a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002a30:	e015      	b.n	8002a5e <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a32:	2140      	movs	r1, #64	; 0x40
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fc45 	bl	80032c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002a3a:	e010      	b.n	8002a5e <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00b      	beq.n	8002a60 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fa0a 	bl	8002e70 <I2C_ITMasterCplt>
 8002a5c:	e000      	b.n	8002a60 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002a5e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b088      	sub	sp, #32
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <I2C_Slave_ISR_DMA+0x24>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e0c9      	b.n	8002c2a <I2C_Slave_ISR_DMA+0x1b8>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 faa3 	bl	8003004 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 809a 	beq.w	8002c00 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8093 	beq.w	8002c00 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	0b9b      	lsrs	r3, r3, #14
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d105      	bne.n	8002af2 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0bdb      	lsrs	r3, r3, #15
 8002aea:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d07f      	beq.n	8002bf2 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00d      	beq.n	8002b16 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	0bdb      	lsrs	r3, r3, #15
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8002b12:	2301      	movs	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00d      	beq.n	8002b3a <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	0b9b      	lsrs	r3, r3, #14
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8002b36:	2301      	movs	r3, #1
 8002b38:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d128      	bne.n	8002b92 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b28      	cmp	r3, #40	; 0x28
 8002b4a:	d108      	bne.n	8002b5e <I2C_Slave_ISR_DMA+0xec>
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b52:	d104      	bne.n	8002b5e <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fb5e 	bl	8003218 <I2C_ITListenCplt>
 8002b5c:	e048      	b.n	8002bf0 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b29      	cmp	r3, #41	; 0x29
 8002b68:	d10e      	bne.n	8002b88 <I2C_Slave_ISR_DMA+0x116>
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b70:	d00a      	beq.n	8002b88 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2210      	movs	r2, #16
 8002b78:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fc99 	bl	80034b2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f917 	bl	8002db4 <I2C_ITSlaveSeqCplt>
 8002b86:	e033      	b.n	8002bf0 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002b90:	e034      	b.n	8002bfc <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2210      	movs	r2, #16
 8002b98:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f043 0204 	orr.w	r2, r3, #4
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bac:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <I2C_Slave_ISR_DMA+0x14a>
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bba:	d11f      	bne.n	8002bfc <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	2b21      	cmp	r3, #33	; 0x21
 8002bc0:	d002      	beq.n	8002bc8 <I2C_Slave_ISR_DMA+0x156>
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
 8002bc4:	2b29      	cmp	r3, #41	; 0x29
 8002bc6:	d103      	bne.n	8002bd0 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2221      	movs	r2, #33	; 0x21
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
 8002bce:	e008      	b.n	8002be2 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002bd0:	7dfb      	ldrb	r3, [r7, #23]
 8002bd2:	2b22      	cmp	r3, #34	; 0x22
 8002bd4:	d002      	beq.n	8002bdc <I2C_Slave_ISR_DMA+0x16a>
 8002bd6:	7dfb      	ldrb	r3, [r7, #23]
 8002bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8002bda:	d102      	bne.n	8002be2 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2222      	movs	r2, #34	; 0x22
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	4619      	mov	r1, r3
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 fb6b 	bl	80032c4 <I2C_ITError>
      if (treatdmanack == 1U)
 8002bee:	e005      	b.n	8002bfc <I2C_Slave_ISR_DMA+0x18a>
 8002bf0:	e004      	b.n	8002bfc <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002bfa:	e011      	b.n	8002c20 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8002bfc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002bfe:	e00f      	b.n	8002c20 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	08db      	lsrs	r3, r3, #3
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d009      	beq.n	8002c20 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	08db      	lsrs	r3, r3, #3
 8002c10:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f809 	bl	8002c32 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3720      	adds	r7, #32
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c48:	2b28      	cmp	r3, #40	; 0x28
 8002c4a:	d16a      	bne.n	8002d22 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	0c1b      	lsrs	r3, r3, #16
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002c6a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c78:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002c86:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d138      	bne.n	8002d02 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002c90:	897b      	ldrh	r3, [r7, #10]
 8002c92:	09db      	lsrs	r3, r3, #7
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	89bb      	ldrh	r3, [r7, #12]
 8002c98:	4053      	eors	r3, r2
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	f003 0306 	and.w	r3, r3, #6
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d11c      	bne.n	8002cde <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002ca4:	897b      	ldrh	r3, [r7, #10]
 8002ca6:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d13b      	bne.n	8002d32 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002cd0:	89ba      	ldrh	r2, [r7, #12]
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fd fc74 	bl	80005c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002cdc:	e029      	b.n	8002d32 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002cde:	893b      	ldrh	r3, [r7, #8]
 8002ce0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ce2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fcb8 	bl	800365c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002cf4:	89ba      	ldrh	r2, [r7, #12]
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fd fc62 	bl	80005c4 <HAL_I2C_AddrCallback>
}
 8002d00:	e017      	b.n	8002d32 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fca8 	bl	800365c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d14:	89ba      	ldrh	r2, [r7, #12]
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fd fc52 	bl	80005c4 <HAL_I2C_AddrCallback>
}
 8002d20:	e007      	b.n	8002d32 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2208      	movs	r2, #8
 8002d28:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b21      	cmp	r3, #33	; 0x21
 8002d54:	d115      	bne.n	8002d82 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2211      	movs	r2, #17
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fc75 	bl	800365c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff fc4f 	bl	800261e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d80:	e014      	b.n	8002dac <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2212      	movs	r2, #18
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002d96:	2102      	movs	r1, #2
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fc5f 	bl	800365c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff fc43 	bl	8002632 <HAL_I2C_MasterRxCpltCallback>
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	0b9b      	lsrs	r3, r3, #14
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e00d      	b.n	8002e06 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	0bdb      	lsrs	r3, r3, #15
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d007      	beq.n	8002e06 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e04:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b29      	cmp	r3, #41	; 0x29
 8002e10:	d112      	bne.n	8002e38 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2228      	movs	r2, #40	; 0x28
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2221      	movs	r2, #33	; 0x21
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e20:	2101      	movs	r1, #1
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fc1a 	bl	800365c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7fd fc3d 	bl	80006b0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e36:	e017      	b.n	8002e68 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b2a      	cmp	r3, #42	; 0x2a
 8002e42:	d111      	bne.n	8002e68 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2228      	movs	r2, #40	; 0x28
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2222      	movs	r2, #34	; 0x22
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e52:	2102      	movs	r1, #2
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fc01 	bl	800365c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fd fc1a 	bl	800069c <HAL_I2C_SlaveRxCpltCallback>
}
 8002e68:	bf00      	nop
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2220      	movs	r2, #32
 8002e84:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b21      	cmp	r3, #33	; 0x21
 8002e90:	d107      	bne.n	8002ea2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e92:	2101      	movs	r1, #1
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fbe1 	bl	800365c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2211      	movs	r2, #17
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
 8002ea0:	e00c      	b.n	8002ebc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b22      	cmp	r3, #34	; 0x22
 8002eac:	d106      	bne.n	8002ebc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002eae:	2102      	movs	r1, #2
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fbd3 	bl	800365c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2212      	movs	r2, #18
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6859      	ldr	r1, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4b4d      	ldr	r3, [pc, #308]	; (8002ffc <I2C_ITMasterCplt+0x18c>)
 8002ec8:	400b      	ands	r3, r1
 8002eca:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a4a      	ldr	r2, [pc, #296]	; (8003000 <I2C_ITMasterCplt+0x190>)
 8002ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	091b      	lsrs	r3, r3, #4
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d009      	beq.n	8002ef8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2210      	movs	r2, #16
 8002eea:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	f043 0204 	orr.w	r2, r3, #4
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b60      	cmp	r3, #96	; 0x60
 8002f02:	d10b      	bne.n	8002f1c <I2C_ITMasterCplt+0xac>
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	089b      	lsrs	r3, r3, #2
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fac8 	bl	80034b2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b60      	cmp	r3, #96	; 0x60
 8002f32:	d002      	beq.n	8002f3a <I2C_ITMasterCplt+0xca>
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d006      	beq.n	8002f48 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f9bf 	bl	80032c4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f46:	e054      	b.n	8002ff2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b21      	cmp	r3, #33	; 0x21
 8002f52:	d124      	bne.n	8002f9e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	d10b      	bne.n	8002f86 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff fb61 	bl	8002646 <HAL_I2C_MemTxCpltCallback>
}
 8002f84:	e035      	b.n	8002ff2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff fb41 	bl	800261e <HAL_I2C_MasterTxCpltCallback>
}
 8002f9c:	e029      	b.n	8002ff2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b22      	cmp	r3, #34	; 0x22
 8002fa8:	d123      	bne.n	8002ff2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b40      	cmp	r3, #64	; 0x40
 8002fc2:	d10b      	bne.n	8002fdc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff fb40 	bl	800265a <HAL_I2C_MemRxCpltCallback>
}
 8002fda:	e00a      	b.n	8002ff2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff fb20 	bl	8002632 <HAL_I2C_MasterRxCpltCallback>
}
 8002ff2:	bf00      	nop
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	fe00e800 	.word	0xfe00e800
 8003000:	ffff0000 	.word	0xffff0000

08003004 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003020:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2220      	movs	r2, #32
 8003028:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	2b21      	cmp	r3, #33	; 0x21
 800302e:	d002      	beq.n	8003036 <I2C_ITSlaveCplt+0x32>
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b29      	cmp	r3, #41	; 0x29
 8003034:	d108      	bne.n	8003048 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003036:	f248 0101 	movw	r1, #32769	; 0x8001
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fb0e 	bl	800365c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2221      	movs	r2, #33	; 0x21
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
 8003046:	e00d      	b.n	8003064 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	2b22      	cmp	r3, #34	; 0x22
 800304c:	d002      	beq.n	8003054 <I2C_ITSlaveCplt+0x50>
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	2b2a      	cmp	r3, #42	; 0x2a
 8003052:	d107      	bne.n	8003064 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003054:	f248 0102 	movw	r1, #32770	; 0x8002
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 faff 	bl	800365c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2222      	movs	r2, #34	; 0x22
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003072:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6859      	ldr	r1, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4b64      	ldr	r3, [pc, #400]	; (8003210 <I2C_ITSlaveCplt+0x20c>)
 8003080:	400b      	ands	r3, r1
 8003082:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fa14 	bl	80034b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	0b9b      	lsrs	r3, r3, #14
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d013      	beq.n	80030be <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030a4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d020      	beq.n	80030f0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030bc:	e018      	b.n	80030f0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	0bdb      	lsrs	r3, r3, #15
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d012      	beq.n	80030f0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d006      	beq.n	80030f0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0304 	bic.w	r3, r3, #4
 8003102:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00c      	beq.n	800313e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	f043 0204 	orr.w	r2, r3, #4
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	2b00      	cmp	r3, #0
 8003168:	d010      	beq.n	800318c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	4619      	mov	r1, r3
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f8a7 	bl	80032c4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b28      	cmp	r3, #40	; 0x28
 8003180:	d141      	bne.n	8003206 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003182:	6979      	ldr	r1, [r7, #20]
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f847 	bl	8003218 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800318a:	e03c      	b.n	8003206 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003194:	d014      	beq.n	80031c0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff fe0c 	bl	8002db4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a1d      	ldr	r2, [pc, #116]	; (8003214 <I2C_ITSlaveCplt+0x210>)
 80031a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7fd fa9c 	bl	80006f6 <HAL_I2C_ListenCpltCallback>
}
 80031be:	e022      	b.n	8003206 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b22      	cmp	r3, #34	; 0x22
 80031ca:	d10e      	bne.n	80031ea <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fd fa5a 	bl	800069c <HAL_I2C_SlaveRxCpltCallback>
}
 80031e8:	e00d      	b.n	8003206 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7fd fa55 	bl	80006b0 <HAL_I2C_SlaveTxCpltCallback>
}
 8003206:	bf00      	nop
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	fe00e800 	.word	0xfe00e800
 8003214:	ffff0000 	.word	0xffff0000

08003218 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a26      	ldr	r2, [pc, #152]	; (80032c0 <I2C_ITListenCplt+0xa8>)
 8003226:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	089b      	lsrs	r3, r3, #2
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d022      	beq.n	8003296 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326c:	2b00      	cmp	r3, #0
 800326e:	d012      	beq.n	8003296 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	3b01      	subs	r3, #1
 8003284:	b29a      	uxth	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f043 0204 	orr.w	r2, r3, #4
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003296:	f248 0103 	movw	r1, #32771	; 0x8003
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f9de 	bl	800365c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2210      	movs	r2, #16
 80032a6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7fd fa20 	bl	80006f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	ffff0000 	.word	0xffff0000

080032c4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a5d      	ldr	r2, [pc, #372]	; (8003458 <I2C_ITError+0x194>)
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b28      	cmp	r3, #40	; 0x28
 80032fa:	d005      	beq.n	8003308 <I2C_ITError+0x44>
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b29      	cmp	r3, #41	; 0x29
 8003300:	d002      	beq.n	8003308 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	2b2a      	cmp	r3, #42	; 0x2a
 8003306:	d10b      	bne.n	8003320 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003308:	2103      	movs	r1, #3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f9a6 	bl	800365c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2228      	movs	r2, #40	; 0x28
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a50      	ldr	r2, [pc, #320]	; (800345c <I2C_ITError+0x198>)
 800331c:	635a      	str	r2, [r3, #52]	; 0x34
 800331e:	e011      	b.n	8003344 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003320:	f248 0103 	movw	r1, #32771	; 0x8003
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f999 	bl	800365c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b60      	cmp	r3, #96	; 0x60
 8003334:	d003      	beq.n	800333e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	2b00      	cmp	r3, #0
 8003350:	d039      	beq.n	80033c6 <I2C_ITError+0x102>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b11      	cmp	r3, #17
 8003356:	d002      	beq.n	800335e <I2C_ITError+0x9a>
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b21      	cmp	r3, #33	; 0x21
 800335c:	d133      	bne.n	80033c6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003368:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800336c:	d107      	bne.n	800337e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800337c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe fcd0 	bl	8001d28 <HAL_DMA_GetState>
 8003388:	4603      	mov	r3, r0
 800338a:	2b01      	cmp	r3, #1
 800338c:	d017      	beq.n	80033be <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	4a33      	ldr	r2, [pc, #204]	; (8003460 <I2C_ITError+0x19c>)
 8003394:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe fbdf 	bl	8001b66 <HAL_DMA_Abort_IT>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d04d      	beq.n	800344a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033b8:	4610      	mov	r0, r2
 80033ba:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033bc:	e045      	b.n	800344a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f850 	bl	8003464 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033c4:	e041      	b.n	800344a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d039      	beq.n	8003442 <I2C_ITError+0x17e>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b12      	cmp	r3, #18
 80033d2:	d002      	beq.n	80033da <I2C_ITError+0x116>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b22      	cmp	r3, #34	; 0x22
 80033d8:	d133      	bne.n	8003442 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e8:	d107      	bne.n	80033fa <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033f8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fe fc92 	bl	8001d28 <HAL_DMA_GetState>
 8003404:	4603      	mov	r3, r0
 8003406:	2b01      	cmp	r3, #1
 8003408:	d017      	beq.n	800343a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340e:	4a14      	ldr	r2, [pc, #80]	; (8003460 <I2C_ITError+0x19c>)
 8003410:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe fba1 	bl	8001b66 <HAL_DMA_Abort_IT>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d011      	beq.n	800344e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003434:	4610      	mov	r0, r2
 8003436:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003438:	e009      	b.n	800344e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f812 	bl	8003464 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003440:	e005      	b.n	800344e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f80e 	bl	8003464 <I2C_TreatErrorCallback>
  }
}
 8003448:	e002      	b.n	8003450 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800344a:	bf00      	nop
 800344c:	e000      	b.n	8003450 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800344e:	bf00      	nop
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	ffff0000 	.word	0xffff0000
 800345c:	08002687 	.word	0x08002687
 8003460:	080034fb 	.word	0x080034fb

08003464 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b60      	cmp	r3, #96	; 0x60
 8003476:	d10e      	bne.n	8003496 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd f93c 	bl	800070c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003494:	e009      	b.n	80034aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7fd f915 	bl	80006d4 <HAL_I2C_ErrorCallback>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d103      	bne.n	80034d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2200      	movs	r2, #0
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d007      	beq.n	80034ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699a      	ldr	r2, [r3, #24]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	619a      	str	r2, [r3, #24]
  }
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	2200      	movs	r2, #0
 8003516:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003524:	2200      	movs	r2, #0
 8003526:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f7ff ff9b 	bl	8003464 <I2C_TreatErrorCallback>
}
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	460b      	mov	r3, r1
 8003544:	817b      	strh	r3, [r7, #10]
 8003546:	4613      	mov	r3, r2
 8003548:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	0d5b      	lsrs	r3, r3, #21
 8003554:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003558:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <I2C_TransferConfig+0x58>)
 800355a:	430b      	orrs	r3, r1
 800355c:	43db      	mvns	r3, r3
 800355e:	ea02 0103 	and.w	r1, r2, r3
 8003562:	897b      	ldrh	r3, [r7, #10]
 8003564:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003568:	7a7b      	ldrb	r3, [r7, #9]
 800356a:	041b      	lsls	r3, r3, #16
 800356c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	431a      	orrs	r2, r3
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	431a      	orrs	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	03ff63ff 	.word	0x03ff63ff

08003594 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a8:	4a2a      	ldr	r2, [pc, #168]	; (8003654 <I2C_Enable_IRQ+0xc0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d004      	beq.n	80035b8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80035b2:	4a29      	ldr	r2, [pc, #164]	; (8003658 <I2C_Enable_IRQ+0xc4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d11d      	bne.n	80035f4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80035b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	da03      	bge.n	80035c8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80035c6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80035c8:	887b      	ldrh	r3, [r7, #2]
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d103      	bne.n	80035d6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80035d4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80035d6:	887b      	ldrh	r3, [r7, #2]
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d103      	bne.n	80035e4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80035e2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80035e4:	887b      	ldrh	r3, [r7, #2]
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	d125      	bne.n	8003636 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035f0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80035f2:	e020      	b.n	8003636 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80035f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	da03      	bge.n	8003604 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003602:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003604:	887b      	ldrh	r3, [r7, #2]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003614:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003616:	887b      	ldrh	r3, [r7, #2]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003626:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003628:	887b      	ldrh	r3, [r7, #2]
 800362a:	2b20      	cmp	r3, #32
 800362c:	d103      	bne.n	8003636 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f043 0320 	orr.w	r3, r3, #32
 8003634:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6819      	ldr	r1, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	430a      	orrs	r2, r1
 8003644:	601a      	str	r2, [r3, #0]
}
 8003646:	bf00      	nop
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	0800288d 	.word	0x0800288d
 8003658:	08002a73 	.word	0x08002a73

0800365c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800366c:	887b      	ldrh	r3, [r7, #2]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00f      	beq.n	8003696 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800367c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003684:	b2db      	uxtb	r3, r3
 8003686:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800368a:	2b28      	cmp	r3, #40	; 0x28
 800368c:	d003      	beq.n	8003696 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003694:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003696:	887b      	ldrh	r3, [r7, #2]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00f      	beq.n	80036c0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80036a6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036b4:	2b28      	cmp	r3, #40	; 0x28
 80036b6:	d003      	beq.n	80036c0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80036be:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80036c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	da03      	bge.n	80036d0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80036ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80036d0:	887b      	ldrh	r3, [r7, #2]
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d103      	bne.n	80036de <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80036dc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80036de:	887b      	ldrh	r3, [r7, #2]
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d103      	bne.n	80036ec <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f043 0320 	orr.w	r3, r3, #32
 80036ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80036ec:	887b      	ldrh	r3, [r7, #2]
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	d103      	bne.n	80036fa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036f8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6819      	ldr	r1, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	43da      	mvns	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	400a      	ands	r2, r1
 800370a:	601a      	str	r2, [r3, #0]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b20      	cmp	r3, #32
 800372c:	d138      	bne.n	80037a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003738:	2302      	movs	r3, #2
 800373a:	e032      	b.n	80037a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800376a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6819      	ldr	r1, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d139      	bne.n	8003838 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e033      	b.n	800383a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2224      	movs	r2, #36	; 0x24
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0201 	bic.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003800:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	e000      	b.n	800383a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800384e:	af00      	add	r7, sp, #0
 8003850:	1d3b      	adds	r3, r7, #4
 8003852:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003854:	1d3b      	adds	r3, r7, #4
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d102      	bne.n	8003862 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	f000 bef4 	b.w	800464a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003862:	1d3b      	adds	r3, r7, #4
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 816a 	beq.w	8003b46 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003872:	4bb3      	ldr	r3, [pc, #716]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b04      	cmp	r3, #4
 800387c:	d00c      	beq.n	8003898 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800387e:	4bb0      	ldr	r3, [pc, #704]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b08      	cmp	r3, #8
 8003888:	d159      	bne.n	800393e <HAL_RCC_OscConfig+0xf6>
 800388a:	4bad      	ldr	r3, [pc, #692]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003896:	d152      	bne.n	800393e <HAL_RCC_OscConfig+0xf6>
 8003898:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800389c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80038a4:	fa93 f3a3 	rbit	r3, r3
 80038a8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038ac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b0:	fab3 f383 	clz	r3, r3
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d102      	bne.n	80038ca <HAL_RCC_OscConfig+0x82>
 80038c4:	4b9e      	ldr	r3, [pc, #632]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	e015      	b.n	80038f6 <HAL_RCC_OscConfig+0xae>
 80038ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038ce:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80038de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038e2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80038e6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80038f2:	4b93      	ldr	r3, [pc, #588]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038fa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80038fe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003902:	fa92 f2a2 	rbit	r2, r2
 8003906:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800390a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800390e:	fab2 f282 	clz	r2, r2
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	f042 0220 	orr.w	r2, r2, #32
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	f002 021f 	and.w	r2, r2, #31
 800391e:	2101      	movs	r1, #1
 8003920:	fa01 f202 	lsl.w	r2, r1, r2
 8003924:	4013      	ands	r3, r2
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 810c 	beq.w	8003b44 <HAL_RCC_OscConfig+0x2fc>
 800392c:	1d3b      	adds	r3, r7, #4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f040 8106 	bne.w	8003b44 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	f000 be86 	b.w	800464a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800393e:	1d3b      	adds	r3, r7, #4
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003948:	d106      	bne.n	8003958 <HAL_RCC_OscConfig+0x110>
 800394a:	4b7d      	ldr	r3, [pc, #500]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a7c      	ldr	r2, [pc, #496]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e030      	b.n	80039ba <HAL_RCC_OscConfig+0x172>
 8003958:	1d3b      	adds	r3, r7, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10c      	bne.n	800397c <HAL_RCC_OscConfig+0x134>
 8003962:	4b77      	ldr	r3, [pc, #476]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a76      	ldr	r2, [pc, #472]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 8003968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4b74      	ldr	r3, [pc, #464]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a73      	ldr	r2, [pc, #460]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 8003974:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e01e      	b.n	80039ba <HAL_RCC_OscConfig+0x172>
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003986:	d10c      	bne.n	80039a2 <HAL_RCC_OscConfig+0x15a>
 8003988:	4b6d      	ldr	r3, [pc, #436]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a6c      	ldr	r2, [pc, #432]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 800398e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	4b6a      	ldr	r3, [pc, #424]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a69      	ldr	r2, [pc, #420]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 800399a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	e00b      	b.n	80039ba <HAL_RCC_OscConfig+0x172>
 80039a2:	4b67      	ldr	r3, [pc, #412]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a66      	ldr	r2, [pc, #408]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 80039a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	4b64      	ldr	r3, [pc, #400]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a63      	ldr	r2, [pc, #396]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 80039b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039ba:	4b61      	ldr	r3, [pc, #388]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	f023 020f 	bic.w	r2, r3, #15
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	495d      	ldr	r1, [pc, #372]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039ce:	1d3b      	adds	r3, r7, #4
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d059      	beq.n	8003a8c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7fd f8c2 	bl	8000b60 <HAL_GetTick>
 80039dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e0:	e00a      	b.n	80039f8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e2:	f7fd f8bd 	bl	8000b60 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b64      	cmp	r3, #100	; 0x64
 80039f0:	d902      	bls.n	80039f8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	f000 be29 	b.w	800464a <HAL_RCC_OscConfig+0xe02>
 80039f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039fc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a00:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003a04:	fa93 f3a3 	rbit	r3, r3
 8003a08:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003a0c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a10:	fab3 f383 	clz	r3, r3
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d102      	bne.n	8003a2a <HAL_RCC_OscConfig+0x1e2>
 8003a24:	4b46      	ldr	r3, [pc, #280]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	e015      	b.n	8003a56 <HAL_RCC_OscConfig+0x20e>
 8003a2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a2e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003a36:	fa93 f3a3 	rbit	r3, r3
 8003a3a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a42:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003a46:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003a52:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a5a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003a5e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003a62:	fa92 f2a2 	rbit	r2, r2
 8003a66:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003a6a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003a6e:	fab2 f282 	clz	r2, r2
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	f042 0220 	orr.w	r2, r2, #32
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	f002 021f 	and.w	r2, r2, #31
 8003a7e:	2101      	movs	r1, #1
 8003a80:	fa01 f202 	lsl.w	r2, r1, r2
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0ab      	beq.n	80039e2 <HAL_RCC_OscConfig+0x19a>
 8003a8a:	e05c      	b.n	8003b46 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fd f868 	bl	8000b60 <HAL_GetTick>
 8003a90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a94:	e00a      	b.n	8003aac <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a96:	f7fd f863 	bl	8000b60 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d902      	bls.n	8003aac <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	f000 bdcf 	b.w	800464a <HAL_RCC_OscConfig+0xe02>
 8003aac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ab0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003ac0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac4:	fab3 f383 	clz	r3, r3
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d102      	bne.n	8003ade <HAL_RCC_OscConfig+0x296>
 8003ad8:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	e015      	b.n	8003b0a <HAL_RCC_OscConfig+0x2c2>
 8003ade:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ae2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003af2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003af6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003afa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003afe:	fa93 f3a3 	rbit	r3, r3
 8003b02:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003b06:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <HAL_RCC_OscConfig+0x2f8>)
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b0e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003b12:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003b16:	fa92 f2a2 	rbit	r2, r2
 8003b1a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003b1e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003b22:	fab2 f282 	clz	r2, r2
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	f042 0220 	orr.w	r2, r2, #32
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	f002 021f 	and.w	r2, r2, #31
 8003b32:	2101      	movs	r1, #1
 8003b34:	fa01 f202 	lsl.w	r2, r1, r2
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1ab      	bne.n	8003a96 <HAL_RCC_OscConfig+0x24e>
 8003b3e:	e002      	b.n	8003b46 <HAL_RCC_OscConfig+0x2fe>
 8003b40:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b46:	1d3b      	adds	r3, r7, #4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 816f 	beq.w	8003e34 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b56:	4bd0      	ldr	r3, [pc, #832]	; (8003e98 <HAL_RCC_OscConfig+0x650>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b62:	4bcd      	ldr	r3, [pc, #820]	; (8003e98 <HAL_RCC_OscConfig+0x650>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d16c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x400>
 8003b6e:	4bca      	ldr	r3, [pc, #808]	; (8003e98 <HAL_RCC_OscConfig+0x650>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d166      	bne.n	8003c48 <HAL_RCC_OscConfig+0x400>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003b84:	fa93 f3a3 	rbit	r3, r3
 8003b88:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003b8c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b90:	fab3 f383 	clz	r3, r3
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d102      	bne.n	8003baa <HAL_RCC_OscConfig+0x362>
 8003ba4:	4bbc      	ldr	r3, [pc, #752]	; (8003e98 <HAL_RCC_OscConfig+0x650>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	e013      	b.n	8003bd2 <HAL_RCC_OscConfig+0x38a>
 8003baa:	2302      	movs	r3, #2
 8003bac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003bb4:	fa93 f3a3 	rbit	r3, r3
 8003bb8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003bc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bc6:	fa93 f3a3 	rbit	r3, r3
 8003bca:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003bce:	4bb2      	ldr	r3, [pc, #712]	; (8003e98 <HAL_RCC_OscConfig+0x650>)
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003bd8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003bdc:	fa92 f2a2 	rbit	r2, r2
 8003be0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003be4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003be8:	fab2 f282 	clz	r2, r2
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	f042 0220 	orr.w	r2, r2, #32
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	f002 021f 	and.w	r2, r2, #31
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <HAL_RCC_OscConfig+0x3cc>
 8003c04:	1d3b      	adds	r3, r7, #4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d002      	beq.n	8003c14 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	f000 bd1b 	b.w	800464a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c14:	4ba0      	ldr	r3, [pc, #640]	; (8003e98 <HAL_RCC_OscConfig+0x650>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1c:	1d3b      	adds	r3, r7, #4
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	21f8      	movs	r1, #248	; 0xf8
 8003c24:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c28:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003c2c:	fa91 f1a1 	rbit	r1, r1
 8003c30:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003c34:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003c38:	fab1 f181 	clz	r1, r1
 8003c3c:	b2c9      	uxtb	r1, r1
 8003c3e:	408b      	lsls	r3, r1
 8003c40:	4995      	ldr	r1, [pc, #596]	; (8003e98 <HAL_RCC_OscConfig+0x650>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c46:	e0f5      	b.n	8003e34 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c48:	1d3b      	adds	r3, r7, #4
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 8085 	beq.w	8003d5e <HAL_RCC_OscConfig+0x516>
 8003c54:	2301      	movs	r3, #1
 8003c56:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003c66:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c6a:	fab3 f383 	clz	r3, r3
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fc ff6e 	bl	8000b60 <HAL_GetTick>
 8003c84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c88:	e00a      	b.n	8003ca0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c8a:	f7fc ff69 	bl	8000b60 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d902      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	f000 bcd5 	b.w	800464a <HAL_RCC_OscConfig+0xe02>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003caa:	fa93 f3a3 	rbit	r3, r3
 8003cae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003cb2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb6:	fab3 f383 	clz	r3, r3
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d102      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x488>
 8003cca:	4b73      	ldr	r3, [pc, #460]	; (8003e98 <HAL_RCC_OscConfig+0x650>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	e013      	b.n	8003cf8 <HAL_RCC_OscConfig+0x4b0>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003cda:	fa93 f3a3 	rbit	r3, r3
 8003cde:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003ce8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003cec:	fa93 f3a3 	rbit	r3, r3
 8003cf0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003cf4:	4b68      	ldr	r3, [pc, #416]	; (8003e98 <HAL_RCC_OscConfig+0x650>)
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003cfe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003d02:	fa92 f2a2 	rbit	r2, r2
 8003d06:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003d0a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003d0e:	fab2 f282 	clz	r2, r2
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	f042 0220 	orr.w	r2, r2, #32
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	f002 021f 	and.w	r2, r2, #31
 8003d1e:	2101      	movs	r1, #1
 8003d20:	fa01 f202 	lsl.w	r2, r1, r2
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0af      	beq.n	8003c8a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2a:	4b5b      	ldr	r3, [pc, #364]	; (8003e98 <HAL_RCC_OscConfig+0x650>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d32:	1d3b      	adds	r3, r7, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	21f8      	movs	r1, #248	; 0xf8
 8003d3a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003d42:	fa91 f1a1 	rbit	r1, r1
 8003d46:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003d4a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003d4e:	fab1 f181 	clz	r1, r1
 8003d52:	b2c9      	uxtb	r1, r1
 8003d54:	408b      	lsls	r3, r1
 8003d56:	4950      	ldr	r1, [pc, #320]	; (8003e98 <HAL_RCC_OscConfig+0x650>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	600b      	str	r3, [r1, #0]
 8003d5c:	e06a      	b.n	8003e34 <HAL_RCC_OscConfig+0x5ec>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003d68:	fa93 f3a3 	rbit	r3, r3
 8003d6c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003d70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d74:	fab3 f383 	clz	r3, r3
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	461a      	mov	r2, r3
 8003d86:	2300      	movs	r3, #0
 8003d88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8a:	f7fc fee9 	bl	8000b60 <HAL_GetTick>
 8003d8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d94:	f7fc fee4 	bl	8000b60 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d902      	bls.n	8003daa <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	f000 bc50 	b.w	800464a <HAL_RCC_OscConfig+0xe02>
 8003daa:	2302      	movs	r3, #2
 8003dac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003db4:	fa93 f3a3 	rbit	r3, r3
 8003db8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc0:	fab3 f383 	clz	r3, r3
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d102      	bne.n	8003dda <HAL_RCC_OscConfig+0x592>
 8003dd4:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <HAL_RCC_OscConfig+0x650>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	e013      	b.n	8003e02 <HAL_RCC_OscConfig+0x5ba>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003de4:	fa93 f3a3 	rbit	r3, r3
 8003de8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003dec:	2302      	movs	r3, #2
 8003dee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003df2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003df6:	fa93 f3a3 	rbit	r3, r3
 8003dfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003dfe:	4b26      	ldr	r3, [pc, #152]	; (8003e98 <HAL_RCC_OscConfig+0x650>)
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	2202      	movs	r2, #2
 8003e04:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003e08:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003e0c:	fa92 f2a2 	rbit	r2, r2
 8003e10:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003e14:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003e18:	fab2 f282 	clz	r2, r2
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	f042 0220 	orr.w	r2, r2, #32
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	f002 021f 	and.w	r2, r2, #31
 8003e28:	2101      	movs	r1, #1
 8003e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1af      	bne.n	8003d94 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e34:	1d3b      	adds	r3, r7, #4
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80da 	beq.w	8003ff8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e44:	1d3b      	adds	r3, r7, #4
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d069      	beq.n	8003f22 <HAL_RCC_OscConfig+0x6da>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e54:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e58:	fa93 f3a3 	rbit	r3, r3
 8003e5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e64:	fab3 f383 	clz	r3, r3
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_RCC_OscConfig+0x654>)
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	461a      	mov	r2, r3
 8003e74:	2301      	movs	r3, #1
 8003e76:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e78:	f7fc fe72 	bl	8000b60 <HAL_GetTick>
 8003e7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e80:	e00e      	b.n	8003ea0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e82:	f7fc fe6d 	bl	8000b60 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d906      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e3d9      	b.n	800464a <HAL_RCC_OscConfig+0xe02>
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	10908120 	.word	0x10908120
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003eaa:	fa93 f3a3 	rbit	r3, r3
 8003eae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003eb2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	fa93 f2a3 	rbit	r2, r3
 8003ec4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003ece:	2202      	movs	r2, #2
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	fa93 f2a3 	rbit	r2, r3
 8003edc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003ee0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee2:	4ba5      	ldr	r3, [pc, #660]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 8003ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ee6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003eea:	2102      	movs	r1, #2
 8003eec:	6019      	str	r1, [r3, #0]
 8003eee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	fa93 f1a3 	rbit	r1, r3
 8003ef8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003efc:	6019      	str	r1, [r3, #0]
  return result;
 8003efe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	fab3 f383 	clz	r3, r3
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	2101      	movs	r1, #1
 8003f16:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0b0      	beq.n	8003e82 <HAL_RCC_OscConfig+0x63a>
 8003f20:	e06a      	b.n	8003ff8 <HAL_RCC_OscConfig+0x7b0>
 8003f22:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003f26:	2201      	movs	r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	fa93 f2a3 	rbit	r2, r3
 8003f34:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003f38:	601a      	str	r2, [r3, #0]
  return result;
 8003f3a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003f3e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f40:	fab3 f383 	clz	r3, r3
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	4b8c      	ldr	r3, [pc, #560]	; (800417c <HAL_RCC_OscConfig+0x934>)
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	461a      	mov	r2, r3
 8003f50:	2300      	movs	r3, #0
 8003f52:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f54:	f7fc fe04 	bl	8000b60 <HAL_GetTick>
 8003f58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f5c:	e009      	b.n	8003f72 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f5e:	f7fc fdff 	bl	8000b60 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e36b      	b.n	800464a <HAL_RCC_OscConfig+0xe02>
 8003f72:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003f76:	2202      	movs	r2, #2
 8003f78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	fa93 f2a3 	rbit	r2, r3
 8003f84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003f8e:	2202      	movs	r2, #2
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	fa93 f2a3 	rbit	r2, r3
 8003f9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	fa93 f2a3 	rbit	r2, r3
 8003fb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003fb8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fba:	4b6f      	ldr	r3, [pc, #444]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 8003fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fbe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	6019      	str	r1, [r3, #0]
 8003fc6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	fa93 f1a3 	rbit	r1, r3
 8003fd0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003fd4:	6019      	str	r1, [r3, #0]
  return result;
 8003fd6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	fab3 f383 	clz	r3, r3
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2101      	movs	r1, #1
 8003fee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1b2      	bne.n	8003f5e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff8:	1d3b      	adds	r3, r7, #4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 8158 	beq.w	80042b8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004008:	2300      	movs	r3, #0
 800400a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400e:	4b5a      	ldr	r3, [pc, #360]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d112      	bne.n	8004040 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401a:	4b57      	ldr	r3, [pc, #348]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	4a56      	ldr	r2, [pc, #344]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 8004020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004024:	61d3      	str	r3, [r2, #28]
 8004026:	4b54      	ldr	r3, [pc, #336]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800402e:	f107 0308 	add.w	r3, r7, #8
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	f107 0308 	add.w	r3, r7, #8
 8004038:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004040:	4b4f      	ldr	r3, [pc, #316]	; (8004180 <HAL_RCC_OscConfig+0x938>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004048:	2b00      	cmp	r3, #0
 800404a:	d11a      	bne.n	8004082 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800404c:	4b4c      	ldr	r3, [pc, #304]	; (8004180 <HAL_RCC_OscConfig+0x938>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a4b      	ldr	r2, [pc, #300]	; (8004180 <HAL_RCC_OscConfig+0x938>)
 8004052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004056:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004058:	f7fc fd82 	bl	8000b60 <HAL_GetTick>
 800405c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004060:	e009      	b.n	8004076 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004062:	f7fc fd7d 	bl	8000b60 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	; 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e2e9      	b.n	800464a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004076:	4b42      	ldr	r3, [pc, #264]	; (8004180 <HAL_RCC_OscConfig+0x938>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0ef      	beq.n	8004062 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004082:	1d3b      	adds	r3, r7, #4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d106      	bne.n	800409a <HAL_RCC_OscConfig+0x852>
 800408c:	4b3a      	ldr	r3, [pc, #232]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4a39      	ldr	r2, [pc, #228]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6213      	str	r3, [r2, #32]
 8004098:	e02f      	b.n	80040fa <HAL_RCC_OscConfig+0x8b2>
 800409a:	1d3b      	adds	r3, r7, #4
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10c      	bne.n	80040be <HAL_RCC_OscConfig+0x876>
 80040a4:	4b34      	ldr	r3, [pc, #208]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	4a33      	ldr	r2, [pc, #204]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	6213      	str	r3, [r2, #32]
 80040b0:	4b31      	ldr	r3, [pc, #196]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	4a30      	ldr	r2, [pc, #192]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 80040b6:	f023 0304 	bic.w	r3, r3, #4
 80040ba:	6213      	str	r3, [r2, #32]
 80040bc:	e01d      	b.n	80040fa <HAL_RCC_OscConfig+0x8b2>
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b05      	cmp	r3, #5
 80040c6:	d10c      	bne.n	80040e2 <HAL_RCC_OscConfig+0x89a>
 80040c8:	4b2b      	ldr	r3, [pc, #172]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	4a2a      	ldr	r2, [pc, #168]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 80040ce:	f043 0304 	orr.w	r3, r3, #4
 80040d2:	6213      	str	r3, [r2, #32]
 80040d4:	4b28      	ldr	r3, [pc, #160]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	4a27      	ldr	r2, [pc, #156]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	6213      	str	r3, [r2, #32]
 80040e0:	e00b      	b.n	80040fa <HAL_RCC_OscConfig+0x8b2>
 80040e2:	4b25      	ldr	r3, [pc, #148]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	4a24      	ldr	r2, [pc, #144]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	6213      	str	r3, [r2, #32]
 80040ee:	4b22      	ldr	r3, [pc, #136]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	4a21      	ldr	r2, [pc, #132]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 80040f4:	f023 0304 	bic.w	r3, r3, #4
 80040f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040fa:	1d3b      	adds	r3, r7, #4
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d06b      	beq.n	80041dc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004104:	f7fc fd2c 	bl	8000b60 <HAL_GetTick>
 8004108:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410c:	e00b      	b.n	8004126 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410e:	f7fc fd27 	bl	8000b60 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	; 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e291      	b.n	800464a <HAL_RCC_OscConfig+0xe02>
 8004126:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800412a:	2202      	movs	r2, #2
 800412c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	fa93 f2a3 	rbit	r2, r3
 8004138:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004142:	2202      	movs	r2, #2
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	fa93 f2a3 	rbit	r2, r3
 8004150:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004154:	601a      	str	r2, [r3, #0]
  return result;
 8004156:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800415a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800415c:	fab3 f383 	clz	r3, r3
 8004160:	b2db      	uxtb	r3, r3
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	b2db      	uxtb	r3, r3
 8004166:	f043 0302 	orr.w	r3, r3, #2
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d109      	bne.n	8004184 <HAL_RCC_OscConfig+0x93c>
 8004170:	4b01      	ldr	r3, [pc, #4]	; (8004178 <HAL_RCC_OscConfig+0x930>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	e014      	b.n	80041a0 <HAL_RCC_OscConfig+0x958>
 8004176:	bf00      	nop
 8004178:	40021000 	.word	0x40021000
 800417c:	10908120 	.word	0x10908120
 8004180:	40007000 	.word	0x40007000
 8004184:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004188:	2202      	movs	r2, #2
 800418a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	fa93 f2a3 	rbit	r2, r3
 8004196:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	4bbb      	ldr	r3, [pc, #748]	; (800448c <HAL_RCC_OscConfig+0xc44>)
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80041a4:	2102      	movs	r1, #2
 80041a6:	6011      	str	r1, [r2, #0]
 80041a8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80041ac:	6812      	ldr	r2, [r2, #0]
 80041ae:	fa92 f1a2 	rbit	r1, r2
 80041b2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80041b6:	6011      	str	r1, [r2, #0]
  return result;
 80041b8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	fab2 f282 	clz	r2, r2
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	f002 021f 	and.w	r2, r2, #31
 80041ce:	2101      	movs	r1, #1
 80041d0:	fa01 f202 	lsl.w	r2, r1, r2
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d099      	beq.n	800410e <HAL_RCC_OscConfig+0x8c6>
 80041da:	e063      	b.n	80042a4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041dc:	f7fc fcc0 	bl	8000b60 <HAL_GetTick>
 80041e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e4:	e00b      	b.n	80041fe <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fc fcbb 	bl	8000b60 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e225      	b.n	800464a <HAL_RCC_OscConfig+0xe02>
 80041fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004202:	2202      	movs	r2, #2
 8004204:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004206:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	fa93 f2a3 	rbit	r2, r3
 8004210:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800421a:	2202      	movs	r2, #2
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	fa93 f2a3 	rbit	r2, r3
 8004228:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800422c:	601a      	str	r2, [r3, #0]
  return result;
 800422e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004232:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004234:	fab3 f383 	clz	r3, r3
 8004238:	b2db      	uxtb	r3, r3
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f043 0302 	orr.w	r3, r3, #2
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d102      	bne.n	800424e <HAL_RCC_OscConfig+0xa06>
 8004248:	4b90      	ldr	r3, [pc, #576]	; (800448c <HAL_RCC_OscConfig+0xc44>)
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	e00d      	b.n	800426a <HAL_RCC_OscConfig+0xa22>
 800424e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004252:	2202      	movs	r2, #2
 8004254:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004256:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	fa93 f2a3 	rbit	r2, r3
 8004260:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	4b89      	ldr	r3, [pc, #548]	; (800448c <HAL_RCC_OscConfig+0xc44>)
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800426e:	2102      	movs	r1, #2
 8004270:	6011      	str	r1, [r2, #0]
 8004272:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	fa92 f1a2 	rbit	r1, r2
 800427c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004280:	6011      	str	r1, [r2, #0]
  return result;
 8004282:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	fab2 f282 	clz	r2, r2
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	f002 021f 	and.w	r2, r2, #31
 8004298:	2101      	movs	r1, #1
 800429a:	fa01 f202 	lsl.w	r2, r1, r2
 800429e:	4013      	ands	r3, r2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1a0      	bne.n	80041e6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d105      	bne.n	80042b8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ac:	4b77      	ldr	r3, [pc, #476]	; (800448c <HAL_RCC_OscConfig+0xc44>)
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	4a76      	ldr	r2, [pc, #472]	; (800448c <HAL_RCC_OscConfig+0xc44>)
 80042b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042b8:	1d3b      	adds	r3, r7, #4
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 81c2 	beq.w	8004648 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042c4:	4b71      	ldr	r3, [pc, #452]	; (800448c <HAL_RCC_OscConfig+0xc44>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 030c 	and.w	r3, r3, #12
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	f000 819c 	beq.w	800460a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d2:	1d3b      	adds	r3, r7, #4
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	f040 8114 	bne.w	8004506 <HAL_RCC_OscConfig+0xcbe>
 80042de:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80042e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	fa93 f2a3 	rbit	r2, r3
 80042f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80042f6:	601a      	str	r2, [r3, #0]
  return result;
 80042f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80042fc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fe:	fab3 f383 	clz	r3, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004308:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	461a      	mov	r2, r3
 8004310:	2300      	movs	r3, #0
 8004312:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004314:	f7fc fc24 	bl	8000b60 <HAL_GetTick>
 8004318:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800431c:	e009      	b.n	8004332 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431e:	f7fc fc1f 	bl	8000b60 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e18b      	b.n	800464a <HAL_RCC_OscConfig+0xe02>
 8004332:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004336:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800433a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	fa93 f2a3 	rbit	r2, r3
 8004346:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800434a:	601a      	str	r2, [r3, #0]
  return result;
 800434c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004350:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d102      	bne.n	800436c <HAL_RCC_OscConfig+0xb24>
 8004366:	4b49      	ldr	r3, [pc, #292]	; (800448c <HAL_RCC_OscConfig+0xc44>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	e01b      	b.n	80043a4 <HAL_RCC_OscConfig+0xb5c>
 800436c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004370:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004374:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004376:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	fa93 f2a3 	rbit	r2, r3
 8004380:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800438a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	fa93 f2a3 	rbit	r2, r3
 800439a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	4b3a      	ldr	r3, [pc, #232]	; (800448c <HAL_RCC_OscConfig+0xc44>)
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80043a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043ac:	6011      	str	r1, [r2, #0]
 80043ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	fa92 f1a2 	rbit	r1, r2
 80043b8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80043bc:	6011      	str	r1, [r2, #0]
  return result;
 80043be:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	fab2 f282 	clz	r2, r2
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	f042 0220 	orr.w	r2, r2, #32
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	f002 021f 	and.w	r2, r2, #31
 80043d4:	2101      	movs	r1, #1
 80043d6:	fa01 f202 	lsl.w	r2, r1, r2
 80043da:	4013      	ands	r3, r2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d19e      	bne.n	800431e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e0:	4b2a      	ldr	r3, [pc, #168]	; (800448c <HAL_RCC_OscConfig+0xc44>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80043e8:	1d3b      	adds	r3, r7, #4
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043ee:	1d3b      	adds	r3, r7, #4
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	430b      	orrs	r3, r1
 80043f6:	4925      	ldr	r1, [pc, #148]	; (800448c <HAL_RCC_OscConfig+0xc44>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	604b      	str	r3, [r1, #4]
 80043fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004400:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	fa93 f2a3 	rbit	r2, r3
 8004410:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004414:	601a      	str	r2, [r3, #0]
  return result;
 8004416:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800441a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800441c:	fab3 f383 	clz	r3, r3
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004426:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	461a      	mov	r2, r3
 800442e:	2301      	movs	r3, #1
 8004430:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004432:	f7fc fb95 	bl	8000b60 <HAL_GetTick>
 8004436:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800443a:	e009      	b.n	8004450 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443c:	f7fc fb90 	bl	8000b60 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e0fc      	b.n	800464a <HAL_RCC_OscConfig+0xe02>
 8004450:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004454:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	fa93 f2a3 	rbit	r2, r3
 8004464:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004468:	601a      	str	r2, [r3, #0]
  return result;
 800446a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800446e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004470:	fab3 f383 	clz	r3, r3
 8004474:	b2db      	uxtb	r3, r3
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	b2db      	uxtb	r3, r3
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d105      	bne.n	8004490 <HAL_RCC_OscConfig+0xc48>
 8004484:	4b01      	ldr	r3, [pc, #4]	; (800448c <HAL_RCC_OscConfig+0xc44>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	e01e      	b.n	80044c8 <HAL_RCC_OscConfig+0xc80>
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000
 8004490:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004494:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004498:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	fa93 f2a3 	rbit	r2, r3
 80044a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80044ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	fa93 f2a3 	rbit	r2, r3
 80044be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	4b63      	ldr	r3, [pc, #396]	; (8004654 <HAL_RCC_OscConfig+0xe0c>)
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80044cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044d0:	6011      	str	r1, [r2, #0]
 80044d2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	fa92 f1a2 	rbit	r1, r2
 80044dc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80044e0:	6011      	str	r1, [r2, #0]
  return result;
 80044e2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	fab2 f282 	clz	r2, r2
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	f042 0220 	orr.w	r2, r2, #32
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	f002 021f 	and.w	r2, r2, #31
 80044f8:	2101      	movs	r1, #1
 80044fa:	fa01 f202 	lsl.w	r2, r1, r2
 80044fe:	4013      	ands	r3, r2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d09b      	beq.n	800443c <HAL_RCC_OscConfig+0xbf4>
 8004504:	e0a0      	b.n	8004648 <HAL_RCC_OscConfig+0xe00>
 8004506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800450a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800450e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004510:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	fa93 f2a3 	rbit	r2, r3
 800451a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800451e:	601a      	str	r2, [r3, #0]
  return result;
 8004520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004524:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004526:	fab3 f383 	clz	r3, r3
 800452a:	b2db      	uxtb	r3, r3
 800452c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004530:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	461a      	mov	r2, r3
 8004538:	2300      	movs	r3, #0
 800453a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7fc fb10 	bl	8000b60 <HAL_GetTick>
 8004540:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004544:	e009      	b.n	800455a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004546:	f7fc fb0b 	bl	8000b60 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e077      	b.n	800464a <HAL_RCC_OscConfig+0xe02>
 800455a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800455e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	fa93 f2a3 	rbit	r2, r3
 800456e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004572:	601a      	str	r2, [r3, #0]
  return result;
 8004574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004578:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800457a:	fab3 f383 	clz	r3, r3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f043 0301 	orr.w	r3, r3, #1
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b01      	cmp	r3, #1
 800458c:	d102      	bne.n	8004594 <HAL_RCC_OscConfig+0xd4c>
 800458e:	4b31      	ldr	r3, [pc, #196]	; (8004654 <HAL_RCC_OscConfig+0xe0c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	e01b      	b.n	80045cc <HAL_RCC_OscConfig+0xd84>
 8004594:	f107 0320 	add.w	r3, r7, #32
 8004598:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800459c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459e:	f107 0320 	add.w	r3, r7, #32
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	fa93 f2a3 	rbit	r2, r3
 80045a8:	f107 031c 	add.w	r3, r7, #28
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	f107 0318 	add.w	r3, r7, #24
 80045b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	f107 0318 	add.w	r3, r7, #24
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	fa93 f2a3 	rbit	r2, r3
 80045c2:	f107 0314 	add.w	r3, r7, #20
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	4b22      	ldr	r3, [pc, #136]	; (8004654 <HAL_RCC_OscConfig+0xe0c>)
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	f107 0210 	add.w	r2, r7, #16
 80045d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80045d4:	6011      	str	r1, [r2, #0]
 80045d6:	f107 0210 	add.w	r2, r7, #16
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	fa92 f1a2 	rbit	r1, r2
 80045e0:	f107 020c 	add.w	r2, r7, #12
 80045e4:	6011      	str	r1, [r2, #0]
  return result;
 80045e6:	f107 020c 	add.w	r2, r7, #12
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	fab2 f282 	clz	r2, r2
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	f042 0220 	orr.w	r2, r2, #32
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	f002 021f 	and.w	r2, r2, #31
 80045fc:	2101      	movs	r1, #1
 80045fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004602:	4013      	ands	r3, r2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d19e      	bne.n	8004546 <HAL_RCC_OscConfig+0xcfe>
 8004608:	e01e      	b.n	8004648 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800460a:	1d3b      	adds	r3, r7, #4
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e018      	b.n	800464a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004618:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <HAL_RCC_OscConfig+0xe0c>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004620:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004624:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004628:	1d3b      	adds	r3, r7, #4
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	429a      	cmp	r2, r3
 8004630:	d108      	bne.n	8004644 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004632:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004636:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800463a:	1d3b      	adds	r3, r7, #4
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004640:	429a      	cmp	r2, r3
 8004642:	d001      	beq.n	8004648 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40021000 	.word	0x40021000

08004658 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b09e      	sub	sp, #120	; 0x78
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e162      	b.n	8004936 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004670:	4b90      	ldr	r3, [pc, #576]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d910      	bls.n	80046a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467e:	4b8d      	ldr	r3, [pc, #564]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 0207 	bic.w	r2, r3, #7
 8004686:	498b      	ldr	r1, [pc, #556]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b89      	ldr	r3, [pc, #548]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e14a      	b.n	8004936 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ac:	4b82      	ldr	r3, [pc, #520]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	497f      	ldr	r1, [pc, #508]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 80dc 	beq.w	8004884 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d13c      	bne.n	800474e <HAL_RCC_ClockConfig+0xf6>
 80046d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046dc:	fa93 f3a3 	rbit	r3, r3
 80046e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80046e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e4:	fab3 f383 	clz	r3, r3
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d102      	bne.n	80046fe <HAL_RCC_ClockConfig+0xa6>
 80046f8:	4b6f      	ldr	r3, [pc, #444]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	e00f      	b.n	800471e <HAL_RCC_ClockConfig+0xc6>
 80046fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004702:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004704:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004706:	fa93 f3a3 	rbit	r3, r3
 800470a:	667b      	str	r3, [r7, #100]	; 0x64
 800470c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004710:	663b      	str	r3, [r7, #96]	; 0x60
 8004712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004714:	fa93 f3a3 	rbit	r3, r3
 8004718:	65fb      	str	r3, [r7, #92]	; 0x5c
 800471a:	4b67      	ldr	r3, [pc, #412]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004722:	65ba      	str	r2, [r7, #88]	; 0x58
 8004724:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004726:	fa92 f2a2 	rbit	r2, r2
 800472a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800472c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800472e:	fab2 f282 	clz	r2, r2
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	f042 0220 	orr.w	r2, r2, #32
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	f002 021f 	and.w	r2, r2, #31
 800473e:	2101      	movs	r1, #1
 8004740:	fa01 f202 	lsl.w	r2, r1, r2
 8004744:	4013      	ands	r3, r2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d17b      	bne.n	8004842 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e0f3      	b.n	8004936 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d13c      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x178>
 8004756:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800475a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800475e:	fa93 f3a3 	rbit	r3, r3
 8004762:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004766:	fab3 f383 	clz	r3, r3
 800476a:	b2db      	uxtb	r3, r3
 800476c:	095b      	lsrs	r3, r3, #5
 800476e:	b2db      	uxtb	r3, r3
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b01      	cmp	r3, #1
 8004778:	d102      	bne.n	8004780 <HAL_RCC_ClockConfig+0x128>
 800477a:	4b4f      	ldr	r3, [pc, #316]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	e00f      	b.n	80047a0 <HAL_RCC_ClockConfig+0x148>
 8004780:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004784:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004788:	fa93 f3a3 	rbit	r3, r3
 800478c:	647b      	str	r3, [r7, #68]	; 0x44
 800478e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004792:	643b      	str	r3, [r7, #64]	; 0x40
 8004794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004796:	fa93 f3a3 	rbit	r3, r3
 800479a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800479c:	4b46      	ldr	r3, [pc, #280]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047a4:	63ba      	str	r2, [r7, #56]	; 0x38
 80047a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047a8:	fa92 f2a2 	rbit	r2, r2
 80047ac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80047ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047b0:	fab2 f282 	clz	r2, r2
 80047b4:	b2d2      	uxtb	r2, r2
 80047b6:	f042 0220 	orr.w	r2, r2, #32
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	f002 021f 	and.w	r2, r2, #31
 80047c0:	2101      	movs	r1, #1
 80047c2:	fa01 f202 	lsl.w	r2, r1, r2
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d13a      	bne.n	8004842 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0b2      	b.n	8004936 <HAL_RCC_ClockConfig+0x2de>
 80047d0:	2302      	movs	r3, #2
 80047d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	fa93 f3a3 	rbit	r3, r3
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047de:	fab3 f383 	clz	r3, r3
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d102      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x1a0>
 80047f2:	4b31      	ldr	r3, [pc, #196]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	e00d      	b.n	8004814 <HAL_RCC_ClockConfig+0x1bc>
 80047f8:	2302      	movs	r3, #2
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	fa93 f3a3 	rbit	r3, r3
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
 8004804:	2302      	movs	r3, #2
 8004806:	623b      	str	r3, [r7, #32]
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	fa93 f3a3 	rbit	r3, r3
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	4b29      	ldr	r3, [pc, #164]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	2202      	movs	r2, #2
 8004816:	61ba      	str	r2, [r7, #24]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	fa92 f2a2 	rbit	r2, r2
 800481e:	617a      	str	r2, [r7, #20]
  return result;
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	fab2 f282 	clz	r2, r2
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	f042 0220 	orr.w	r2, r2, #32
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	f002 021f 	and.w	r2, r2, #31
 8004832:	2101      	movs	r1, #1
 8004834:	fa01 f202 	lsl.w	r2, r1, r2
 8004838:	4013      	ands	r3, r2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e079      	b.n	8004936 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004842:	4b1d      	ldr	r3, [pc, #116]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f023 0203 	bic.w	r2, r3, #3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	491a      	ldr	r1, [pc, #104]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004850:	4313      	orrs	r3, r2
 8004852:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004854:	f7fc f984 	bl	8000b60 <HAL_GetTick>
 8004858:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485a:	e00a      	b.n	8004872 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800485c:	f7fc f980 	bl	8000b60 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	f241 3288 	movw	r2, #5000	; 0x1388
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e061      	b.n	8004936 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004872:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 020c 	and.w	r2, r3, #12
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	429a      	cmp	r2, r3
 8004882:	d1eb      	bne.n	800485c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004884:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d214      	bcs.n	80048bc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f023 0207 	bic.w	r2, r3, #7
 800489a:	4906      	ldr	r1, [pc, #24]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	4313      	orrs	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a2:	4b04      	ldr	r3, [pc, #16]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e040      	b.n	8004936 <HAL_RCC_ClockConfig+0x2de>
 80048b4:	40022000 	.word	0x40022000
 80048b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c8:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <HAL_RCC_ClockConfig+0x2e8>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	491a      	ldr	r1, [pc, #104]	; (8004940 <HAL_RCC_ClockConfig+0x2e8>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048e6:	4b16      	ldr	r3, [pc, #88]	; (8004940 <HAL_RCC_ClockConfig+0x2e8>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4912      	ldr	r1, [pc, #72]	; (8004940 <HAL_RCC_ClockConfig+0x2e8>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80048fa:	f000 f829 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 80048fe:	4601      	mov	r1, r0
 8004900:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <HAL_RCC_ClockConfig+0x2e8>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004908:	22f0      	movs	r2, #240	; 0xf0
 800490a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	fa92 f2a2 	rbit	r2, r2
 8004912:	60fa      	str	r2, [r7, #12]
  return result;
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	fab2 f282 	clz	r2, r2
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	40d3      	lsrs	r3, r2
 800491e:	4a09      	ldr	r2, [pc, #36]	; (8004944 <HAL_RCC_ClockConfig+0x2ec>)
 8004920:	5cd3      	ldrb	r3, [r2, r3]
 8004922:	fa21 f303 	lsr.w	r3, r1, r3
 8004926:	4a08      	ldr	r2, [pc, #32]	; (8004948 <HAL_RCC_ClockConfig+0x2f0>)
 8004928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800492a:	4b08      	ldr	r3, [pc, #32]	; (800494c <HAL_RCC_ClockConfig+0x2f4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fc f8d2 	bl	8000ad8 <HAL_InitTick>
  
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3778      	adds	r7, #120	; 0x78
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40021000 	.word	0x40021000
 8004944:	08005af0 	.word	0x08005af0
 8004948:	20000004 	.word	0x20000004
 800494c:	20000008 	.word	0x20000008

08004950 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004950:	b480      	push	{r7}
 8004952:	b08b      	sub	sp, #44	; 0x2c
 8004954:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	2300      	movs	r3, #0
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	2300      	movs	r3, #0
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
 8004962:	2300      	movs	r3, #0
 8004964:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800496a:	4b29      	ldr	r3, [pc, #164]	; (8004a10 <HAL_RCC_GetSysClockFreq+0xc0>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f003 030c 	and.w	r3, r3, #12
 8004976:	2b04      	cmp	r3, #4
 8004978:	d002      	beq.n	8004980 <HAL_RCC_GetSysClockFreq+0x30>
 800497a:	2b08      	cmp	r3, #8
 800497c:	d003      	beq.n	8004986 <HAL_RCC_GetSysClockFreq+0x36>
 800497e:	e03c      	b.n	80049fa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004980:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004982:	623b      	str	r3, [r7, #32]
      break;
 8004984:	e03c      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800498c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004990:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	fa92 f2a2 	rbit	r2, r2
 8004998:	607a      	str	r2, [r7, #4]
  return result;
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	fab2 f282 	clz	r2, r2
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	40d3      	lsrs	r3, r2
 80049a4:	4a1c      	ldr	r2, [pc, #112]	; (8004a18 <HAL_RCC_GetSysClockFreq+0xc8>)
 80049a6:	5cd3      	ldrb	r3, [r2, r3]
 80049a8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80049aa:	4b19      	ldr	r3, [pc, #100]	; (8004a10 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	220f      	movs	r2, #15
 80049b4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	fa92 f2a2 	rbit	r2, r2
 80049bc:	60fa      	str	r2, [r7, #12]
  return result;
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	fab2 f282 	clz	r2, r2
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	40d3      	lsrs	r3, r2
 80049c8:	4a14      	ldr	r2, [pc, #80]	; (8004a1c <HAL_RCC_GetSysClockFreq+0xcc>)
 80049ca:	5cd3      	ldrb	r3, [r2, r3]
 80049cc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80049d8:	4a0e      	ldr	r2, [pc, #56]	; (8004a14 <HAL_RCC_GetSysClockFreq+0xc4>)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	fb02 f303 	mul.w	r3, r2, r3
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
 80049e8:	e004      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	4a0c      	ldr	r2, [pc, #48]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xd0>)
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	623b      	str	r3, [r7, #32]
      break;
 80049f8:	e002      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <HAL_RCC_GetSysClockFreq+0xc4>)
 80049fc:	623b      	str	r3, [r7, #32]
      break;
 80049fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a00:	6a3b      	ldr	r3, [r7, #32]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	372c      	adds	r7, #44	; 0x2c
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000
 8004a14:	007a1200 	.word	0x007a1200
 8004a18:	08005b08 	.word	0x08005b08
 8004a1c:	08005b18 	.word	0x08005b18
 8004a20:	003d0900 	.word	0x003d0900

08004a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a28:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20000004 	.word	0x20000004

08004a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004a42:	f7ff ffef 	bl	8004a24 <HAL_RCC_GetHCLKFreq>
 8004a46:	4601      	mov	r1, r0
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a50:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004a54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	fa92 f2a2 	rbit	r2, r2
 8004a5c:	603a      	str	r2, [r7, #0]
  return result;
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	fab2 f282 	clz	r2, r2
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	40d3      	lsrs	r3, r2
 8004a68:	4a04      	ldr	r2, [pc, #16]	; (8004a7c <HAL_RCC_GetPCLK1Freq+0x40>)
 8004a6a:	5cd3      	ldrb	r3, [r2, r3]
 8004a6c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004a70:	4618      	mov	r0, r3
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	08005b00 	.word	0x08005b00

08004a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004a86:	f7ff ffcd 	bl	8004a24 <HAL_RCC_GetHCLKFreq>
 8004a8a:	4601      	mov	r1, r0
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004a94:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004a98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	fa92 f2a2 	rbit	r2, r2
 8004aa0:	603a      	str	r2, [r7, #0]
  return result;
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	fab2 f282 	clz	r2, r2
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	40d3      	lsrs	r3, r2
 8004aac:	4a04      	ldr	r2, [pc, #16]	; (8004ac0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004aae:	5cd3      	ldrb	r3, [r2, r3]
 8004ab0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	08005b00 	.word	0x08005b00

08004ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b092      	sub	sp, #72	; 0x48
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 80d4 	beq.w	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae8:	4b4e      	ldr	r3, [pc, #312]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10e      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af4:	4b4b      	ldr	r3, [pc, #300]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	4a4a      	ldr	r2, [pc, #296]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afe:	61d3      	str	r3, [r2, #28]
 8004b00:	4b48      	ldr	r3, [pc, #288]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b12:	4b45      	ldr	r3, [pc, #276]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d118      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b1e:	4b42      	ldr	r3, [pc, #264]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a41      	ldr	r2, [pc, #260]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b28:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b2a:	f7fc f819 	bl	8000b60 <HAL_GetTick>
 8004b2e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b30:	e008      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b32:	f7fc f815 	bl	8000b60 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b64      	cmp	r3, #100	; 0x64
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e14b      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b44:	4b38      	ldr	r3, [pc, #224]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b50:	4b34      	ldr	r3, [pc, #208]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b58:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8084 	beq.w	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d07c      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b70:	4b2c      	ldr	r3, [pc, #176]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b82:	fa93 f3a3 	rbit	r3, r3
 8004b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b8a:	fab3 f383 	clz	r3, r3
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	4b26      	ldr	r3, [pc, #152]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	461a      	mov	r2, r3
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ba2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba6:	fa93 f3a3 	rbit	r3, r3
 8004baa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bae:	fab3 f383 	clz	r3, r3
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4b1d      	ldr	r3, [pc, #116]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bb8:	4413      	add	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bc2:	4a18      	ldr	r2, [pc, #96]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d04b      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd2:	f7fb ffc5 	bl	8000b60 <HAL_GetTick>
 8004bd6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd8:	e00a      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bda:	f7fb ffc1 	bl	8000b60 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e0f5      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	fa93 f3a3 	rbit	r3, r3
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	623b      	str	r3, [r7, #32]
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	fa93 f3a3 	rbit	r3, r3
 8004c06:	61fb      	str	r3, [r7, #28]
  return result;
 8004c08:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0a:	fab3 f383 	clz	r3, r3
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f043 0302 	orr.w	r3, r3, #2
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d108      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004c1e:	4b01      	ldr	r3, [pc, #4]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	e00d      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004c24:	40021000 	.word	0x40021000
 8004c28:	40007000 	.word	0x40007000
 8004c2c:	10908100 	.word	0x10908100
 8004c30:	2302      	movs	r3, #2
 8004c32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	fa93 f3a3 	rbit	r3, r3
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	4b69      	ldr	r3, [pc, #420]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	2202      	movs	r2, #2
 8004c42:	613a      	str	r2, [r7, #16]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	fa92 f2a2 	rbit	r2, r2
 8004c4a:	60fa      	str	r2, [r7, #12]
  return result;
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	fab2 f282 	clz	r2, r2
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	f002 021f 	and.w	r2, r2, #31
 8004c5e:	2101      	movs	r1, #1
 8004c60:	fa01 f202 	lsl.w	r2, r1, r2
 8004c64:	4013      	ands	r3, r2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0b7      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004c6a:	4b5e      	ldr	r3, [pc, #376]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	495b      	ldr	r1, [pc, #364]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d105      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c84:	4b57      	ldr	r3, [pc, #348]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	4a56      	ldr	r2, [pc, #344]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d008      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c9c:	4b51      	ldr	r3, [pc, #324]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	f023 0203 	bic.w	r2, r3, #3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	494e      	ldr	r1, [pc, #312]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d008      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cba:	4b4a      	ldr	r3, [pc, #296]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	f023 0210 	bic.w	r2, r3, #16
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	4947      	ldr	r1, [pc, #284]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004cd8:	4b42      	ldr	r3, [pc, #264]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	493f      	ldr	r1, [pc, #252]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d008      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cf6:	4b3b      	ldr	r3, [pc, #236]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	f023 0220 	bic.w	r2, r3, #32
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	4938      	ldr	r1, [pc, #224]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d14:	4b33      	ldr	r3, [pc, #204]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	4930      	ldr	r1, [pc, #192]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d008      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d32:	4b2c      	ldr	r3, [pc, #176]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	4929      	ldr	r1, [pc, #164]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004d50:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	4921      	ldr	r1, [pc, #132]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d008      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004d6e:	4b1d      	ldr	r3, [pc, #116]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	491a      	ldr	r1, [pc, #104]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004d8c:	4b15      	ldr	r3, [pc, #84]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	4912      	ldr	r1, [pc, #72]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004daa:	4b0e      	ldr	r3, [pc, #56]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	490b      	ldr	r1, [pc, #44]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004dc8:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	4903      	ldr	r1, [pc, #12]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3748      	adds	r7, #72	; 0x48
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40021000 	.word	0x40021000

08004de8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e040      	b.n	8004e7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fb fd56 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2224      	movs	r2, #36	; 0x24
 8004e14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0201 	bic.w	r2, r2, #1
 8004e24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f92e 	bl	8005088 <UART_SetConfig>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e022      	b.n	8004e7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 fa5a 	bl	80052f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0201 	orr.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fae1 	bl	800543c <UART_CheckIdleState>
 8004e7a:	4603      	mov	r3, r0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08a      	sub	sp, #40	; 0x28
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	f040 8082 	bne.w	8004fa2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <HAL_UART_Transmit+0x26>
 8004ea4:	88fb      	ldrh	r3, [r7, #6]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e07a      	b.n	8004fa4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_UART_Transmit+0x38>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e073      	b.n	8004fa4 <HAL_UART_Transmit+0x120>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2221      	movs	r2, #33	; 0x21
 8004ed0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ed2:	f7fb fe45 	bl	8000b60 <HAL_GetTick>
 8004ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	88fa      	ldrh	r2, [r7, #6]
 8004edc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	88fa      	ldrh	r2, [r7, #6]
 8004ee4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef0:	d108      	bne.n	8004f04 <HAL_UART_Transmit+0x80>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d104      	bne.n	8004f04 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	e003      	b.n	8004f0c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f14:	e02d      	b.n	8004f72 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2180      	movs	r1, #128	; 0x80
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 fad4 	bl	80054ce <UART_WaitOnFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e039      	b.n	8004fa4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10b      	bne.n	8004f4e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	881a      	ldrh	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f42:	b292      	uxth	r2, r2
 8004f44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	3302      	adds	r3, #2
 8004f4a:	61bb      	str	r3, [r7, #24]
 8004f4c:	e008      	b.n	8004f60 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	781a      	ldrb	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	b292      	uxth	r2, r2
 8004f58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1cb      	bne.n	8004f16 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2200      	movs	r2, #0
 8004f86:	2140      	movs	r1, #64	; 0x40
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 faa0 	bl	80054ce <UART_WaitOnFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e005      	b.n	8004fa4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e000      	b.n	8004fa4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004fa2:	2302      	movs	r3, #2
  }
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3720      	adds	r7, #32
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08a      	sub	sp, #40	; 0x28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d13d      	bne.n	800503e <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <HAL_UART_Receive_DMA+0x22>
 8004fc8:	88fb      	ldrh	r3, [r7, #6]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e036      	b.n	8005040 <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <HAL_UART_Receive_DMA+0x34>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e02f      	b.n	8005040 <HAL_UART_Receive_DMA+0x94>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d018      	beq.n	800502e <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	613b      	str	r3, [r7, #16]
   return(result);
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	623b      	str	r3, [r7, #32]
 800501c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501e:	69f9      	ldr	r1, [r7, #28]
 8005020:	6a3a      	ldr	r2, [r7, #32]
 8005022:	e841 2300 	strex	r3, r2, [r1]
 8005026:	61bb      	str	r3, [r7, #24]
   return(result);
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1e6      	bne.n	8004ffc <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800502e:	88fb      	ldrh	r3, [r7, #6]
 8005030:	461a      	mov	r2, r3
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 fb0f 	bl	8005658 <UART_Start_Receive_DMA>
 800503a:	4603      	mov	r3, r0
 800503c:	e000      	b.n	8005040 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800503e:	2302      	movs	r3, #2
  }
}
 8005040:	4618      	mov	r0, r3
 8005042:	3728      	adds	r7, #40	; 0x28
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4b8b      	ldr	r3, [pc, #556]	; (80052e0 <UART_SetConfig+0x258>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	6979      	ldr	r1, [r7, #20]
 80050bc:	430b      	orrs	r3, r1
 80050be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a79      	ldr	r2, [pc, #484]	; (80052e4 <UART_SetConfig+0x25c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d121      	bne.n	8005148 <UART_SetConfig+0xc0>
 8005104:	4b78      	ldr	r3, [pc, #480]	; (80052e8 <UART_SetConfig+0x260>)
 8005106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	2b03      	cmp	r3, #3
 800510e:	d817      	bhi.n	8005140 <UART_SetConfig+0xb8>
 8005110:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <UART_SetConfig+0x90>)
 8005112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005116:	bf00      	nop
 8005118:	08005129 	.word	0x08005129
 800511c:	08005135 	.word	0x08005135
 8005120:	0800513b 	.word	0x0800513b
 8005124:	0800512f 	.word	0x0800512f
 8005128:	2300      	movs	r3, #0
 800512a:	77fb      	strb	r3, [r7, #31]
 800512c:	e01e      	b.n	800516c <UART_SetConfig+0xe4>
 800512e:	2302      	movs	r3, #2
 8005130:	77fb      	strb	r3, [r7, #31]
 8005132:	e01b      	b.n	800516c <UART_SetConfig+0xe4>
 8005134:	2304      	movs	r3, #4
 8005136:	77fb      	strb	r3, [r7, #31]
 8005138:	e018      	b.n	800516c <UART_SetConfig+0xe4>
 800513a:	2308      	movs	r3, #8
 800513c:	77fb      	strb	r3, [r7, #31]
 800513e:	e015      	b.n	800516c <UART_SetConfig+0xe4>
 8005140:	2310      	movs	r3, #16
 8005142:	77fb      	strb	r3, [r7, #31]
 8005144:	bf00      	nop
 8005146:	e011      	b.n	800516c <UART_SetConfig+0xe4>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a67      	ldr	r2, [pc, #412]	; (80052ec <UART_SetConfig+0x264>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d102      	bne.n	8005158 <UART_SetConfig+0xd0>
 8005152:	2300      	movs	r3, #0
 8005154:	77fb      	strb	r3, [r7, #31]
 8005156:	e009      	b.n	800516c <UART_SetConfig+0xe4>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a64      	ldr	r2, [pc, #400]	; (80052f0 <UART_SetConfig+0x268>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d102      	bne.n	8005168 <UART_SetConfig+0xe0>
 8005162:	2300      	movs	r3, #0
 8005164:	77fb      	strb	r3, [r7, #31]
 8005166:	e001      	b.n	800516c <UART_SetConfig+0xe4>
 8005168:	2310      	movs	r3, #16
 800516a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005174:	d15c      	bne.n	8005230 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8005176:	7ffb      	ldrb	r3, [r7, #31]
 8005178:	2b08      	cmp	r3, #8
 800517a:	d828      	bhi.n	80051ce <UART_SetConfig+0x146>
 800517c:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <UART_SetConfig+0xfc>)
 800517e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005182:	bf00      	nop
 8005184:	080051a9 	.word	0x080051a9
 8005188:	080051b1 	.word	0x080051b1
 800518c:	080051b9 	.word	0x080051b9
 8005190:	080051cf 	.word	0x080051cf
 8005194:	080051bf 	.word	0x080051bf
 8005198:	080051cf 	.word	0x080051cf
 800519c:	080051cf 	.word	0x080051cf
 80051a0:	080051cf 	.word	0x080051cf
 80051a4:	080051c7 	.word	0x080051c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a8:	f7ff fc48 	bl	8004a3c <HAL_RCC_GetPCLK1Freq>
 80051ac:	61b8      	str	r0, [r7, #24]
        break;
 80051ae:	e013      	b.n	80051d8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051b0:	f7ff fc66 	bl	8004a80 <HAL_RCC_GetPCLK2Freq>
 80051b4:	61b8      	str	r0, [r7, #24]
        break;
 80051b6:	e00f      	b.n	80051d8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b8:	4b4e      	ldr	r3, [pc, #312]	; (80052f4 <UART_SetConfig+0x26c>)
 80051ba:	61bb      	str	r3, [r7, #24]
        break;
 80051bc:	e00c      	b.n	80051d8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051be:	f7ff fbc7 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 80051c2:	61b8      	str	r0, [r7, #24]
        break;
 80051c4:	e008      	b.n	80051d8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ca:	61bb      	str	r3, [r7, #24]
        break;
 80051cc:	e004      	b.n	80051d8 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	77bb      	strb	r3, [r7, #30]
        break;
 80051d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d074      	beq.n	80052c8 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	005a      	lsls	r2, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	085b      	lsrs	r3, r3, #1
 80051e8:	441a      	add	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b0f      	cmp	r3, #15
 80051fa:	d916      	bls.n	800522a <UART_SetConfig+0x1a2>
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005202:	d212      	bcs.n	800522a <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f023 030f 	bic.w	r3, r3, #15
 800520c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	085b      	lsrs	r3, r3, #1
 8005212:	b29b      	uxth	r3, r3
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	b29a      	uxth	r2, r3
 800521a:	89fb      	ldrh	r3, [r7, #14]
 800521c:	4313      	orrs	r3, r2
 800521e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	89fa      	ldrh	r2, [r7, #14]
 8005226:	60da      	str	r2, [r3, #12]
 8005228:	e04e      	b.n	80052c8 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	77bb      	strb	r3, [r7, #30]
 800522e:	e04b      	b.n	80052c8 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005230:	7ffb      	ldrb	r3, [r7, #31]
 8005232:	2b08      	cmp	r3, #8
 8005234:	d827      	bhi.n	8005286 <UART_SetConfig+0x1fe>
 8005236:	a201      	add	r2, pc, #4	; (adr r2, 800523c <UART_SetConfig+0x1b4>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	08005261 	.word	0x08005261
 8005240:	08005269 	.word	0x08005269
 8005244:	08005271 	.word	0x08005271
 8005248:	08005287 	.word	0x08005287
 800524c:	08005277 	.word	0x08005277
 8005250:	08005287 	.word	0x08005287
 8005254:	08005287 	.word	0x08005287
 8005258:	08005287 	.word	0x08005287
 800525c:	0800527f 	.word	0x0800527f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005260:	f7ff fbec 	bl	8004a3c <HAL_RCC_GetPCLK1Freq>
 8005264:	61b8      	str	r0, [r7, #24]
        break;
 8005266:	e013      	b.n	8005290 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005268:	f7ff fc0a 	bl	8004a80 <HAL_RCC_GetPCLK2Freq>
 800526c:	61b8      	str	r0, [r7, #24]
        break;
 800526e:	e00f      	b.n	8005290 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005270:	4b20      	ldr	r3, [pc, #128]	; (80052f4 <UART_SetConfig+0x26c>)
 8005272:	61bb      	str	r3, [r7, #24]
        break;
 8005274:	e00c      	b.n	8005290 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005276:	f7ff fb6b 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 800527a:	61b8      	str	r0, [r7, #24]
        break;
 800527c:	e008      	b.n	8005290 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800527e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005282:	61bb      	str	r3, [r7, #24]
        break;
 8005284:	e004      	b.n	8005290 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	77bb      	strb	r3, [r7, #30]
        break;
 800528e:	bf00      	nop
    }

    if (pclk != 0U)
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d018      	beq.n	80052c8 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	085a      	lsrs	r2, r3, #1
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	441a      	add	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b0f      	cmp	r3, #15
 80052b0:	d908      	bls.n	80052c4 <UART_SetConfig+0x23c>
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b8:	d204      	bcs.n	80052c4 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	60da      	str	r2, [r3, #12]
 80052c2:	e001      	b.n	80052c8 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80052d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3720      	adds	r7, #32
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	efff69f3 	.word	0xefff69f3
 80052e4:	40013800 	.word	0x40013800
 80052e8:	40021000 	.word	0x40021000
 80052ec:	40004400 	.word	0x40004400
 80052f0:	40004800 	.word	0x40004800
 80052f4:	007a1200 	.word	0x007a1200

080052f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00a      	beq.n	8005322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	f003 0308 	and.w	r3, r3, #8
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	f003 0310 	and.w	r3, r3, #16
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	f003 0320 	and.w	r3, r3, #32
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01a      	beq.n	800540e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053f6:	d10a      	bne.n	800540e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	605a      	str	r2, [r3, #4]
  }
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af02      	add	r7, sp, #8
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800544c:	f7fb fb88 	bl	8000b60 <HAL_GetTick>
 8005450:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0308 	and.w	r3, r3, #8
 800545c:	2b08      	cmp	r3, #8
 800545e:	d10e      	bne.n	800547e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f82d 	bl	80054ce <UART_WaitOnFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e023      	b.n	80054c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b04      	cmp	r3, #4
 800548a:	d10e      	bne.n	80054aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800548c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f817 	bl	80054ce <UART_WaitOnFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e00d      	b.n	80054c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b09c      	sub	sp, #112	; 0x70
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	603b      	str	r3, [r7, #0]
 80054da:	4613      	mov	r3, r2
 80054dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054de:	e0a5      	b.n	800562c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e6:	f000 80a1 	beq.w	800562c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ea:	f7fb fb39 	bl	8000b60 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d302      	bcc.n	8005500 <UART_WaitOnFlagUntilTimeout+0x32>
 80054fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d13e      	bne.n	800557e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800550e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005510:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005514:	667b      	str	r3, [r7, #100]	; 0x64
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800551e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005520:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005524:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800552c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e6      	bne.n	8005500 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3308      	adds	r3, #8
 8005538:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005544:	f023 0301 	bic.w	r3, r3, #1
 8005548:	663b      	str	r3, [r7, #96]	; 0x60
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3308      	adds	r3, #8
 8005550:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005552:	64ba      	str	r2, [r7, #72]	; 0x48
 8005554:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e5      	bne.n	8005532 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e067      	b.n	800564e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d04f      	beq.n	800562c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800559a:	d147      	bne.n	800562c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c4:	637b      	str	r3, [r7, #52]	; 0x34
 80055c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e6      	bne.n	80055a6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3308      	adds	r3, #8
 80055de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	613b      	str	r3, [r7, #16]
   return(result);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3308      	adds	r3, #8
 80055f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055f8:	623a      	str	r2, [r7, #32]
 80055fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	69f9      	ldr	r1, [r7, #28]
 80055fe:	6a3a      	ldr	r2, [r7, #32]
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	61bb      	str	r3, [r7, #24]
   return(result);
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e5      	bne.n	80055d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2220      	movs	r2, #32
 800561c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e010      	b.n	800564e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69da      	ldr	r2, [r3, #28]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	4013      	ands	r3, r2
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	429a      	cmp	r2, r3
 800563a:	bf0c      	ite	eq
 800563c:	2301      	moveq	r3, #1
 800563e:	2300      	movne	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	461a      	mov	r2, r3
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	429a      	cmp	r2, r3
 8005648:	f43f af4a 	beq.w	80054e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3770      	adds	r7, #112	; 0x70
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b096      	sub	sp, #88	; 0x58
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	88fa      	ldrh	r2, [r7, #6]
 8005670:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2222      	movs	r2, #34	; 0x22
 8005680:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	2b00      	cmp	r3, #0
 8005688:	d02b      	beq.n	80056e2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	4a40      	ldr	r2, [pc, #256]	; (8005790 <UART_Start_Receive_DMA+0x138>)
 8005690:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005696:	4a3f      	ldr	r2, [pc, #252]	; (8005794 <UART_Start_Receive_DMA+0x13c>)
 8005698:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569e:	4a3e      	ldr	r2, [pc, #248]	; (8005798 <UART_Start_Receive_DMA+0x140>)
 80056a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a6:	2200      	movs	r2, #0
 80056a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3324      	adds	r3, #36	; 0x24
 80056b4:	4619      	mov	r1, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ba:	461a      	mov	r2, r3
 80056bc:	88fb      	ldrh	r3, [r7, #6]
 80056be:	f7fc f9f3 	bl	8001aa8 <HAL_DMA_Start_IT>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00c      	beq.n	80056e2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2210      	movs	r2, #16
 80056cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2220      	movs	r2, #32
 80056dc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e051      	b.n	8005786 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005708:	64bb      	str	r3, [r7, #72]	; 0x48
 800570a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800570e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e6      	bne.n	80056ea <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3308      	adds	r3, #8
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	653b      	str	r3, [r7, #80]	; 0x50
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3308      	adds	r3, #8
 800573a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800573c:	637a      	str	r2, [r7, #52]	; 0x34
 800573e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e5      	bne.n	800571c <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3308      	adds	r3, #8
 8005756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	e853 3f00 	ldrex	r3, [r3]
 800575e:	613b      	str	r3, [r7, #16]
   return(result);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3308      	adds	r3, #8
 800576e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005770:	623a      	str	r2, [r7, #32]
 8005772:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	69f9      	ldr	r1, [r7, #28]
 8005776:	6a3a      	ldr	r2, [r7, #32]
 8005778:	e841 2300 	strex	r3, r2, [r1]
 800577c:	61bb      	str	r3, [r7, #24]
   return(result);
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e5      	bne.n	8005750 <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3758      	adds	r7, #88	; 0x58
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	080058af 	.word	0x080058af
 8005794:	080059cd 	.word	0x080059cd
 8005798:	08005a05 	.word	0x08005a05

0800579c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800579c:	b480      	push	{r7}
 800579e:	b089      	sub	sp, #36	; 0x24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	e853 3f00 	ldrex	r3, [r3]
 80057b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80057b8:	61fb      	str	r3, [r7, #28]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	61bb      	str	r3, [r7, #24]
 80057c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	6979      	ldr	r1, [r7, #20]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	613b      	str	r3, [r7, #16]
   return(result);
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e6      	bne.n	80057a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2220      	movs	r2, #32
 80057da:	679a      	str	r2, [r3, #120]	; 0x78
}
 80057dc:	bf00      	nop
 80057de:	3724      	adds	r7, #36	; 0x24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b095      	sub	sp, #84	; 0x54
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005804:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580e:	643b      	str	r3, [r7, #64]	; 0x40
 8005810:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005814:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e6      	bne.n	80057f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3308      	adds	r3, #8
 8005828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	61fb      	str	r3, [r7, #28]
   return(result);
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	64bb      	str	r3, [r7, #72]	; 0x48
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3308      	adds	r3, #8
 8005840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005842:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005844:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e5      	bne.n	8005822 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585a:	2b01      	cmp	r3, #1
 800585c:	d118      	bne.n	8005890 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	60bb      	str	r3, [r7, #8]
   return(result);
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f023 0310 	bic.w	r3, r3, #16
 8005872:	647b      	str	r3, [r7, #68]	; 0x44
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	461a      	mov	r2, r3
 800587a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005880:	6979      	ldr	r1, [r7, #20]
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	e841 2300 	strex	r3, r2, [r1]
 8005888:	613b      	str	r3, [r7, #16]
   return(result);
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e6      	bne.n	800585e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80058a2:	bf00      	nop
 80058a4:	3754      	adds	r7, #84	; 0x54
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b09c      	sub	sp, #112	; 0x70
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	d070      	beq.n	80059a6 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 80058c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80058e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80058ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e6      	bne.n	80058cc <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3308      	adds	r3, #8
 8005904:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800590e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005910:	f023 0301 	bic.w	r3, r3, #1
 8005914:	667b      	str	r3, [r7, #100]	; 0x64
 8005916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3308      	adds	r3, #8
 800591c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800591e:	647a      	str	r2, [r7, #68]	; 0x44
 8005920:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005922:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005926:	e841 2300 	strex	r3, r2, [r1]
 800592a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800592c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1e5      	bne.n	80058fe <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3308      	adds	r3, #8
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	623b      	str	r3, [r7, #32]
   return(result);
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005948:	663b      	str	r3, [r7, #96]	; 0x60
 800594a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3308      	adds	r3, #8
 8005950:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005952:	633a      	str	r2, [r7, #48]	; 0x30
 8005954:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e5      	bne.n	8005932 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005968:	2220      	movs	r2, #32
 800596a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800596c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005970:	2b01      	cmp	r3, #1
 8005972:	d118      	bne.n	80059a6 <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	e853 3f00 	ldrex	r3, [r3]
 8005980:	60fb      	str	r3, [r7, #12]
   return(result);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f023 0310 	bic.w	r3, r3, #16
 8005988:	65fb      	str	r3, [r7, #92]	; 0x5c
 800598a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005992:	61fb      	str	r3, [r7, #28]
 8005994:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005996:	69b9      	ldr	r1, [r7, #24]
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	e841 2300 	strex	r3, r2, [r1]
 800599e:	617b      	str	r3, [r7, #20]
   return(result);
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1e6      	bne.n	8005974 <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d107      	bne.n	80059be <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059b4:	4619      	mov	r1, r3
 80059b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80059b8:	f7ff fb5a 	bl	8005070 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059bc:	e002      	b.n	80059c4 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 80059be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80059c0:	f7fa feae 	bl	8000720 <HAL_UART_RxCpltCallback>
}
 80059c4:	bf00      	nop
 80059c6:	3770      	adds	r7, #112	; 0x70
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d109      	bne.n	80059f6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	4619      	mov	r1, r3
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f7ff fb3e 	bl	8005070 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059f4:	e002      	b.n	80059fc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f7ff fb26 	bl	8005048 <HAL_UART_RxHalfCpltCallback>
}
 80059fc:	bf00      	nop
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a16:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a28:	2b80      	cmp	r3, #128	; 0x80
 8005a2a:	d109      	bne.n	8005a40 <UART_DMAError+0x3c>
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	2b21      	cmp	r3, #33	; 0x21
 8005a30:	d106      	bne.n	8005a40 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005a3a:	6978      	ldr	r0, [r7, #20]
 8005a3c:	f7ff feae 	bl	800579c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4a:	2b40      	cmp	r3, #64	; 0x40
 8005a4c:	d109      	bne.n	8005a62 <UART_DMAError+0x5e>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b22      	cmp	r3, #34	; 0x22
 8005a52:	d106      	bne.n	8005a62 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005a5c:	6978      	ldr	r0, [r7, #20]
 8005a5e:	f7ff fec3 	bl	80057e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a68:	f043 0210 	orr.w	r2, r3, #16
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a72:	6978      	ldr	r0, [r7, #20]
 8005a74:	f7ff faf2 	bl	800505c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a78:	bf00      	nop
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <__libc_init_array>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	4e0d      	ldr	r6, [pc, #52]	; (8005ab8 <__libc_init_array+0x38>)
 8005a84:	4c0d      	ldr	r4, [pc, #52]	; (8005abc <__libc_init_array+0x3c>)
 8005a86:	1ba4      	subs	r4, r4, r6
 8005a88:	10a4      	asrs	r4, r4, #2
 8005a8a:	2500      	movs	r5, #0
 8005a8c:	42a5      	cmp	r5, r4
 8005a8e:	d109      	bne.n	8005aa4 <__libc_init_array+0x24>
 8005a90:	4e0b      	ldr	r6, [pc, #44]	; (8005ac0 <__libc_init_array+0x40>)
 8005a92:	4c0c      	ldr	r4, [pc, #48]	; (8005ac4 <__libc_init_array+0x44>)
 8005a94:	f000 f820 	bl	8005ad8 <_init>
 8005a98:	1ba4      	subs	r4, r4, r6
 8005a9a:	10a4      	asrs	r4, r4, #2
 8005a9c:	2500      	movs	r5, #0
 8005a9e:	42a5      	cmp	r5, r4
 8005aa0:	d105      	bne.n	8005aae <__libc_init_array+0x2e>
 8005aa2:	bd70      	pop	{r4, r5, r6, pc}
 8005aa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005aa8:	4798      	blx	r3
 8005aaa:	3501      	adds	r5, #1
 8005aac:	e7ee      	b.n	8005a8c <__libc_init_array+0xc>
 8005aae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ab2:	4798      	blx	r3
 8005ab4:	3501      	adds	r5, #1
 8005ab6:	e7f2      	b.n	8005a9e <__libc_init_array+0x1e>
 8005ab8:	08005b28 	.word	0x08005b28
 8005abc:	08005b28 	.word	0x08005b28
 8005ac0:	08005b28 	.word	0x08005b28
 8005ac4:	08005b2c 	.word	0x08005b2c

08005ac8 <memset>:
 8005ac8:	4402      	add	r2, r0
 8005aca:	4603      	mov	r3, r0
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d100      	bne.n	8005ad2 <memset+0xa>
 8005ad0:	4770      	bx	lr
 8005ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ad6:	e7f9      	b.n	8005acc <memset+0x4>

08005ad8 <_init>:
 8005ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ada:	bf00      	nop
 8005adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ade:	bc08      	pop	{r3}
 8005ae0:	469e      	mov	lr, r3
 8005ae2:	4770      	bx	lr

08005ae4 <_fini>:
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	bf00      	nop
 8005ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aea:	bc08      	pop	{r3}
 8005aec:	469e      	mov	lr, r3
 8005aee:	4770      	bx	lr
