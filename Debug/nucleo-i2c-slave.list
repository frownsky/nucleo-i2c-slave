
nucleo-i2c-slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004138  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080042c0  080042c0  000142c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f8  080042f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080042f8  080042f8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042f8  080042f8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042f8  080042f8  000142f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000010  08004310  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08004310  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2d4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019c3  00000000  00000000  0002d314  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a00  00000000  00000000  0002ecd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000958  00000000  00000000  0002f6d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a421  00000000  00000000  00030030  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009ca7  00000000  00000000  0004a451  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009954f  00000000  00000000  000540f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ed647  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c8  00000000  00000000  000ed6c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042a8 	.word	0x080042a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080042a8 	.word	0x080042a8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb44 	bl	8000858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80c 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8d0 	bl	8000378 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f89e 	bl	8000318 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001dc:	f000 f85c 	bl	8000298 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_EnableListen_IT( &hi2c1 );
 80001e0:	4801      	ldr	r0, [pc, #4]	; (80001e8 <main+0x20>)
 80001e2:	f001 f87f 	bl	80012e4 <HAL_I2C_EnableListen_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e6:	e7fe      	b.n	80001e6 <main+0x1e>
 80001e8:	20000030 	.word	0x20000030

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b09c      	sub	sp, #112	; 0x70
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80001f6:	2228      	movs	r2, #40	; 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f004 f84c 	bl	8004298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000210:	463b      	mov	r3, r7
 8000212:	2234      	movs	r2, #52	; 0x34
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f004 f83e 	bl	8004298 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021c:	2302      	movs	r3, #2
 800021e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000220:	2301      	movs	r3, #1
 8000222:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000224:	2310      	movs	r3, #16
 8000226:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000228:	2302      	movs	r3, #2
 800022a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800022c:	2300      	movs	r3, #0
 800022e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000230:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000234:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000236:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800023a:	4618      	mov	r0, r3
 800023c:	f002 fa02 	bl	8002644 <HAL_RCC_OscConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000246:	f000 f9c7 	bl	80005d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024a:	230f      	movs	r3, #15
 800024c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024e:	2302      	movs	r3, #2
 8000250:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800025a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000260:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000264:	2102      	movs	r1, #2
 8000266:	4618      	mov	r0, r3
 8000268:	f003 f8f4 	bl	8003454 <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000272:	f000 f9b1 	bl	80005d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000276:	2320      	movs	r3, #32
 8000278:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027e:	463b      	mov	r3, r7
 8000280:	4618      	mov	r0, r3
 8000282:	f003 fb1d 	bl	80038c0 <HAL_RCCEx_PeriphCLKConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800028c:	f000 f9a4 	bl	80005d8 <Error_Handler>
  }
}
 8000290:	bf00      	nop
 8000292:	3770      	adds	r7, #112	; 0x70
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800029c:	4b1b      	ldr	r3, [pc, #108]	; (800030c <MX_I2C1_Init+0x74>)
 800029e:	4a1c      	ldr	r2, [pc, #112]	; (8000310 <MX_I2C1_Init+0x78>)
 80002a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002a2:	4b1a      	ldr	r3, [pc, #104]	; (800030c <MX_I2C1_Init+0x74>)
 80002a4:	4a1b      	ldr	r2, [pc, #108]	; (8000314 <MX_I2C1_Init+0x7c>)
 80002a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 64;
 80002a8:	4b18      	ldr	r3, [pc, #96]	; (800030c <MX_I2C1_Init+0x74>)
 80002aa:	2240      	movs	r2, #64	; 0x40
 80002ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ae:	4b17      	ldr	r3, [pc, #92]	; (800030c <MX_I2C1_Init+0x74>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002b4:	4b15      	ldr	r3, [pc, #84]	; (800030c <MX_I2C1_Init+0x74>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002ba:	4b14      	ldr	r3, [pc, #80]	; (800030c <MX_I2C1_Init+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <MX_I2C1_Init+0x74>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002c6:	4b11      	ldr	r3, [pc, #68]	; (800030c <MX_I2C1_Init+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002cc:	4b0f      	ldr	r3, [pc, #60]	; (800030c <MX_I2C1_Init+0x74>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002d2:	480e      	ldr	r0, [pc, #56]	; (800030c <MX_I2C1_Init+0x74>)
 80002d4:	f000 fe2f 	bl	8000f36 <HAL_I2C_Init>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002de:	f000 f97b 	bl	80005d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002e2:	2100      	movs	r1, #0
 80002e4:	4809      	ldr	r0, [pc, #36]	; (800030c <MX_I2C1_Init+0x74>)
 80002e6:	f002 f915 	bl	8002514 <HAL_I2CEx_ConfigAnalogFilter>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80002f0:	f000 f972 	bl	80005d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002f4:	2100      	movs	r1, #0
 80002f6:	4805      	ldr	r0, [pc, #20]	; (800030c <MX_I2C1_Init+0x74>)
 80002f8:	f002 f957 	bl	80025aa <HAL_I2CEx_ConfigDigitalFilter>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000302:	f000 f969 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000030 	.word	0x20000030
 8000310:	40005400 	.word	0x40005400
 8000314:	2000090e 	.word	0x2000090e

08000318 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800031c:	4b14      	ldr	r3, [pc, #80]	; (8000370 <MX_USART2_UART_Init+0x58>)
 800031e:	4a15      	ldr	r2, [pc, #84]	; (8000374 <MX_USART2_UART_Init+0x5c>)
 8000320:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000322:	4b13      	ldr	r3, [pc, #76]	; (8000370 <MX_USART2_UART_Init+0x58>)
 8000324:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000328:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800032a:	4b11      	ldr	r3, [pc, #68]	; (8000370 <MX_USART2_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <MX_USART2_UART_Init+0x58>)
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <MX_USART2_UART_Init+0x58>)
 8000338:	2200      	movs	r2, #0
 800033a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <MX_USART2_UART_Init+0x58>)
 800033e:	220c      	movs	r2, #12
 8000340:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <MX_USART2_UART_Init+0x58>)
 8000344:	2200      	movs	r2, #0
 8000346:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_USART2_UART_Init+0x58>)
 800034a:	2200      	movs	r2, #0
 800034c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <MX_USART2_UART_Init+0x58>)
 8000350:	2200      	movs	r2, #0
 8000352:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_USART2_UART_Init+0x58>)
 8000356:	2200      	movs	r2, #0
 8000358:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <MX_USART2_UART_Init+0x58>)
 800035c:	f003 fc42 	bl	8003be4 <HAL_UART_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000366:	f000 f937 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	2000007c 	.word	0x2000007c
 8000374:	40004400 	.word	0x40004400

08000378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b08a      	sub	sp, #40	; 0x28
 800037c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037e:	f107 0314 	add.w	r3, r7, #20
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800038e:	4b3b      	ldr	r3, [pc, #236]	; (800047c <MX_GPIO_Init+0x104>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a3a      	ldr	r2, [pc, #232]	; (800047c <MX_GPIO_Init+0x104>)
 8000394:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b38      	ldr	r3, [pc, #224]	; (800047c <MX_GPIO_Init+0x104>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003a2:	613b      	str	r3, [r7, #16]
 80003a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003a6:	4b35      	ldr	r3, [pc, #212]	; (800047c <MX_GPIO_Init+0x104>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a34      	ldr	r2, [pc, #208]	; (800047c <MX_GPIO_Init+0x104>)
 80003ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003b0:	6153      	str	r3, [r2, #20]
 80003b2:	4b32      	ldr	r3, [pc, #200]	; (800047c <MX_GPIO_Init+0x104>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003be:	4b2f      	ldr	r3, [pc, #188]	; (800047c <MX_GPIO_Init+0x104>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a2e      	ldr	r2, [pc, #184]	; (800047c <MX_GPIO_Init+0x104>)
 80003c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b2c      	ldr	r3, [pc, #176]	; (800047c <MX_GPIO_Init+0x104>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d2:	60bb      	str	r3, [r7, #8]
 80003d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d6:	4b29      	ldr	r3, [pc, #164]	; (800047c <MX_GPIO_Init+0x104>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a28      	ldr	r2, [pc, #160]	; (800047c <MX_GPIO_Init+0x104>)
 80003dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b26      	ldr	r3, [pc, #152]	; (800047c <MX_GPIO_Init+0x104>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LDR2_Pin|LD2_Pin|LDG2_Pin|LDR1_Pin, GPIO_PIN_RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	f242 4130 	movw	r1, #9264	; 0x2430
 80003f4:	4822      	ldr	r0, [pc, #136]	; (8000480 <MX_GPIO_Init+0x108>)
 80003f6:	f000 fd63 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDG1_GPIO_Port, LDG1_Pin, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000404:	f000 fd5c 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000408:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800040c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800040e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	4619      	mov	r1, r3
 800041e:	4819      	ldr	r0, [pc, #100]	; (8000484 <MX_GPIO_Init+0x10c>)
 8000420:	f000 fbdc 	bl	8000bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LDR2_Pin LD2_Pin LDG2_Pin LDR1_Pin */
  GPIO_InitStruct.Pin = LDR2_Pin|LD2_Pin|LDG2_Pin|LDR1_Pin;
 8000424:	f242 4330 	movw	r3, #9264	; 0x2430
 8000428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042a:	2301      	movs	r3, #1
 800042c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000432:	2300      	movs	r3, #0
 8000434:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	4619      	mov	r1, r3
 800043c:	4810      	ldr	r0, [pc, #64]	; (8000480 <MX_GPIO_Init+0x108>)
 800043e:	f000 fbcd 	bl	8000bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LDG1_Pin */
  GPIO_InitStruct.Pin = LDG1_Pin;
 8000442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000448:	2301      	movs	r3, #1
 800044a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000450:	2300      	movs	r3, #0
 8000452:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LDG1_GPIO_Port, &GPIO_InitStruct);
 8000454:	f107 0314 	add.w	r3, r7, #20
 8000458:	4619      	mov	r1, r3
 800045a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800045e:	f000 fbbd 	bl	8000bdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000462:	2200      	movs	r2, #0
 8000464:	2100      	movs	r1, #0
 8000466:	2028      	movs	r0, #40	; 0x28
 8000468:	f000 fb37 	bl	8000ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800046c:	2028      	movs	r0, #40	; 0x28
 800046e:	f000 fb50 	bl	8000b12 <HAL_NVIC_EnableIRQ>

}
 8000472:	bf00      	nop
 8000474:	3728      	adds	r7, #40	; 0x28
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000
 8000480:	48000400 	.word	0x48000400
 8000484:	48000800 	.word	0x48000800

08000488 <HAL_I2C_AddrCallback>:


#ifdef SLAVE_WORKING

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	460b      	mov	r3, r1
 8000492:	70fb      	strb	r3, [r7, #3]
 8000494:	4613      	mov	r3, r2
 8000496:	803b      	strh	r3, [r7, #0]
	// Static data for now
	switch (receive_buff){
 8000498:	4b2c      	ldr	r3, [pc, #176]	; (800054c <HAL_I2C_AddrCallback+0xc4>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	3b10      	subs	r3, #16
 800049e:	2b13      	cmp	r3, #19
 80004a0:	d83a      	bhi.n	8000518 <HAL_I2C_AddrCallback+0x90>
 80004a2:	a201      	add	r2, pc, #4	; (adr r2, 80004a8 <HAL_I2C_AddrCallback+0x20>)
 80004a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a8:	080004f9 	.word	0x080004f9
 80004ac:	08000519 	.word	0x08000519
 80004b0:	08000519 	.word	0x08000519
 80004b4:	08000519 	.word	0x08000519
 80004b8:	08000519 	.word	0x08000519
 80004bc:	08000519 	.word	0x08000519
 80004c0:	08000519 	.word	0x08000519
 80004c4:	08000519 	.word	0x08000519
 80004c8:	08000519 	.word	0x08000519
 80004cc:	08000519 	.word	0x08000519
 80004d0:	08000519 	.word	0x08000519
 80004d4:	08000519 	.word	0x08000519
 80004d8:	08000519 	.word	0x08000519
 80004dc:	08000519 	.word	0x08000519
 80004e0:	08000519 	.word	0x08000519
 80004e4:	08000519 	.word	0x08000519
 80004e8:	08000519 	.word	0x08000519
 80004ec:	08000501 	.word	0x08000501
 80004f0:	08000509 	.word	0x08000509
 80004f4:	08000511 	.word	0x08000511
		case WHO_AM_I:
			data = 0xEE;
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <HAL_I2C_AddrCallback+0xc8>)
 80004fa:	22ee      	movs	r2, #238	; 0xee
 80004fc:	701a      	strb	r2, [r3, #0]
			break;
 80004fe:	e00f      	b.n	8000520 <HAL_I2C_AddrCallback+0x98>
		case OUT_X:
			data = 0xa9;
 8000500:	4b13      	ldr	r3, [pc, #76]	; (8000550 <HAL_I2C_AddrCallback+0xc8>)
 8000502:	22a9      	movs	r2, #169	; 0xa9
 8000504:	701a      	strb	r2, [r3, #0]
			break;
 8000506:	e00b      	b.n	8000520 <HAL_I2C_AddrCallback+0x98>
		case OUT_Y:
			data = 0xb8;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <HAL_I2C_AddrCallback+0xc8>)
 800050a:	22b8      	movs	r2, #184	; 0xb8
 800050c:	701a      	strb	r2, [r3, #0]
			break;
 800050e:	e007      	b.n	8000520 <HAL_I2C_AddrCallback+0x98>
		case OUT_Z:
			data = 0xc7;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <HAL_I2C_AddrCallback+0xc8>)
 8000512:	22c7      	movs	r2, #199	; 0xc7
 8000514:	701a      	strb	r2, [r3, #0]
			break;
 8000516:	e003      	b.n	8000520 <HAL_I2C_AddrCallback+0x98>
		default:
			data = 0xf9;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <HAL_I2C_AddrCallback+0xc8>)
 800051a:	22f9      	movs	r2, #249	; 0xf9
 800051c:	701a      	strb	r2, [r3, #0]
			break;
 800051e:	bf00      	nop
	}
	// Receiving
	if( TransferDirection == I2C_DIRECTION_TRANSMIT )
 8000520:	78fb      	ldrb	r3, [r7, #3]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d107      	bne.n	8000536 <HAL_I2C_AddrCallback+0xae>
	{
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, &receive_buff, 1, I2C_NEXT_FRAME);
 8000526:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800052a:	2201      	movs	r2, #1
 800052c:	4907      	ldr	r1, [pc, #28]	; (800054c <HAL_I2C_AddrCallback+0xc4>)
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f000 fe34 	bl	800119c <HAL_I2C_Slave_Seq_Receive_IT>
	else
	{
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &data, 1, I2C_NEXT_FRAME);
	}

}
 8000534:	e006      	b.n	8000544 <HAL_I2C_AddrCallback+0xbc>
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &data, 1, I2C_NEXT_FRAME);
 8000536:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800053a:	2201      	movs	r2, #1
 800053c:	4904      	ldr	r1, [pc, #16]	; (8000550 <HAL_I2C_AddrCallback+0xc8>)
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 fd88 	bl	8001054 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	2000002c 	.word	0x2000002c
 8000550:	20000000 	.word	0x20000000

08000554 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]

}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &data, 1, I2C_NEXT_FRAME);
 8000570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000574:	2201      	movs	r2, #1
 8000576:	4904      	ldr	r1, [pc, #16]	; (8000588 <HAL_I2C_SlaveTxCpltCallback+0x20>)
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f000 fd6b 	bl	8001054 <HAL_I2C_Slave_Seq_Transmit_IT>

}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	if( HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF )
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 ff68 	bl	800146a <HAL_I2C_GetError>
 800059a:	4603      	mov	r3, r0
 800059c:	2b04      	cmp	r3, #4
 800059e:	d002      	beq.n	80005a6 <HAL_I2C_ErrorCallback+0x1a>
	{
		HAL_I2C_GetError(hi2c);
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f000 ff62 	bl	800146a <HAL_I2C_GetError>
	}
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f000 fe94 	bl	80012e4 <HAL_I2C_EnableListen_IT>

}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005dc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005de:	e7fe      	b.n	80005de <Error_Handler+0x6>

080005e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <HAL_MspInit+0x44>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <HAL_MspInit+0x44>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6193      	str	r3, [r2, #24]
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <HAL_MspInit+0x44>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <HAL_MspInit+0x44>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	4a08      	ldr	r2, [pc, #32]	; (8000624 <HAL_MspInit+0x44>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000608:	61d3      	str	r3, [r2, #28]
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_MspInit+0x44>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000616:	2007      	movs	r0, #7
 8000618:	f000 fa54 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000

08000628 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <HAL_I2C_MspInit+0x9c>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d138      	bne.n	80006bc <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <HAL_I2C_MspInit+0xa0>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <HAL_I2C_MspInit+0xa0>)
 8000650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000654:	6153      	str	r3, [r2, #20]
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <HAL_I2C_MspInit+0xa0>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000662:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000668:	2312      	movs	r3, #18
 800066a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000670:	2303      	movs	r3, #3
 8000672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000674:	2304      	movs	r3, #4
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4813      	ldr	r0, [pc, #76]	; (80006cc <HAL_I2C_MspInit+0xa4>)
 8000680:	f000 faac 	bl	8000bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <HAL_I2C_MspInit+0xa0>)
 8000686:	69db      	ldr	r3, [r3, #28]
 8000688:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <HAL_I2C_MspInit+0xa0>)
 800068a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800068e:	61d3      	str	r3, [r2, #28]
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <HAL_I2C_MspInit+0xa0>)
 8000692:	69db      	ldr	r3, [r3, #28]
 8000694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	201f      	movs	r0, #31
 80006a2:	f000 fa1a 	bl	8000ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80006a6:	201f      	movs	r0, #31
 80006a8:	f000 fa33 	bl	8000b12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2100      	movs	r1, #0
 80006b0:	2020      	movs	r0, #32
 80006b2:	f000 fa12 	bl	8000ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80006b6:	2020      	movs	r0, #32
 80006b8:	f000 fa2b 	bl	8000b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006bc:	bf00      	nop
 80006be:	3728      	adds	r7, #40	; 0x28
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40005400 	.word	0x40005400
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000400 	.word	0x48000400

080006d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a17      	ldr	r2, [pc, #92]	; (800074c <HAL_UART_MspInit+0x7c>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d128      	bne.n	8000744 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <HAL_UART_MspInit+0x80>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <HAL_UART_MspInit+0x80>)
 80006f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006fc:	61d3      	str	r3, [r2, #28]
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <HAL_UART_MspInit+0x80>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <HAL_UART_MspInit+0x80>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a10      	ldr	r2, [pc, #64]	; (8000750 <HAL_UART_MspInit+0x80>)
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <HAL_UART_MspInit+0x80>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000722:	230c      	movs	r3, #12
 8000724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000726:	2302      	movs	r3, #2
 8000728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000732:	2307      	movs	r3, #7
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000740:	f000 fa4c 	bl	8000bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40004400 	.word	0x40004400
 8000750:	40021000 	.word	0x40021000

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <NMI_Handler+0x4>

0800075a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <MemManage_Handler+0x4>

08000766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <BusFault_Handler+0x4>

0800076c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <UsageFault_Handler+0x4>

08000772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a0:	f000 f8a0 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <I2C1_EV_IRQHandler+0x10>)
 80007ae:	f000 fdb9 	bl	8001324 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000030 	.word	0x20000030

080007bc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80007c0:	4802      	ldr	r0, [pc, #8]	; (80007cc <I2C1_ER_IRQHandler+0x10>)
 80007c2:	f000 fdc9 	bl	8001358 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000030 	.word	0x20000030

080007d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80007d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007d8:	f000 fb8a 	bl	8000ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <SystemInit+0x20>)
 80007e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ea:	4a05      	ldr	r2, [pc, #20]	; (8000800 <SystemInit+0x20>)
 80007ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800083c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <LoopForever+0x6>)
  ldr r1, =_edata
 800080a:	490e      	ldr	r1, [pc, #56]	; (8000844 <LoopForever+0xa>)
  ldr r2, =_sidata
 800080c:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <LoopForever+0xe>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000810:	e002      	b.n	8000818 <LoopCopyDataInit>

08000812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000816:	3304      	adds	r3, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800081c:	d3f9      	bcc.n	8000812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081e:	4a0b      	ldr	r2, [pc, #44]	; (800084c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000820:	4c0b      	ldr	r4, [pc, #44]	; (8000850 <LoopForever+0x16>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000824:	e001      	b.n	800082a <LoopFillZerobss>

08000826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000828:	3204      	adds	r2, #4

0800082a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800082c:	d3fb      	bcc.n	8000826 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800082e:	f7ff ffd7 	bl	80007e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000832:	f003 fd0d 	bl	8004250 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000836:	f7ff fcc7 	bl	80001c8 <main>

0800083a <LoopForever>:

LoopForever:
    b LoopForever
 800083a:	e7fe      	b.n	800083a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800083c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000844:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000848:	08004300 	.word	0x08004300
  ldr r2, =_sbss
 800084c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000850:	20000104 	.word	0x20000104

08000854 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <ADC1_IRQHandler>
	...

08000858 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_Init+0x28>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <HAL_Init+0x28>)
 8000862:	f043 0310 	orr.w	r3, r3, #16
 8000866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000868:	2003      	movs	r0, #3
 800086a:	f000 f92b 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086e:	2000      	movs	r0, #0
 8000870:	f000 f808 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000874:	f7ff feb4 	bl	80005e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40022000 	.word	0x40022000

08000884 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_InitTick+0x54>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_InitTick+0x58>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f943 	bl	8000b2e <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00e      	b.n	80008d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d80a      	bhi.n	80008ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
 80008c0:	f000 f90b 	bl	8000ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c4:	4a06      	ldr	r2, [pc, #24]	; (80008e0 <HAL_InitTick+0x5c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000004 	.word	0x20000004
 80008dc:	2000000c 	.word	0x2000000c
 80008e0:	20000008 	.word	0x20000008

080008e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_IncTick+0x20>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_IncTick+0x24>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_IncTick+0x24>)
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	2000000c 	.word	0x2000000c
 8000908:	20000100 	.word	0x20000100

0800090c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <HAL_GetTick+0x14>)
 8000912:	681b      	ldr	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000100 	.word	0x20000100

08000924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <__NVIC_SetPriorityGrouping+0x44>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000940:	4013      	ands	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800094c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000956:	4a04      	ldr	r2, [pc, #16]	; (8000968 <__NVIC_SetPriorityGrouping+0x44>)
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	60d3      	str	r3, [r2, #12]
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <__NVIC_GetPriorityGrouping+0x18>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	f003 0307 	and.w	r3, r3, #7
}
 800097a:	4618      	mov	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	2b00      	cmp	r3, #0
 8000998:	db0b      	blt.n	80009b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	f003 021f 	and.w	r2, r3, #31
 80009a0:	4907      	ldr	r1, [pc, #28]	; (80009c0 <__NVIC_EnableIRQ+0x38>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	095b      	lsrs	r3, r3, #5
 80009a8:	2001      	movs	r0, #1
 80009aa:	fa00 f202 	lsl.w	r2, r0, r2
 80009ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000e100 	.word	0xe000e100

080009c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	db0a      	blt.n	80009ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	490c      	ldr	r1, [pc, #48]	; (8000a10 <__NVIC_SetPriority+0x4c>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	0112      	lsls	r2, r2, #4
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	440b      	add	r3, r1
 80009e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ec:	e00a      	b.n	8000a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4908      	ldr	r1, [pc, #32]	; (8000a14 <__NVIC_SetPriority+0x50>)
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	f003 030f 	and.w	r3, r3, #15
 80009fa:	3b04      	subs	r3, #4
 80009fc:	0112      	lsls	r2, r2, #4
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	440b      	add	r3, r1
 8000a02:	761a      	strb	r2, [r3, #24]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b089      	sub	sp, #36	; 0x24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	f1c3 0307 	rsb	r3, r3, #7
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	bf28      	it	cs
 8000a36:	2304      	movcs	r3, #4
 8000a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	2b06      	cmp	r3, #6
 8000a40:	d902      	bls.n	8000a48 <NVIC_EncodePriority+0x30>
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3b03      	subs	r3, #3
 8000a46:	e000      	b.n	8000a4a <NVIC_EncodePriority+0x32>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43da      	mvns	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a60:	f04f 31ff 	mov.w	r1, #4294967295
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	43d9      	mvns	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	4313      	orrs	r3, r2
         );
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3724      	adds	r7, #36	; 0x24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a90:	d301      	bcc.n	8000a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00f      	b.n	8000ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SysTick_Config+0x40>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f7ff ff8e 	bl	80009c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <SysTick_Config+0x40>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <SysTick_Config+0x40>)
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff29 	bl	8000924 <__NVIC_SetPriorityGrouping>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aec:	f7ff ff3e 	bl	800096c <__NVIC_GetPriorityGrouping>
 8000af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	6978      	ldr	r0, [r7, #20]
 8000af8:	f7ff ff8e 	bl	8000a18 <NVIC_EncodePriority>
 8000afc:	4602      	mov	r2, r0
 8000afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff5d 	bl	80009c4 <__NVIC_SetPriority>
}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff31 	bl	8000988 <__NVIC_EnableIRQ>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ffa2 	bl	8000a80 <SysTick_Config>
 8000b3c:	4603      	mov	r3, r0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b084      	sub	sp, #16
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d005      	beq.n	8000b68 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2204      	movs	r2, #4
 8000b60:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	73fb      	strb	r3, [r7, #15]
 8000b66:	e027      	b.n	8000bb8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f022 020e 	bic.w	r2, r2, #14
 8000b76:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f022 0201 	bic.w	r2, r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b90:	2101      	movs	r1, #1
 8000b92:	fa01 f202 	lsl.w	r2, r1, r2
 8000b96:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d003      	beq.n	8000bb8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	4798      	blx	r3
    } 
  }
  return status;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b087      	sub	sp, #28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bea:	e14e      	b.n	8000e8a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 8140 	beq.w	8000e84 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d005      	beq.n	8000c1c <HAL_GPIO_Init+0x40>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d130      	bne.n	8000c7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	2203      	movs	r2, #3
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68da      	ldr	r2, [r3, #12]
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c52:	2201      	movs	r2, #1
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	091b      	lsrs	r3, r3, #4
 8000c68:	f003 0201 	and.w	r2, r3, #1
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 0303 	and.w	r3, r3, #3
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	d017      	beq.n	8000cba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d123      	bne.n	8000d0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	08da      	lsrs	r2, r3, #3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3208      	adds	r2, #8
 8000cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	220f      	movs	r2, #15
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	691a      	ldr	r2, [r3, #16]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f003 0307 	and.w	r3, r3, #7
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	08da      	lsrs	r2, r3, #3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3208      	adds	r2, #8
 8000d08:	6939      	ldr	r1, [r7, #16]
 8000d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2203      	movs	r2, #3
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0203 	and.w	r2, r3, #3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 809a 	beq.w	8000e84 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d50:	4b55      	ldr	r3, [pc, #340]	; (8000ea8 <HAL_GPIO_Init+0x2cc>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a54      	ldr	r2, [pc, #336]	; (8000ea8 <HAL_GPIO_Init+0x2cc>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b52      	ldr	r3, [pc, #328]	; (8000ea8 <HAL_GPIO_Init+0x2cc>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d68:	4a50      	ldr	r2, [pc, #320]	; (8000eac <HAL_GPIO_Init+0x2d0>)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	3302      	adds	r3, #2
 8000d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	220f      	movs	r2, #15
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d92:	d013      	beq.n	8000dbc <HAL_GPIO_Init+0x1e0>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a46      	ldr	r2, [pc, #280]	; (8000eb0 <HAL_GPIO_Init+0x2d4>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d00d      	beq.n	8000db8 <HAL_GPIO_Init+0x1dc>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a45      	ldr	r2, [pc, #276]	; (8000eb4 <HAL_GPIO_Init+0x2d8>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d007      	beq.n	8000db4 <HAL_GPIO_Init+0x1d8>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a44      	ldr	r2, [pc, #272]	; (8000eb8 <HAL_GPIO_Init+0x2dc>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d101      	bne.n	8000db0 <HAL_GPIO_Init+0x1d4>
 8000dac:	2303      	movs	r3, #3
 8000dae:	e006      	b.n	8000dbe <HAL_GPIO_Init+0x1e2>
 8000db0:	2305      	movs	r3, #5
 8000db2:	e004      	b.n	8000dbe <HAL_GPIO_Init+0x1e2>
 8000db4:	2302      	movs	r3, #2
 8000db6:	e002      	b.n	8000dbe <HAL_GPIO_Init+0x1e2>
 8000db8:	2301      	movs	r3, #1
 8000dba:	e000      	b.n	8000dbe <HAL_GPIO_Init+0x1e2>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	f002 0203 	and.w	r2, r2, #3
 8000dc4:	0092      	lsls	r2, r2, #2
 8000dc6:	4093      	lsls	r3, r2
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dce:	4937      	ldr	r1, [pc, #220]	; (8000eac <HAL_GPIO_Init+0x2d0>)
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ddc:	4b37      	ldr	r3, [pc, #220]	; (8000ebc <HAL_GPIO_Init+0x2e0>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e00:	4a2e      	ldr	r2, [pc, #184]	; (8000ebc <HAL_GPIO_Init+0x2e0>)
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e06:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <HAL_GPIO_Init+0x2e0>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e2a:	4a24      	ldr	r2, [pc, #144]	; (8000ebc <HAL_GPIO_Init+0x2e0>)
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e30:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <HAL_GPIO_Init+0x2e0>)
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e54:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <HAL_GPIO_Init+0x2e0>)
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_GPIO_Init+0x2e0>)
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e7e:	4a0f      	ldr	r2, [pc, #60]	; (8000ebc <HAL_GPIO_Init+0x2e0>)
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	3301      	adds	r3, #1
 8000e88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	fa22 f303 	lsr.w	r3, r2, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f47f aea9 	bne.w	8000bec <HAL_GPIO_Init+0x10>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	371c      	adds	r7, #28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	48000400 	.word	0x48000400
 8000eb4:	48000800 	.word	0x48000800
 8000eb8:	48000c00 	.word	0x48000c00
 8000ebc:	40010400 	.word	0x40010400

08000ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed0:	787b      	ldrb	r3, [r7, #1]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000edc:	e002      	b.n	8000ee4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000efc:	695a      	ldr	r2, [r3, #20]
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f806 	bl	8000f20 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40010400 	.word	0x40010400

08000f20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e081      	b.n	800104c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d106      	bne.n	8000f62 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff fb63 	bl	8000628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2224      	movs	r2, #36	; 0x24
 8000f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0201 	bic.w	r2, r2, #1
 8000f78:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f86:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f96:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d107      	bne.n	8000fb0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	e006      	b.n	8000fbe <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000fbc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d104      	bne.n	8000fd0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	6812      	ldr	r2, [r2, #0]
 8000fda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fe2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ff2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69d9      	ldr	r1, [r3, #28]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a1a      	ldr	r2, [r3, #32]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	430a      	orrs	r2, r1
 800101c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f042 0201 	orr.w	r2, r2, #1
 800102c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2220      	movs	r2, #32
 8001038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	4613      	mov	r3, r2
 8001062:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800106a:	b2db      	uxtb	r3, r3
 800106c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001070:	2b28      	cmp	r3, #40	; 0x28
 8001072:	f040 808a 	bne.w	800118a <HAL_I2C_Slave_Seq_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d105      	bne.n	800108e <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e07e      	b.n	800118c <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800108e:	f248 0101 	movw	r1, #32769	; 0x8001
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f001 f9e0 	bl	8002458 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d101      	bne.n	80010a6 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e072      	b.n	800118c <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b2a      	cmp	r3, #42	; 0x2a
 80010b8:	d12a      	bne.n	8001110 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80010ba:	2102      	movs	r1, #2
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f001 f9cb 	bl	8002458 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010d0:	d11e      	bne.n	8001110 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010e0:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d012      	beq.n	8001110 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ee:	4a29      	ldr	r2, [pc, #164]	; (8001194 <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fd25 	bl	8000b46 <HAL_DMA_Abort_IT>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d006      	beq.n	8001110 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800110c:	4610      	mov	r0, r2
 800110e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2229      	movs	r2, #41	; 0x29
 8001114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2220      	movs	r2, #32
 800111c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2200      	movs	r2, #0
 8001124:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001134:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	68ba      	ldr	r2, [r7, #8]
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	88fa      	ldrh	r2, [r7, #6]
 8001140:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001146:	b29a      	uxth	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4a10      	ldr	r2, [pc, #64]	; (8001198 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>)
 8001156:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	0c1b      	lsrs	r3, r3, #16
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b01      	cmp	r3, #1
 800116a:	d103      	bne.n	8001174 <HAL_I2C_Slave_Seq_Transmit_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2208      	movs	r2, #8
 8001172:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 800117c:	f248 0101 	movw	r1, #32769	; 0x8001
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f001 f905 	bl	8002390 <I2C_Enable_IRQ>

    return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
  }
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	080022f7 	.word	0x080022f7
 8001198:	08001483 	.word	0x08001483

0800119c <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	4613      	mov	r3, r2
 80011aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80011b8:	2b28      	cmp	r3, #40	; 0x28
 80011ba:	f040 808a 	bne.w	80012d2 <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d002      	beq.n	80011ca <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d105      	bne.n	80011d6 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e07e      	b.n	80012d4 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80011d6:	f248 0102 	movw	r1, #32770	; 0x8002
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f001 f93c 	bl	8002458 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d101      	bne.n	80011ee <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e072      	b.n	80012d4 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b29      	cmp	r3, #41	; 0x29
 8001200:	d12a      	bne.n	8001258 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001202:	2101      	movs	r1, #1
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f001 f927 	bl	8002458 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001218:	d11e      	bne.n	8001258 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001228:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122e:	2b00      	cmp	r3, #0
 8001230:	d012      	beq.n	8001258 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001236:	4a29      	ldr	r2, [pc, #164]	; (80012dc <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
 8001238:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fc81 	bl	8000b46 <HAL_DMA_Abort_IT>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001254:	4610      	mov	r0, r2
 8001256:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	222a      	movs	r2, #42	; 0x2a
 800125c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2220      	movs	r2, #32
 8001264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2200      	movs	r2, #0
 800126c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800127c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	88fa      	ldrh	r2, [r7, #6]
 8001288:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800128e:	b29a      	uxth	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
 800129e:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	0c1b      	lsrs	r3, r3, #16
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d103      	bne.n	80012bc <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2208      	movs	r2, #8
 80012ba:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80012c4:	f248 0102 	movw	r1, #32770	; 0x8002
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f001 f861 	bl	8002390 <I2C_Enable_IRQ>

    return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
  }
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	080022f7 	.word	0x080022f7
 80012e0:	08001483 	.word	0x08001483

080012e4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b20      	cmp	r3, #32
 80012f6:	d10d      	bne.n	8001314 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2228      	movs	r2, #40	; 0x28
 80012fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_I2C_EnableListen_IT+0x3c>)
 8001304:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f001 f840 	bl	8002390 <I2C_Enable_IRQ>

    return HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	e000      	b.n	8001316 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8001314:	2302      	movs	r3, #2
  }
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	08001483 	.word	0x08001483

08001324 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	68f9      	ldr	r1, [r7, #12]
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	4798      	blx	r3
  }
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d010      	beq.n	800139e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	09db      	lsrs	r3, r3, #7
 8001380:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00a      	beq.n	800139e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	f043 0201 	orr.w	r2, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f44f 7280 	mov.w	r2, #256	; 0x100
 800139c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	0a9b      	lsrs	r3, r3, #10
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d010      	beq.n	80013cc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	09db      	lsrs	r3, r3, #7
 80013ae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00a      	beq.n	80013cc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	f043 0208 	orr.w	r2, r3, #8
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ca:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	0a5b      	lsrs	r3, r3, #9
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d010      	beq.n	80013fa <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	09db      	lsrs	r3, r3, #7
 80013dc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00a      	beq.n	80013fa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	f043 0202 	orr.w	r2, r3, #2
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 030b 	and.w	r3, r3, #11
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800140a:	68f9      	ldr	r1, [r7, #12]
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 fe57 	bl	80020c0 <I2C_ITError>
  }
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001492:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <I2C_Slave_ISR_IT+0x24>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e0ec      	b.n	8001680 <I2C_Slave_ISR_IT+0x1fe>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	095b      	lsrs	r3, r3, #5
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d009      	beq.n	80014ce <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	095b      	lsrs	r3, r3, #5
 80014be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80014c6:	6939      	ldr	r1, [r7, #16]
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f000 fc99 	bl	8001e00 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d04d      	beq.n	8001576 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d047      	beq.n	8001576 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d128      	bne.n	8001542 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b28      	cmp	r3, #40	; 0x28
 80014fa:	d108      	bne.n	800150e <I2C_Slave_ISR_IT+0x8c>
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001502:	d104      	bne.n	800150e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001504:	6939      	ldr	r1, [r7, #16]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 fd84 	bl	8002014 <I2C_ITListenCplt>
 800150c:	e032      	b.n	8001574 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b29      	cmp	r3, #41	; 0x29
 8001518:	d10e      	bne.n	8001538 <I2C_Slave_ISR_IT+0xb6>
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001520:	d00a      	beq.n	8001538 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2210      	movs	r2, #16
 8001528:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 febf 	bl	80022ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 fb3d 	bl	8001bb0 <I2C_ITSlaveSeqCplt>
 8001536:	e01d      	b.n	8001574 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2210      	movs	r2, #16
 800153e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001540:	e096      	b.n	8001670 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2210      	movs	r2, #16
 8001548:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f043 0204 	orr.w	r2, r3, #4
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d004      	beq.n	8001566 <I2C_Slave_ISR_IT+0xe4>
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001562:	f040 8085 	bne.w	8001670 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4619      	mov	r1, r3
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 fda7 	bl	80020c0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001572:	e07d      	b.n	8001670 <I2C_Slave_ISR_IT+0x1ee>
 8001574:	e07c      	b.n	8001670 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d030      	beq.n	80015e4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800158a:	2b00      	cmp	r3, #0
 800158c:	d02a      	beq.n	80015e4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001592:	b29b      	uxth	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d018      	beq.n	80015ca <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	3b01      	subs	r3, #1
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d14f      	bne.n	8001674 <I2C_Slave_ISR_IT+0x1f2>
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80015da:	d04b      	beq.n	8001674 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 fae7 	bl	8001bb0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80015e2:	e047      	b.n	8001674 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	08db      	lsrs	r3, r3, #3
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00a      	beq.n	8001606 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	08db      	lsrs	r3, r3, #3
 80015f4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d004      	beq.n	8001606 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80015fc:	6939      	ldr	r1, [r7, #16]
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 fa15 	bl	8001a2e <I2C_ITAddrCplt>
 8001604:	e037      	b.n	8001676 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d031      	beq.n	8001676 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	085b      	lsrs	r3, r3, #1
 8001616:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800161a:	2b00      	cmp	r3, #0
 800161c:	d02b      	beq.n	8001676 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001622:	b29b      	uxth	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d018      	beq.n	800165a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001642:	b29b      	uxth	r3, r3
 8001644:	3b01      	subs	r3, #1
 8001646:	b29a      	uxth	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001650:	3b01      	subs	r3, #1
 8001652:	b29a      	uxth	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	851a      	strh	r2, [r3, #40]	; 0x28
 8001658:	e00d      	b.n	8001676 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001660:	d002      	beq.n	8001668 <I2C_Slave_ISR_IT+0x1e6>
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d106      	bne.n	8001676 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 faa1 	bl	8001bb0 <I2C_ITSlaveSeqCplt>
 800166e:	e002      	b.n	8001676 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001670:	bf00      	nop
 8001672:	e000      	b.n	8001676 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001674:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af02      	add	r7, sp, #8
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800169a:	2b01      	cmp	r3, #1
 800169c:	d101      	bne.n	80016a2 <I2C_Master_ISR_DMA+0x1a>
 800169e:	2302      	movs	r3, #2
 80016a0:	e0e1      	b.n	8001866 <I2C_Master_ISR_DMA+0x1de>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d017      	beq.n	80016e6 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d011      	beq.n	80016e6 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2210      	movs	r2, #16
 80016c8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f043 0204 	orr.w	r2, r3, #4
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80016d6:	2120      	movs	r1, #32
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 fe59 	bl	8002390 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 fde5 	bl	80022ae <I2C_Flush_TXDR>
 80016e4:	e0ba      	b.n	800185c <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	09db      	lsrs	r3, r3, #7
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d072      	beq.n	80017d8 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	099b      	lsrs	r3, r3, #6
 80016f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d06c      	beq.n	80017d8 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800170c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001712:	b29b      	uxth	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d04e      	beq.n	80017b6 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	b29b      	uxth	r3, r3
 8001720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001724:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172a:	b29b      	uxth	r3, r3
 800172c:	2bff      	cmp	r3, #255	; 0xff
 800172e:	d906      	bls.n	800173e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	22ff      	movs	r2, #255	; 0xff
 8001734:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001736:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	e010      	b.n	8001760 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001742:	b29a      	uxth	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001750:	d003      	beq.n	800175a <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e002      	b.n	8001760 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800175a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800175e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001764:	b2da      	uxtb	r2, r3
 8001766:	8a79      	ldrh	r1, [r7, #18]
 8001768:	2300      	movs	r3, #0
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 fde0 	bl	8002334 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001778:	b29a      	uxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	b29a      	uxth	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b22      	cmp	r3, #34	; 0x22
 8001790:	d108      	bne.n	80017a4 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80017a2:	e05b      	b.n	800185c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017b2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80017b4:	e052      	b.n	800185c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017c4:	d003      	beq.n	80017ce <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f9b5 	bl	8001b36 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80017cc:	e046      	b.n	800185c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80017ce:	2140      	movs	r1, #64	; 0x40
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 fc75 	bl	80020c0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80017d6:	e041      	b.n	800185c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	099b      	lsrs	r3, r3, #6
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d029      	beq.n	8001838 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	099b      	lsrs	r3, r3, #6
 80017e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d023      	beq.n	8001838 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d119      	bne.n	800182e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001808:	d027      	beq.n	800185a <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001812:	d108      	bne.n	8001826 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001822:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001824:	e019      	b.n	800185a <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 f985 	bl	8001b36 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800182c:	e015      	b.n	800185a <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800182e:	2140      	movs	r1, #64	; 0x40
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f000 fc45 	bl	80020c0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001836:	e010      	b.n	800185a <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00b      	beq.n	800185c <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 fa0a 	bl	8001c6c <I2C_ITMasterCplt>
 8001858:	e000      	b.n	800185c <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800185a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b088      	sub	sp, #32
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800188a:	2b01      	cmp	r3, #1
 800188c:	d101      	bne.n	8001892 <I2C_Slave_ISR_DMA+0x24>
 800188e:	2302      	movs	r3, #2
 8001890:	e0c9      	b.n	8001a26 <I2C_Slave_ISR_DMA+0x1b8>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	095b      	lsrs	r3, r3, #5
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	095b      	lsrs	r3, r3, #5
 80018aa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80018b2:	68b9      	ldr	r1, [r7, #8]
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 faa3 	bl	8001e00 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 809a 	beq.w	80019fc <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 8093 	beq.w	80019fc <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	0b9b      	lsrs	r3, r3, #14
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d105      	bne.n	80018ee <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	0bdb      	lsrs	r3, r3, #15
 80018e6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d07f      	beq.n	80019ee <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00d      	beq.n	8001912 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	0bdb      	lsrs	r3, r3, #15
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d007      	beq.n	8001912 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800190e:	2301      	movs	r3, #1
 8001910:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00d      	beq.n	8001936 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	0b9b      	lsrs	r3, r3, #14
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8001932:	2301      	movs	r3, #1
 8001934:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d128      	bne.n	800198e <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b28      	cmp	r3, #40	; 0x28
 8001946:	d108      	bne.n	800195a <I2C_Slave_ISR_DMA+0xec>
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800194e:	d104      	bne.n	800195a <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 fb5e 	bl	8002014 <I2C_ITListenCplt>
 8001958:	e048      	b.n	80019ec <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b29      	cmp	r3, #41	; 0x29
 8001964:	d10e      	bne.n	8001984 <I2C_Slave_ISR_DMA+0x116>
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800196c:	d00a      	beq.n	8001984 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2210      	movs	r2, #16
 8001974:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 fc99 	bl	80022ae <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 f917 	bl	8001bb0 <I2C_ITSlaveSeqCplt>
 8001982:	e033      	b.n	80019ec <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2210      	movs	r2, #16
 800198a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800198c:	e034      	b.n	80019f8 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2210      	movs	r2, #16
 8001994:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f043 0204 	orr.w	r2, r3, #4
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019a8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <I2C_Slave_ISR_DMA+0x14a>
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b6:	d11f      	bne.n	80019f8 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80019b8:	7dfb      	ldrb	r3, [r7, #23]
 80019ba:	2b21      	cmp	r3, #33	; 0x21
 80019bc:	d002      	beq.n	80019c4 <I2C_Slave_ISR_DMA+0x156>
 80019be:	7dfb      	ldrb	r3, [r7, #23]
 80019c0:	2b29      	cmp	r3, #41	; 0x29
 80019c2:	d103      	bne.n	80019cc <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2221      	movs	r2, #33	; 0x21
 80019c8:	631a      	str	r2, [r3, #48]	; 0x30
 80019ca:	e008      	b.n	80019de <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
 80019ce:	2b22      	cmp	r3, #34	; 0x22
 80019d0:	d002      	beq.n	80019d8 <I2C_Slave_ISR_DMA+0x16a>
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
 80019d4:	2b2a      	cmp	r3, #42	; 0x2a
 80019d6:	d102      	bne.n	80019de <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2222      	movs	r2, #34	; 0x22
 80019dc:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	4619      	mov	r1, r3
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 fb6b 	bl	80020c0 <I2C_ITError>
      if (treatdmanack == 1U)
 80019ea:	e005      	b.n	80019f8 <I2C_Slave_ISR_DMA+0x18a>
 80019ec:	e004      	b.n	80019f8 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2210      	movs	r2, #16
 80019f4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80019f6:	e011      	b.n	8001a1c <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80019f8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80019fa:	e00f      	b.n	8001a1c <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	08db      	lsrs	r3, r3, #3
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d009      	beq.n	8001a1c <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	08db      	lsrs	r3, r3, #3
 8001a0c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 f809 	bl	8001a2e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3720      	adds	r7, #32
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001a44:	2b28      	cmp	r3, #40	; 0x28
 8001a46:	d16a      	bne.n	8001b1e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	0c1b      	lsrs	r3, r3, #16
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	0c1b      	lsrs	r3, r3, #16
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001a66:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a74:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001a82:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d138      	bne.n	8001afe <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001a8c:	897b      	ldrh	r3, [r7, #10]
 8001a8e:	09db      	lsrs	r3, r3, #7
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	89bb      	ldrh	r3, [r7, #12]
 8001a94:	4053      	eors	r3, r2
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	f003 0306 	and.w	r3, r3, #6
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d11c      	bne.n	8001ada <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001aa0:	897b      	ldrh	r3, [r7, #10]
 8001aa2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d13b      	bne.n	8001b2e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2208      	movs	r2, #8
 8001ac2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001acc:	89ba      	ldrh	r2, [r7, #12]
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7fe fcd8 	bl	8000488 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001ad8:	e029      	b.n	8001b2e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001ada:	893b      	ldrh	r3, [r7, #8]
 8001adc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001ade:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 fcb8 	bl	8002458 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001af0:	89ba      	ldrh	r2, [r7, #12]
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	4619      	mov	r1, r3
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7fe fcc6 	bl	8000488 <HAL_I2C_AddrCallback>
}
 8001afc:	e017      	b.n	8001b2e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001afe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fca8 	bl	8002458 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b10:	89ba      	ldrh	r2, [r7, #12]
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	4619      	mov	r1, r3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe fcb6 	bl	8000488 <HAL_I2C_AddrCallback>
}
 8001b1c:	e007      	b.n	8001b2e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2208      	movs	r2, #8
 8001b24:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b21      	cmp	r3, #33	; 0x21
 8001b50:	d115      	bne.n	8001b7e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2220      	movs	r2, #32
 8001b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2211      	movs	r2, #17
 8001b5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b66:	2101      	movs	r1, #1
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 fc75 	bl	8002458 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff fc4f 	bl	800141a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001b7c:	e014      	b.n	8001ba8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2220      	movs	r2, #32
 8001b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2212      	movs	r2, #18
 8001b8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b92:	2102      	movs	r1, #2
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 fc5f 	bl	8002458 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fc43 	bl	800142e <HAL_I2C_MasterRxCpltCallback>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	0b9b      	lsrs	r3, r3, #14
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	e00d      	b.n	8001c02 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	0bdb      	lsrs	r3, r3, #15
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c00:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b29      	cmp	r3, #41	; 0x29
 8001c0c:	d112      	bne.n	8001c34 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2228      	movs	r2, #40	; 0x28
 8001c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2221      	movs	r2, #33	; 0x21
 8001c1a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 fc1a 	bl	8002458 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7fe fc9b 	bl	8000568 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001c32:	e017      	b.n	8001c64 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8001c3e:	d111      	bne.n	8001c64 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2228      	movs	r2, #40	; 0x28
 8001c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2222      	movs	r2, #34	; 0x22
 8001c4c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001c4e:	2102      	movs	r1, #2
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 fc01 	bl	8002458 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7fe fc78 	bl	8000554 <HAL_I2C_SlaveRxCpltCallback>
}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b21      	cmp	r3, #33	; 0x21
 8001c8c:	d107      	bne.n	8001c9e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001c8e:	2101      	movs	r1, #1
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fbe1 	bl	8002458 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2211      	movs	r2, #17
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c9c:	e00c      	b.n	8001cb8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b22      	cmp	r3, #34	; 0x22
 8001ca8:	d106      	bne.n	8001cb8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001caa:	2102      	movs	r1, #2
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fbd3 	bl	8002458 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2212      	movs	r2, #18
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6859      	ldr	r1, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4b4d      	ldr	r3, [pc, #308]	; (8001df8 <I2C_ITMasterCplt+0x18c>)
 8001cc4:	400b      	ands	r3, r1
 8001cc6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4a      	ldr	r2, [pc, #296]	; (8001dfc <I2C_ITMasterCplt+0x190>)
 8001cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d009      	beq.n	8001cf4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2210      	movs	r2, #16
 8001ce6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cec:	f043 0204 	orr.w	r2, r3, #4
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b60      	cmp	r3, #96	; 0x60
 8001cfe:	d10b      	bne.n	8001d18 <I2C_ITMasterCplt+0xac>
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8001d16:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fac8 	bl	80022ae <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b60      	cmp	r3, #96	; 0x60
 8001d2e:	d002      	beq.n	8001d36 <I2C_ITMasterCplt+0xca>
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d006      	beq.n	8001d44 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f9bf 	bl	80020c0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001d42:	e054      	b.n	8001dee <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b21      	cmp	r3, #33	; 0x21
 8001d4e:	d124      	bne.n	8001d9a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2220      	movs	r2, #32
 8001d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b40      	cmp	r3, #64	; 0x40
 8001d68:	d10b      	bne.n	8001d82 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff fb61 	bl	8001442 <HAL_I2C_MemTxCpltCallback>
}
 8001d80:	e035      	b.n	8001dee <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fb41 	bl	800141a <HAL_I2C_MasterTxCpltCallback>
}
 8001d98:	e029      	b.n	8001dee <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b22      	cmp	r3, #34	; 0x22
 8001da4:	d123      	bne.n	8001dee <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b40      	cmp	r3, #64	; 0x40
 8001dbe:	d10b      	bne.n	8001dd8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff fb40 	bl	8001456 <HAL_I2C_MemRxCpltCallback>
}
 8001dd6:	e00a      	b.n	8001dee <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fb20 	bl	800142e <HAL_I2C_MasterRxCpltCallback>
}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	fe00e800 	.word	0xfe00e800
 8001dfc:	ffff0000 	.word	0xffff0000

08001e00 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e1c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2220      	movs	r2, #32
 8001e24:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	2b21      	cmp	r3, #33	; 0x21
 8001e2a:	d002      	beq.n	8001e32 <I2C_ITSlaveCplt+0x32>
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	2b29      	cmp	r3, #41	; 0x29
 8001e30:	d108      	bne.n	8001e44 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001e32:	f248 0101 	movw	r1, #32769	; 0x8001
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fb0e 	bl	8002458 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2221      	movs	r2, #33	; 0x21
 8001e40:	631a      	str	r2, [r3, #48]	; 0x30
 8001e42:	e00d      	b.n	8001e60 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	2b22      	cmp	r3, #34	; 0x22
 8001e48:	d002      	beq.n	8001e50 <I2C_ITSlaveCplt+0x50>
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8001e4e:	d107      	bne.n	8001e60 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001e50:	f248 0102 	movw	r1, #32770	; 0x8002
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 faff 	bl	8002458 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2222      	movs	r2, #34	; 0x22
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e6e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6859      	ldr	r1, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	4b64      	ldr	r3, [pc, #400]	; (800200c <I2C_ITSlaveCplt+0x20c>)
 8001e7c:	400b      	ands	r3, r1
 8001e7e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fa14 	bl	80022ae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	0b9b      	lsrs	r3, r3, #14
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d013      	beq.n	8001eba <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ea0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d020      	beq.n	8001eec <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001eb8:	e018      	b.n	8001eec <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	0bdb      	lsrs	r3, r3, #15
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d012      	beq.n	8001eec <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ed4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d020      	beq.n	8001f3a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f023 0304 	bic.w	r3, r3, #4
 8001efe:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00c      	beq.n	8001f3a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f48:	f043 0204 	orr.w	r2, r3, #4
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d010      	beq.n	8001f88 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f8a7 	bl	80020c0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b28      	cmp	r3, #40	; 0x28
 8001f7c:	d141      	bne.n	8002002 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001f7e:	6979      	ldr	r1, [r7, #20]
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f847 	bl	8002014 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001f86:	e03c      	b.n	8002002 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f90:	d014      	beq.n	8001fbc <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fe0c 	bl	8001bb0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <I2C_ITSlaveCplt+0x210>)
 8001f9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7fe fafa 	bl	80005ae <HAL_I2C_ListenCpltCallback>
}
 8001fba:	e022      	b.n	8002002 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b22      	cmp	r3, #34	; 0x22
 8001fc6:	d10e      	bne.n	8001fe6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe fab8 	bl	8000554 <HAL_I2C_SlaveRxCpltCallback>
}
 8001fe4:	e00d      	b.n	8002002 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7fe fab3 	bl	8000568 <HAL_I2C_SlaveTxCpltCallback>
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	fe00e800 	.word	0xfe00e800
 8002010:	ffff0000 	.word	0xffff0000

08002014 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a26      	ldr	r2, [pc, #152]	; (80020bc <I2C_ITListenCplt+0xa8>)
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d022      	beq.n	8002092 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002068:	2b00      	cmp	r3, #0
 800206a:	d012      	beq.n	8002092 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29b      	uxth	r3, r3
 800207e:	3b01      	subs	r3, #1
 8002080:	b29a      	uxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f043 0204 	orr.w	r2, r3, #4
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002092:	f248 0103 	movw	r1, #32771	; 0x8003
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f9de 	bl	8002458 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2210      	movs	r2, #16
 80020a2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7fe fa7e 	bl	80005ae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	ffff0000 	.word	0xffff0000

080020c0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a5d      	ldr	r2, [pc, #372]	; (8002254 <I2C_ITError+0x194>)
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	2b28      	cmp	r3, #40	; 0x28
 80020f6:	d005      	beq.n	8002104 <I2C_ITError+0x44>
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	2b29      	cmp	r3, #41	; 0x29
 80020fc:	d002      	beq.n	8002104 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	2b2a      	cmp	r3, #42	; 0x2a
 8002102:	d10b      	bne.n	800211c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002104:	2103      	movs	r1, #3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f9a6 	bl	8002458 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2228      	movs	r2, #40	; 0x28
 8002110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a50      	ldr	r2, [pc, #320]	; (8002258 <I2C_ITError+0x198>)
 8002118:	635a      	str	r2, [r3, #52]	; 0x34
 800211a:	e011      	b.n	8002140 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800211c:	f248 0103 	movw	r1, #32771	; 0x8003
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f999 	bl	8002458 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b60      	cmp	r3, #96	; 0x60
 8002130:	d003      	beq.n	800213a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2220      	movs	r2, #32
 8002136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214a:	2b00      	cmp	r3, #0
 800214c:	d039      	beq.n	80021c2 <I2C_ITError+0x102>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b11      	cmp	r3, #17
 8002152:	d002      	beq.n	800215a <I2C_ITError+0x9a>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b21      	cmp	r3, #33	; 0x21
 8002158:	d133      	bne.n	80021c2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002168:	d107      	bne.n	800217a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002178:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fd1f 	bl	8000bc2 <HAL_DMA_GetState>
 8002184:	4603      	mov	r3, r0
 8002186:	2b01      	cmp	r3, #1
 8002188:	d017      	beq.n	80021ba <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218e:	4a33      	ldr	r2, [pc, #204]	; (800225c <I2C_ITError+0x19c>)
 8002190:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fcd1 	bl	8000b46 <HAL_DMA_Abort_IT>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d04d      	beq.n	8002246 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021b4:	4610      	mov	r0, r2
 80021b6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80021b8:	e045      	b.n	8002246 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f850 	bl	8002260 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80021c0:	e041      	b.n	8002246 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d039      	beq.n	800223e <I2C_ITError+0x17e>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b12      	cmp	r3, #18
 80021ce:	d002      	beq.n	80021d6 <I2C_ITError+0x116>
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b22      	cmp	r3, #34	; 0x22
 80021d4:	d133      	bne.n	800223e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021e4:	d107      	bne.n	80021f6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe fce1 	bl	8000bc2 <HAL_DMA_GetState>
 8002200:	4603      	mov	r3, r0
 8002202:	2b01      	cmp	r3, #1
 8002204:	d017      	beq.n	8002236 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220a:	4a14      	ldr	r2, [pc, #80]	; (800225c <I2C_ITError+0x19c>)
 800220c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe fc93 	bl	8000b46 <HAL_DMA_Abort_IT>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d011      	beq.n	800224a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002230:	4610      	mov	r0, r2
 8002232:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002234:	e009      	b.n	800224a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f812 	bl	8002260 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800223c:	e005      	b.n	800224a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f80e 	bl	8002260 <I2C_TreatErrorCallback>
  }
}
 8002244:	e002      	b.n	800224c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002246:	bf00      	nop
 8002248:	e000      	b.n	800224c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800224a:	bf00      	nop
}
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	ffff0000 	.word	0xffff0000
 8002258:	08001483 	.word	0x08001483
 800225c:	080022f7 	.word	0x080022f7

08002260 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b60      	cmp	r3, #96	; 0x60
 8002272:	d10e      	bne.n	8002292 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe f99a 	bl	80005c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002290:	e009      	b.n	80022a6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7fe f973 	bl	800058c <HAL_I2C_ErrorCallback>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d103      	bne.n	80022cc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2200      	movs	r2, #0
 80022ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d007      	beq.n	80022ea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699a      	ldr	r2, [r3, #24]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0201 	orr.w	r2, r2, #1
 80022e8:	619a      	str	r2, [r3, #24]
  }
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	2200      	movs	r2, #0
 8002312:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002320:	2200      	movs	r2, #0
 8002322:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f7ff ff9b 	bl	8002260 <I2C_TreatErrorCallback>
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	817b      	strh	r3, [r7, #10]
 8002342:	4613      	mov	r3, r2
 8002344:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	0d5b      	lsrs	r3, r3, #21
 8002350:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002354:	4b0d      	ldr	r3, [pc, #52]	; (800238c <I2C_TransferConfig+0x58>)
 8002356:	430b      	orrs	r3, r1
 8002358:	43db      	mvns	r3, r3
 800235a:	ea02 0103 	and.w	r1, r2, r3
 800235e:	897b      	ldrh	r3, [r7, #10]
 8002360:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002364:	7a7b      	ldrb	r3, [r7, #9]
 8002366:	041b      	lsls	r3, r3, #16
 8002368:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	431a      	orrs	r2, r3
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	431a      	orrs	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	03ff63ff 	.word	0x03ff63ff

08002390 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a4:	4a2a      	ldr	r2, [pc, #168]	; (8002450 <I2C_Enable_IRQ+0xc0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d004      	beq.n	80023b4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80023ae:	4a29      	ldr	r2, [pc, #164]	; (8002454 <I2C_Enable_IRQ+0xc4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d11d      	bne.n	80023f0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80023b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	da03      	bge.n	80023c4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80023c2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80023c4:	887b      	ldrh	r3, [r7, #2]
 80023c6:	2b10      	cmp	r3, #16
 80023c8:	d103      	bne.n	80023d2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80023d0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80023d2:	887b      	ldrh	r3, [r7, #2]
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d103      	bne.n	80023e0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023de:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80023e0:	887b      	ldrh	r3, [r7, #2]
 80023e2:	2b40      	cmp	r3, #64	; 0x40
 80023e4:	d125      	bne.n	8002432 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ec:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80023ee:	e020      	b.n	8002432 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80023f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	da03      	bge.n	8002400 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80023fe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002400:	887b      	ldrh	r3, [r7, #2]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002410:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002412:	887b      	ldrh	r3, [r7, #2]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002422:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002424:	887b      	ldrh	r3, [r7, #2]
 8002426:	2b20      	cmp	r3, #32
 8002428:	d103      	bne.n	8002432 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f043 0320 	orr.w	r3, r3, #32
 8002430:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6819      	ldr	r1, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	430a      	orrs	r2, r1
 8002440:	601a      	str	r2, [r3, #0]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	08001689 	.word	0x08001689
 8002454:	0800186f 	.word	0x0800186f

08002458 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002468:	887b      	ldrh	r3, [r7, #2]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00f      	beq.n	8002492 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002478:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002486:	2b28      	cmp	r3, #40	; 0x28
 8002488:	d003      	beq.n	8002492 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002490:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00f      	beq.n	80024bc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80024a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024b0:	2b28      	cmp	r3, #40	; 0x28
 80024b2:	d003      	beq.n	80024bc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80024ba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80024bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	da03      	bge.n	80024cc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80024ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80024cc:	887b      	ldrh	r3, [r7, #2]
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d103      	bne.n	80024da <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80024d8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80024da:	887b      	ldrh	r3, [r7, #2]
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d103      	bne.n	80024e8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f043 0320 	orr.w	r3, r3, #32
 80024e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80024e8:	887b      	ldrh	r3, [r7, #2]
 80024ea:	2b40      	cmp	r3, #64	; 0x40
 80024ec:	d103      	bne.n	80024f6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6819      	ldr	r1, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	43da      	mvns	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	400a      	ands	r2, r1
 8002506:	601a      	str	r2, [r3, #0]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b20      	cmp	r3, #32
 8002528:	d138      	bne.n	800259c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002534:	2302      	movs	r3, #2
 8002536:	e032      	b.n	800259e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2224      	movs	r2, #36	; 0x24
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0201 	bic.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002566:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6819      	ldr	r1, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0201 	orr.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	e000      	b.n	800259e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800259c:	2302      	movs	r3, #2
  }
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b085      	sub	sp, #20
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d139      	bne.n	8002634 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e033      	b.n	8002636 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2224      	movs	r2, #36	; 0x24
 80025da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	e000      	b.n	8002636 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002634:	2302      	movs	r3, #2
  }
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800264a:	af00      	add	r7, sp, #0
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	f000 bef4 	b.w	8003446 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 816a 	beq.w	8002942 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800266e:	4bb3      	ldr	r3, [pc, #716]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b04      	cmp	r3, #4
 8002678:	d00c      	beq.n	8002694 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800267a:	4bb0      	ldr	r3, [pc, #704]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b08      	cmp	r3, #8
 8002684:	d159      	bne.n	800273a <HAL_RCC_OscConfig+0xf6>
 8002686:	4bad      	ldr	r3, [pc, #692]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002692:	d152      	bne.n	800273a <HAL_RCC_OscConfig+0xf6>
 8002694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002698:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d102      	bne.n	80026c6 <HAL_RCC_OscConfig+0x82>
 80026c0:	4b9e      	ldr	r3, [pc, #632]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	e015      	b.n	80026f2 <HAL_RCC_OscConfig+0xae>
 80026c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80026da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026de:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80026e2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80026ee:	4b93      	ldr	r3, [pc, #588]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026f6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80026fa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80026fe:	fa92 f2a2 	rbit	r2, r2
 8002702:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002706:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800270a:	fab2 f282 	clz	r2, r2
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	f042 0220 	orr.w	r2, r2, #32
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	f002 021f 	and.w	r2, r2, #31
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f202 	lsl.w	r2, r1, r2
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 810c 	beq.w	8002940 <HAL_RCC_OscConfig+0x2fc>
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f040 8106 	bne.w	8002940 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	f000 be86 	b.w	8003446 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002744:	d106      	bne.n	8002754 <HAL_RCC_OscConfig+0x110>
 8002746:	4b7d      	ldr	r3, [pc, #500]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7c      	ldr	r2, [pc, #496]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 800274c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e030      	b.n	80027b6 <HAL_RCC_OscConfig+0x172>
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x134>
 800275e:	4b77      	ldr	r3, [pc, #476]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a76      	ldr	r2, [pc, #472]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b74      	ldr	r3, [pc, #464]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a73      	ldr	r2, [pc, #460]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e01e      	b.n	80027b6 <HAL_RCC_OscConfig+0x172>
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002782:	d10c      	bne.n	800279e <HAL_RCC_OscConfig+0x15a>
 8002784:	4b6d      	ldr	r3, [pc, #436]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a6c      	ldr	r2, [pc, #432]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 800278a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b6a      	ldr	r3, [pc, #424]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a69      	ldr	r2, [pc, #420]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	e00b      	b.n	80027b6 <HAL_RCC_OscConfig+0x172>
 800279e:	4b67      	ldr	r3, [pc, #412]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a66      	ldr	r2, [pc, #408]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80027a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b64      	ldr	r3, [pc, #400]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a63      	ldr	r2, [pc, #396]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80027b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027b6:	4b61      	ldr	r3, [pc, #388]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	f023 020f 	bic.w	r2, r3, #15
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	495d      	ldr	r1, [pc, #372]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d059      	beq.n	8002888 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7fe f89a 	bl	800090c <HAL_GetTick>
 80027d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027dc:	e00a      	b.n	80027f4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027de:	f7fe f895 	bl	800090c <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	; 0x64
 80027ec:	d902      	bls.n	80027f4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	f000 be29 	b.w	8003446 <HAL_RCC_OscConfig+0xe02>
 80027f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002808:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d102      	bne.n	8002826 <HAL_RCC_OscConfig+0x1e2>
 8002820:	4b46      	ldr	r3, [pc, #280]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	e015      	b.n	8002852 <HAL_RCC_OscConfig+0x20e>
 8002826:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800282a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800283a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800283e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002842:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800284e:	4b3b      	ldr	r3, [pc, #236]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002856:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800285a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800285e:	fa92 f2a2 	rbit	r2, r2
 8002862:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002866:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800286a:	fab2 f282 	clz	r2, r2
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f042 0220 	orr.w	r2, r2, #32
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f002 021f 	and.w	r2, r2, #31
 800287a:	2101      	movs	r1, #1
 800287c:	fa01 f202 	lsl.w	r2, r1, r2
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0ab      	beq.n	80027de <HAL_RCC_OscConfig+0x19a>
 8002886:	e05c      	b.n	8002942 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe f840 	bl	800090c <HAL_GetTick>
 800288c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002890:	e00a      	b.n	80028a8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002892:	f7fe f83b 	bl	800090c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d902      	bls.n	80028a8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	f000 bdcf 	b.w	8003446 <HAL_RCC_OscConfig+0xe02>
 80028a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80028bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d102      	bne.n	80028da <HAL_RCC_OscConfig+0x296>
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	e015      	b.n	8002906 <HAL_RCC_OscConfig+0x2c2>
 80028da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80028ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028f2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80028f6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <HAL_RCC_OscConfig+0x2f8>)
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800290a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800290e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002912:	fa92 f2a2 	rbit	r2, r2
 8002916:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800291a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800291e:	fab2 f282 	clz	r2, r2
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	f042 0220 	orr.w	r2, r2, #32
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	f002 021f 	and.w	r2, r2, #31
 800292e:	2101      	movs	r1, #1
 8002930:	fa01 f202 	lsl.w	r2, r1, r2
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1ab      	bne.n	8002892 <HAL_RCC_OscConfig+0x24e>
 800293a:	e002      	b.n	8002942 <HAL_RCC_OscConfig+0x2fe>
 800293c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 816f 	beq.w	8002c30 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002952:	4bd0      	ldr	r3, [pc, #832]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800295e:	4bcd      	ldr	r3, [pc, #820]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b08      	cmp	r3, #8
 8002968:	d16c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x400>
 800296a:	4bca      	ldr	r3, [pc, #808]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d166      	bne.n	8002a44 <HAL_RCC_OscConfig+0x400>
 8002976:	2302      	movs	r3, #2
 8002978:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002988:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d102      	bne.n	80029a6 <HAL_RCC_OscConfig+0x362>
 80029a0:	4bbc      	ldr	r3, [pc, #752]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	e013      	b.n	80029ce <HAL_RCC_OscConfig+0x38a>
 80029a6:	2302      	movs	r3, #2
 80029a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80029b8:	2302      	movs	r3, #2
 80029ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80029be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80029ca:	4bb2      	ldr	r3, [pc, #712]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2202      	movs	r2, #2
 80029d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80029d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80029d8:	fa92 f2a2 	rbit	r2, r2
 80029dc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80029e0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80029e4:	fab2 f282 	clz	r2, r2
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	f042 0220 	orr.w	r2, r2, #32
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	f002 021f 	and.w	r2, r2, #31
 80029f4:	2101      	movs	r1, #1
 80029f6:	fa01 f202 	lsl.w	r2, r1, r2
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <HAL_RCC_OscConfig+0x3cc>
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d002      	beq.n	8002a10 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f000 bd1b 	b.w	8003446 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4ba0      	ldr	r3, [pc, #640]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	21f8      	movs	r1, #248	; 0xf8
 8002a20:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a28:	fa91 f1a1 	rbit	r1, r1
 8002a2c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002a30:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002a34:	fab1 f181 	clz	r1, r1
 8002a38:	b2c9      	uxtb	r1, r1
 8002a3a:	408b      	lsls	r3, r1
 8002a3c:	4995      	ldr	r1, [pc, #596]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	e0f5      	b.n	8002c30 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8085 	beq.w	8002b5a <HAL_RCC_OscConfig+0x516>
 8002a50:	2301      	movs	r3, #1
 8002a52:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a62:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	461a      	mov	r2, r3
 8002a78:	2301      	movs	r3, #1
 8002a7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7fd ff46 	bl	800090c <HAL_GetTick>
 8002a80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a86:	f7fd ff41 	bl	800090c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d902      	bls.n	8002a9c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	f000 bcd5 	b.w	8003446 <HAL_RCC_OscConfig+0xe02>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002aae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d102      	bne.n	8002acc <HAL_RCC_OscConfig+0x488>
 8002ac6:	4b73      	ldr	r3, [pc, #460]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	e013      	b.n	8002af4 <HAL_RCC_OscConfig+0x4b0>
 8002acc:	2302      	movs	r3, #2
 8002ace:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002ade:	2302      	movs	r3, #2
 8002ae0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ae4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002af0:	4b68      	ldr	r3, [pc, #416]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	2202      	movs	r2, #2
 8002af6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002afa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002afe:	fa92 f2a2 	rbit	r2, r2
 8002b02:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002b06:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002b0a:	fab2 f282 	clz	r2, r2
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	f042 0220 	orr.w	r2, r2, #32
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	f002 021f 	and.w	r2, r2, #31
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0af      	beq.n	8002a86 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b26:	4b5b      	ldr	r3, [pc, #364]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	21f8      	movs	r1, #248	; 0xf8
 8002b36:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b3e:	fa91 f1a1 	rbit	r1, r1
 8002b42:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b46:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b4a:	fab1 f181 	clz	r1, r1
 8002b4e:	b2c9      	uxtb	r1, r1
 8002b50:	408b      	lsls	r3, r1
 8002b52:	4950      	ldr	r1, [pc, #320]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
 8002b58:	e06a      	b.n	8002c30 <HAL_RCC_OscConfig+0x5ec>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b64:	fa93 f3a3 	rbit	r3, r3
 8002b68:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	461a      	mov	r2, r3
 8002b82:	2300      	movs	r3, #0
 8002b84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7fd fec1 	bl	800090c <HAL_GetTick>
 8002b8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b90:	f7fd febc 	bl	800090c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d902      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	f000 bc50 	b.w	8003446 <HAL_RCC_OscConfig+0xe02>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d102      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x592>
 8002bd0:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	e013      	b.n	8002bfe <HAL_RCC_OscConfig+0x5ba>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002be8:	2302      	movs	r3, #2
 8002bea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002bee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002bfa:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <HAL_RCC_OscConfig+0x650>)
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002c04:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c08:	fa92 f2a2 	rbit	r2, r2
 8002c0c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002c10:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002c14:	fab2 f282 	clz	r2, r2
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	f042 0220 	orr.w	r2, r2, #32
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	f002 021f 	and.w	r2, r2, #31
 8002c24:	2101      	movs	r1, #1
 8002c26:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1af      	bne.n	8002b90 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c30:	1d3b      	adds	r3, r7, #4
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80da 	beq.w	8002df4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c40:	1d3b      	adds	r3, r7, #4
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d069      	beq.n	8002d1e <HAL_RCC_OscConfig+0x6da>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c60:	fab3 f383 	clz	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCC_OscConfig+0x654>)
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2301      	movs	r3, #1
 8002c72:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7fd fe4a 	bl	800090c <HAL_GetTick>
 8002c78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7c:	e00e      	b.n	8002c9c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7e:	f7fd fe45 	bl	800090c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d906      	bls.n	8002c9c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e3d9      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	10908120 	.word	0x10908120
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002cae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	fa93 f2a3 	rbit	r2, r3
 8002cc0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002cca:	2202      	movs	r2, #2
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	fa93 f2a3 	rbit	r2, r3
 8002cd8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002cdc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cde:	4ba5      	ldr	r3, [pc, #660]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002ce6:	2102      	movs	r1, #2
 8002ce8:	6019      	str	r1, [r3, #0]
 8002cea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	fa93 f1a3 	rbit	r1, r3
 8002cf4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cf8:	6019      	str	r1, [r3, #0]
  return result;
 8002cfa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	2101      	movs	r1, #1
 8002d12:	fa01 f303 	lsl.w	r3, r1, r3
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0b0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x63a>
 8002d1c:	e06a      	b.n	8002df4 <HAL_RCC_OscConfig+0x7b0>
 8002d1e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	fa93 f2a3 	rbit	r2, r3
 8002d30:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d34:	601a      	str	r2, [r3, #0]
  return result;
 8002d36:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d3a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b8c      	ldr	r3, [pc, #560]	; (8002f78 <HAL_RCC_OscConfig+0x934>)
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d50:	f7fd fddc 	bl	800090c <HAL_GetTick>
 8002d54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d58:	e009      	b.n	8002d6e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d5a:	f7fd fdd7 	bl	800090c <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e36b      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
 8002d6e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d72:	2202      	movs	r2, #2
 8002d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	fa93 f2a3 	rbit	r2, r3
 8002d80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	fa93 f2a3 	rbit	r2, r3
 8002d98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002da2:	2202      	movs	r2, #2
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	fa93 f2a3 	rbit	r2, r3
 8002db0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002db4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db6:	4b6f      	ldr	r3, [pc, #444]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	6019      	str	r1, [r3, #0]
 8002dc2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	fa93 f1a3 	rbit	r1, r3
 8002dcc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002dd0:	6019      	str	r1, [r3, #0]
  return result;
 8002dd2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	fab3 f383 	clz	r3, r3
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	2101      	movs	r1, #1
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1b2      	bne.n	8002d5a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df4:	1d3b      	adds	r3, r7, #4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 8158 	beq.w	80030b4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e04:	2300      	movs	r3, #0
 8002e06:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0a:	4b5a      	ldr	r3, [pc, #360]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d112      	bne.n	8002e3c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e16:	4b57      	ldr	r3, [pc, #348]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4a56      	ldr	r2, [pc, #344]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e20:	61d3      	str	r3, [r2, #28]
 8002e22:	4b54      	ldr	r3, [pc, #336]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e2a:	f107 0308 	add.w	r3, r7, #8
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	f107 0308 	add.w	r3, r7, #8
 8002e34:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e36:	2301      	movs	r3, #1
 8002e38:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3c:	4b4f      	ldr	r3, [pc, #316]	; (8002f7c <HAL_RCC_OscConfig+0x938>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d11a      	bne.n	8002e7e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e48:	4b4c      	ldr	r3, [pc, #304]	; (8002f7c <HAL_RCC_OscConfig+0x938>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a4b      	ldr	r2, [pc, #300]	; (8002f7c <HAL_RCC_OscConfig+0x938>)
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e52:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e54:	f7fd fd5a 	bl	800090c <HAL_GetTick>
 8002e58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	e009      	b.n	8002e72 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5e:	f7fd fd55 	bl	800090c <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e2e9      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e72:	4b42      	ldr	r3, [pc, #264]	; (8002f7c <HAL_RCC_OscConfig+0x938>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0ef      	beq.n	8002e5e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d106      	bne.n	8002e96 <HAL_RCC_OscConfig+0x852>
 8002e88:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4a39      	ldr	r2, [pc, #228]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6213      	str	r3, [r2, #32]
 8002e94:	e02f      	b.n	8002ef6 <HAL_RCC_OscConfig+0x8b2>
 8002e96:	1d3b      	adds	r3, r7, #4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10c      	bne.n	8002eba <HAL_RCC_OscConfig+0x876>
 8002ea0:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4a33      	ldr	r2, [pc, #204]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	6213      	str	r3, [r2, #32]
 8002eac:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4a30      	ldr	r2, [pc, #192]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002eb2:	f023 0304 	bic.w	r3, r3, #4
 8002eb6:	6213      	str	r3, [r2, #32]
 8002eb8:	e01d      	b.n	8002ef6 <HAL_RCC_OscConfig+0x8b2>
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2b05      	cmp	r3, #5
 8002ec2:	d10c      	bne.n	8002ede <HAL_RCC_OscConfig+0x89a>
 8002ec4:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4a2a      	ldr	r2, [pc, #168]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	6213      	str	r3, [r2, #32]
 8002ed0:	4b28      	ldr	r3, [pc, #160]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4a27      	ldr	r2, [pc, #156]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6213      	str	r3, [r2, #32]
 8002edc:	e00b      	b.n	8002ef6 <HAL_RCC_OscConfig+0x8b2>
 8002ede:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4a24      	ldr	r2, [pc, #144]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	6213      	str	r3, [r2, #32]
 8002eea:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4a21      	ldr	r2, [pc, #132]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef6:	1d3b      	adds	r3, r7, #4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d06b      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f00:	f7fd fd04 	bl	800090c <HAL_GetTick>
 8002f04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f08:	e00b      	b.n	8002f22 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fd fcff 	bl	800090c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e291      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
 8002f22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f26:	2202      	movs	r2, #2
 8002f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	fa93 f2a3 	rbit	r2, r3
 8002f34:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f3e:	2202      	movs	r2, #2
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	fa93 f2a3 	rbit	r2, r3
 8002f4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f50:	601a      	str	r2, [r3, #0]
  return result;
 8002f52:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f043 0302 	orr.w	r3, r3, #2
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d109      	bne.n	8002f80 <HAL_RCC_OscConfig+0x93c>
 8002f6c:	4b01      	ldr	r3, [pc, #4]	; (8002f74 <HAL_RCC_OscConfig+0x930>)
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	e014      	b.n	8002f9c <HAL_RCC_OscConfig+0x958>
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	10908120 	.word	0x10908120
 8002f7c:	40007000 	.word	0x40007000
 8002f80:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f84:	2202      	movs	r2, #2
 8002f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	fa93 f2a3 	rbit	r2, r3
 8002f92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	4bbb      	ldr	r3, [pc, #748]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	6011      	str	r1, [r2, #0]
 8002fa4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	fa92 f1a2 	rbit	r1, r2
 8002fae:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002fb2:	6011      	str	r1, [r2, #0]
  return result;
 8002fb4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	fab2 f282 	clz	r2, r2
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	f002 021f 	and.w	r2, r2, #31
 8002fca:	2101      	movs	r1, #1
 8002fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d099      	beq.n	8002f0a <HAL_RCC_OscConfig+0x8c6>
 8002fd6:	e063      	b.n	80030a0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd8:	f7fd fc98 	bl	800090c <HAL_GetTick>
 8002fdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe0:	e00b      	b.n	8002ffa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe2:	f7fd fc93 	bl	800090c <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e225      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
 8002ffa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ffe:	2202      	movs	r2, #2
 8003000:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	fa93 f2a3 	rbit	r2, r3
 800300c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003016:	2202      	movs	r2, #2
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	fa93 f2a3 	rbit	r2, r3
 8003024:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003028:	601a      	str	r2, [r3, #0]
  return result;
 800302a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800302e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f043 0302 	orr.w	r3, r3, #2
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d102      	bne.n	800304a <HAL_RCC_OscConfig+0xa06>
 8003044:	4b90      	ldr	r3, [pc, #576]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	e00d      	b.n	8003066 <HAL_RCC_OscConfig+0xa22>
 800304a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800304e:	2202      	movs	r2, #2
 8003050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	fa93 f2a3 	rbit	r2, r3
 800305c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	4b89      	ldr	r3, [pc, #548]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800306a:	2102      	movs	r1, #2
 800306c:	6011      	str	r1, [r2, #0]
 800306e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	fa92 f1a2 	rbit	r1, r2
 8003078:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800307c:	6011      	str	r1, [r2, #0]
  return result;
 800307e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	fab2 f282 	clz	r2, r2
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	f002 021f 	and.w	r2, r2, #31
 8003094:	2101      	movs	r1, #1
 8003096:	fa01 f202 	lsl.w	r2, r1, r2
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1a0      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d105      	bne.n	80030b4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a8:	4b77      	ldr	r3, [pc, #476]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	4a76      	ldr	r2, [pc, #472]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 80030ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b4:	1d3b      	adds	r3, r7, #4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 81c2 	beq.w	8003444 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c0:	4b71      	ldr	r3, [pc, #452]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 030c 	and.w	r3, r3, #12
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	f000 819c 	beq.w	8003406 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ce:	1d3b      	adds	r3, r7, #4
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	f040 8114 	bne.w	8003302 <HAL_RCC_OscConfig+0xcbe>
 80030da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	fa93 f2a3 	rbit	r2, r3
 80030ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80030f2:	601a      	str	r2, [r3, #0]
  return result;
 80030f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80030f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003104:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	461a      	mov	r2, r3
 800310c:	2300      	movs	r3, #0
 800310e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fd fbfc 	bl	800090c <HAL_GetTick>
 8003114:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003118:	e009      	b.n	800312e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311a:	f7fd fbf7 	bl	800090c <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e18b      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
 800312e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003132:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	fa93 f2a3 	rbit	r2, r3
 8003142:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003146:	601a      	str	r2, [r3, #0]
  return result;
 8003148:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800314c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d102      	bne.n	8003168 <HAL_RCC_OscConfig+0xb24>
 8003162:	4b49      	ldr	r3, [pc, #292]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	e01b      	b.n	80031a0 <HAL_RCC_OscConfig+0xb5c>
 8003168:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800316c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	fa93 f2a3 	rbit	r2, r3
 800317c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003186:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	fa93 f2a3 	rbit	r2, r3
 8003196:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	4b3a      	ldr	r3, [pc, #232]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031a8:	6011      	str	r1, [r2, #0]
 80031aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	fa92 f1a2 	rbit	r1, r2
 80031b4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80031b8:	6011      	str	r1, [r2, #0]
  return result;
 80031ba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	fab2 f282 	clz	r2, r2
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	f042 0220 	orr.w	r2, r2, #32
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	f002 021f 	and.w	r2, r2, #31
 80031d0:	2101      	movs	r1, #1
 80031d2:	fa01 f202 	lsl.w	r2, r1, r2
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d19e      	bne.n	800311a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031dc:	4b2a      	ldr	r3, [pc, #168]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031ea:	1d3b      	adds	r3, r7, #4
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	4925      	ldr	r1, [pc, #148]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]
 80031f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f2a3 	rbit	r2, r3
 800320c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003210:	601a      	str	r2, [r3, #0]
  return result;
 8003212:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003216:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003218:	fab3 f383 	clz	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003222:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	461a      	mov	r2, r3
 800322a:	2301      	movs	r3, #1
 800322c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322e:	f7fd fb6d 	bl	800090c <HAL_GetTick>
 8003232:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003236:	e009      	b.n	800324c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003238:	f7fd fb68 	bl	800090c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0fc      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
 800324c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003250:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003254:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003256:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	fa93 f2a3 	rbit	r2, r3
 8003260:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003264:	601a      	str	r2, [r3, #0]
  return result;
 8003266:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800326a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b01      	cmp	r3, #1
 800327e:	d105      	bne.n	800328c <HAL_RCC_OscConfig+0xc48>
 8003280:	4b01      	ldr	r3, [pc, #4]	; (8003288 <HAL_RCC_OscConfig+0xc44>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	e01e      	b.n	80032c4 <HAL_RCC_OscConfig+0xc80>
 8003286:	bf00      	nop
 8003288:	40021000 	.word	0x40021000
 800328c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003290:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003294:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	fa93 f2a3 	rbit	r2, r3
 80032a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	fa93 f2a3 	rbit	r2, r3
 80032ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	4b63      	ldr	r3, [pc, #396]	; (8003450 <HAL_RCC_OscConfig+0xe0c>)
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032cc:	6011      	str	r1, [r2, #0]
 80032ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	fa92 f1a2 	rbit	r1, r2
 80032d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80032dc:	6011      	str	r1, [r2, #0]
  return result;
 80032de:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	fab2 f282 	clz	r2, r2
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	f042 0220 	orr.w	r2, r2, #32
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	f002 021f 	and.w	r2, r2, #31
 80032f4:	2101      	movs	r1, #1
 80032f6:	fa01 f202 	lsl.w	r2, r1, r2
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d09b      	beq.n	8003238 <HAL_RCC_OscConfig+0xbf4>
 8003300:	e0a0      	b.n	8003444 <HAL_RCC_OscConfig+0xe00>
 8003302:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003306:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800330a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	fa93 f2a3 	rbit	r2, r3
 8003316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800331a:	601a      	str	r2, [r3, #0]
  return result;
 800331c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003320:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800332c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	461a      	mov	r2, r3
 8003334:	2300      	movs	r3, #0
 8003336:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fd fae8 	bl	800090c <HAL_GetTick>
 800333c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003340:	e009      	b.n	8003356 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003342:	f7fd fae3 	bl	800090c <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e077      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
 8003356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800335a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800335e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	fa93 f2a3 	rbit	r2, r3
 800336a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800336e:	601a      	str	r2, [r3, #0]
  return result;
 8003370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003374:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d102      	bne.n	8003390 <HAL_RCC_OscConfig+0xd4c>
 800338a:	4b31      	ldr	r3, [pc, #196]	; (8003450 <HAL_RCC_OscConfig+0xe0c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	e01b      	b.n	80033c8 <HAL_RCC_OscConfig+0xd84>
 8003390:	f107 0320 	add.w	r3, r7, #32
 8003394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	f107 0320 	add.w	r3, r7, #32
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	fa93 f2a3 	rbit	r2, r3
 80033a4:	f107 031c 	add.w	r3, r7, #28
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	f107 0318 	add.w	r3, r7, #24
 80033ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	f107 0318 	add.w	r3, r7, #24
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	fa93 f2a3 	rbit	r2, r3
 80033be:	f107 0314 	add.w	r3, r7, #20
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	4b22      	ldr	r3, [pc, #136]	; (8003450 <HAL_RCC_OscConfig+0xe0c>)
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	f107 0210 	add.w	r2, r7, #16
 80033cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033d0:	6011      	str	r1, [r2, #0]
 80033d2:	f107 0210 	add.w	r2, r7, #16
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	fa92 f1a2 	rbit	r1, r2
 80033dc:	f107 020c 	add.w	r2, r7, #12
 80033e0:	6011      	str	r1, [r2, #0]
  return result;
 80033e2:	f107 020c 	add.w	r2, r7, #12
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	fab2 f282 	clz	r2, r2
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	f042 0220 	orr.w	r2, r2, #32
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	f002 021f 	and.w	r2, r2, #31
 80033f8:	2101      	movs	r1, #1
 80033fa:	fa01 f202 	lsl.w	r2, r1, r2
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d19e      	bne.n	8003342 <HAL_RCC_OscConfig+0xcfe>
 8003404:	e01e      	b.n	8003444 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003406:	1d3b      	adds	r3, r7, #4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e018      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <HAL_RCC_OscConfig+0xe0c>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800341c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003420:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003424:	1d3b      	adds	r3, r7, #4
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	429a      	cmp	r2, r3
 800342c:	d108      	bne.n	8003440 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800342e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003432:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003436:	1d3b      	adds	r3, r7, #4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000

08003454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b09e      	sub	sp, #120	; 0x78
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e162      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800346c:	4b90      	ldr	r3, [pc, #576]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d910      	bls.n	800349c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b8d      	ldr	r3, [pc, #564]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 0207 	bic.w	r2, r3, #7
 8003482:	498b      	ldr	r1, [pc, #556]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b89      	ldr	r3, [pc, #548]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e14a      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a8:	4b82      	ldr	r3, [pc, #520]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	497f      	ldr	r1, [pc, #508]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 80dc 	beq.w	8003680 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d13c      	bne.n	800354a <HAL_RCC_ClockConfig+0xf6>
 80034d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e0:	fab3 f383 	clz	r3, r3
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d102      	bne.n	80034fa <HAL_RCC_ClockConfig+0xa6>
 80034f4:	4b6f      	ldr	r3, [pc, #444]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	e00f      	b.n	800351a <HAL_RCC_ClockConfig+0xc6>
 80034fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	667b      	str	r3, [r7, #100]	; 0x64
 8003508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800350c:	663b      	str	r3, [r7, #96]	; 0x60
 800350e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003516:	4b67      	ldr	r3, [pc, #412]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800351e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003520:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003522:	fa92 f2a2 	rbit	r2, r2
 8003526:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003528:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800352a:	fab2 f282 	clz	r2, r2
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	f042 0220 	orr.w	r2, r2, #32
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	f002 021f 	and.w	r2, r2, #31
 800353a:	2101      	movs	r1, #1
 800353c:	fa01 f202 	lsl.w	r2, r1, r2
 8003540:	4013      	ands	r3, r2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d17b      	bne.n	800363e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0f3      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d13c      	bne.n	80035cc <HAL_RCC_ClockConfig+0x178>
 8003552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003556:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d102      	bne.n	800357c <HAL_RCC_ClockConfig+0x128>
 8003576:	4b4f      	ldr	r3, [pc, #316]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	e00f      	b.n	800359c <HAL_RCC_ClockConfig+0x148>
 800357c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003580:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003584:	fa93 f3a3 	rbit	r3, r3
 8003588:	647b      	str	r3, [r7, #68]	; 0x44
 800358a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800358e:	643b      	str	r3, [r7, #64]	; 0x40
 8003590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003592:	fa93 f3a3 	rbit	r3, r3
 8003596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003598:	4b46      	ldr	r3, [pc, #280]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80035a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035a4:	fa92 f2a2 	rbit	r2, r2
 80035a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80035aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ac:	fab2 f282 	clz	r2, r2
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	f042 0220 	orr.w	r2, r2, #32
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	f002 021f 	and.w	r2, r2, #31
 80035bc:	2101      	movs	r1, #1
 80035be:	fa01 f202 	lsl.w	r2, r1, r2
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d13a      	bne.n	800363e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0b2      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
 80035cc:	2302      	movs	r3, #2
 80035ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035da:	fab3 f383 	clz	r3, r3
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	095b      	lsrs	r3, r3, #5
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d102      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x1a0>
 80035ee:	4b31      	ldr	r3, [pc, #196]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	e00d      	b.n	8003610 <HAL_RCC_ClockConfig+0x1bc>
 80035f4:	2302      	movs	r3, #2
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	fa93 f3a3 	rbit	r3, r3
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003600:	2302      	movs	r3, #2
 8003602:	623b      	str	r3, [r7, #32]
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	fa93 f3a3 	rbit	r3, r3
 800360a:	61fb      	str	r3, [r7, #28]
 800360c:	4b29      	ldr	r3, [pc, #164]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	2202      	movs	r2, #2
 8003612:	61ba      	str	r2, [r7, #24]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	fa92 f2a2 	rbit	r2, r2
 800361a:	617a      	str	r2, [r7, #20]
  return result;
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	fab2 f282 	clz	r2, r2
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	f042 0220 	orr.w	r2, r2, #32
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	f002 021f 	and.w	r2, r2, #31
 800362e:	2101      	movs	r1, #1
 8003630:	fa01 f202 	lsl.w	r2, r1, r2
 8003634:	4013      	ands	r3, r2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e079      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800363e:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f023 0203 	bic.w	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	491a      	ldr	r1, [pc, #104]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003650:	f7fd f95c 	bl	800090c <HAL_GetTick>
 8003654:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	e00a      	b.n	800366e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003658:	f7fd f958 	bl	800090c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e061      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 020c 	and.w	r2, r3, #12
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	429a      	cmp	r2, r3
 800367e:	d1eb      	bne.n	8003658 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d214      	bcs.n	80036b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 0207 	bic.w	r2, r3, #7
 8003696:	4906      	ldr	r1, [pc, #24]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800369e:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e040      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
 80036b0:	40022000 	.word	0x40022000
 80036b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c4:	4b1d      	ldr	r3, [pc, #116]	; (800373c <HAL_RCC_ClockConfig+0x2e8>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	491a      	ldr	r1, [pc, #104]	; (800373c <HAL_RCC_ClockConfig+0x2e8>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e2:	4b16      	ldr	r3, [pc, #88]	; (800373c <HAL_RCC_ClockConfig+0x2e8>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4912      	ldr	r1, [pc, #72]	; (800373c <HAL_RCC_ClockConfig+0x2e8>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036f6:	f000 f829 	bl	800374c <HAL_RCC_GetSysClockFreq>
 80036fa:	4601      	mov	r1, r0
 80036fc:	4b0f      	ldr	r3, [pc, #60]	; (800373c <HAL_RCC_ClockConfig+0x2e8>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003704:	22f0      	movs	r2, #240	; 0xf0
 8003706:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	fa92 f2a2 	rbit	r2, r2
 800370e:	60fa      	str	r2, [r7, #12]
  return result;
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	fab2 f282 	clz	r2, r2
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	40d3      	lsrs	r3, r2
 800371a:	4a09      	ldr	r2, [pc, #36]	; (8003740 <HAL_RCC_ClockConfig+0x2ec>)
 800371c:	5cd3      	ldrb	r3, [r2, r3]
 800371e:	fa21 f303 	lsr.w	r3, r1, r3
 8003722:	4a08      	ldr	r2, [pc, #32]	; (8003744 <HAL_RCC_ClockConfig+0x2f0>)
 8003724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_RCC_ClockConfig+0x2f4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fd f8aa 	bl	8000884 <HAL_InitTick>
  
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3778      	adds	r7, #120	; 0x78
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	080042c0 	.word	0x080042c0
 8003744:	20000004 	.word	0x20000004
 8003748:	20000008 	.word	0x20000008

0800374c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	b08b      	sub	sp, #44	; 0x2c
 8003750:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	2300      	movs	r3, #0
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	2300      	movs	r3, #0
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003766:	4b29      	ldr	r3, [pc, #164]	; (800380c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b04      	cmp	r3, #4
 8003774:	d002      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x30>
 8003776:	2b08      	cmp	r3, #8
 8003778:	d003      	beq.n	8003782 <HAL_RCC_GetSysClockFreq+0x36>
 800377a:	e03c      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800377c:	4b24      	ldr	r3, [pc, #144]	; (8003810 <HAL_RCC_GetSysClockFreq+0xc4>)
 800377e:	623b      	str	r3, [r7, #32]
      break;
 8003780:	e03c      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003788:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800378c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	fa92 f2a2 	rbit	r2, r2
 8003794:	607a      	str	r2, [r7, #4]
  return result;
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	fab2 f282 	clz	r2, r2
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	40d3      	lsrs	r3, r2
 80037a0:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <HAL_RCC_GetSysClockFreq+0xc8>)
 80037a2:	5cd3      	ldrb	r3, [r2, r3]
 80037a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_RCC_GetSysClockFreq+0xc0>)
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	220f      	movs	r2, #15
 80037b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	fa92 f2a2 	rbit	r2, r2
 80037b8:	60fa      	str	r2, [r7, #12]
  return result;
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	fab2 f282 	clz	r2, r2
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	40d3      	lsrs	r3, r2
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
 80037c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037d4:	4a0e      	ldr	r2, [pc, #56]	; (8003810 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	fb02 f303 	mul.w	r3, r2, r3
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
 80037e4:	e004      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	4a0c      	ldr	r2, [pc, #48]	; (800381c <HAL_RCC_GetSysClockFreq+0xd0>)
 80037ea:	fb02 f303 	mul.w	r3, r2, r3
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	623b      	str	r3, [r7, #32]
      break;
 80037f4:	e002      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037f6:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037f8:	623b      	str	r3, [r7, #32]
      break;
 80037fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037fc:	6a3b      	ldr	r3, [r7, #32]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	372c      	adds	r7, #44	; 0x2c
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
 8003810:	007a1200 	.word	0x007a1200
 8003814:	080042d8 	.word	0x080042d8
 8003818:	080042e8 	.word	0x080042e8
 800381c:	003d0900 	.word	0x003d0900

08003820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003824:	4b03      	ldr	r3, [pc, #12]	; (8003834 <HAL_RCC_GetHCLKFreq+0x14>)
 8003826:	681b      	ldr	r3, [r3, #0]
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20000004 	.word	0x20000004

08003838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800383e:	f7ff ffef 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 8003842:	4601      	mov	r1, r0
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800384c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003850:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	fa92 f2a2 	rbit	r2, r2
 8003858:	603a      	str	r2, [r7, #0]
  return result;
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	fab2 f282 	clz	r2, r2
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	40d3      	lsrs	r3, r2
 8003864:	4a04      	ldr	r2, [pc, #16]	; (8003878 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003866:	5cd3      	ldrb	r3, [r2, r3]
 8003868:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	080042d0 	.word	0x080042d0

0800387c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003882:	f7ff ffcd 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 8003886:	4601      	mov	r1, r0
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003890:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003894:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	fa92 f2a2 	rbit	r2, r2
 800389c:	603a      	str	r2, [r7, #0]
  return result;
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	fab2 f282 	clz	r2, r2
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	40d3      	lsrs	r3, r2
 80038a8:	4a04      	ldr	r2, [pc, #16]	; (80038bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80038aa:	5cd3      	ldrb	r3, [r2, r3]
 80038ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000
 80038bc:	080042d0 	.word	0x080042d0

080038c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b092      	sub	sp, #72	; 0x48
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80038d0:	2300      	movs	r3, #0
 80038d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80d4 	beq.w	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e4:	4b4e      	ldr	r3, [pc, #312]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10e      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f0:	4b4b      	ldr	r3, [pc, #300]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	4a4a      	ldr	r2, [pc, #296]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fa:	61d3      	str	r3, [r2, #28]
 80038fc:	4b48      	ldr	r3, [pc, #288]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390e:	4b45      	ldr	r3, [pc, #276]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d118      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391a:	4b42      	ldr	r3, [pc, #264]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a41      	ldr	r2, [pc, #260]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003924:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003926:	f7fc fff1 	bl	800090c <HAL_GetTick>
 800392a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392c:	e008      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800392e:	f7fc ffed 	bl	800090c <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b64      	cmp	r3, #100	; 0x64
 800393a:	d901      	bls.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e14b      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003940:	4b38      	ldr	r3, [pc, #224]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800394c:	4b34      	ldr	r3, [pc, #208]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003954:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8084 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003966:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003968:	429a      	cmp	r2, r3
 800396a:	d07c      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800396c:	4b2c      	ldr	r3, [pc, #176]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003976:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800397a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397e:	fa93 f3a3 	rbit	r3, r3
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	461a      	mov	r2, r3
 8003996:	2301      	movs	r3, #1
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800399e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a2:	fa93 f3a3 	rbit	r3, r3
 80039a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80039a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039aa:	fab3 f383 	clz	r3, r3
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	461a      	mov	r2, r3
 80039b2:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	461a      	mov	r2, r3
 80039ba:	2300      	movs	r3, #0
 80039bc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039be:	4a18      	ldr	r2, [pc, #96]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d04b      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ce:	f7fc ff9d 	bl	800090c <HAL_GetTick>
 80039d2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d4:	e00a      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d6:	f7fc ff99 	bl	800090c <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d901      	bls.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e0f5      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80039ec:	2302      	movs	r3, #2
 80039ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
 80039f8:	2302      	movs	r3, #2
 80039fa:	623b      	str	r3, [r7, #32]
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	fa93 f3a3 	rbit	r3, r3
 8003a02:	61fb      	str	r3, [r7, #28]
  return result;
 8003a04:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a06:	fab3 f383 	clz	r3, r3
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f043 0302 	orr.w	r3, r3, #2
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d108      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003a1a:	4b01      	ldr	r3, [pc, #4]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	e00d      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003a20:	40021000 	.word	0x40021000
 8003a24:	40007000 	.word	0x40007000
 8003a28:	10908100 	.word	0x10908100
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	fa93 f3a3 	rbit	r3, r3
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	4b69      	ldr	r3, [pc, #420]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	613a      	str	r2, [r7, #16]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	fa92 f2a2 	rbit	r2, r2
 8003a46:	60fa      	str	r2, [r7, #12]
  return result;
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	fab2 f282 	clz	r2, r2
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	f002 021f 	and.w	r2, r2, #31
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0b7      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a66:	4b5e      	ldr	r3, [pc, #376]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	495b      	ldr	r1, [pc, #364]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d105      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a80:	4b57      	ldr	r3, [pc, #348]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	4a56      	ldr	r2, [pc, #344]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a98:	4b51      	ldr	r3, [pc, #324]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	f023 0203 	bic.w	r2, r3, #3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	494e      	ldr	r1, [pc, #312]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f023 0210 	bic.w	r2, r3, #16
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4947      	ldr	r1, [pc, #284]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003ad4:	4b42      	ldr	r3, [pc, #264]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	493f      	ldr	r1, [pc, #252]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003af2:	4b3b      	ldr	r3, [pc, #236]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	f023 0220 	bic.w	r2, r3, #32
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	4938      	ldr	r1, [pc, #224]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b10:	4b33      	ldr	r3, [pc, #204]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	4930      	ldr	r1, [pc, #192]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d008      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b2e:	4b2c      	ldr	r3, [pc, #176]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	4929      	ldr	r1, [pc, #164]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003b4c:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	4921      	ldr	r1, [pc, #132]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	491a      	ldr	r1, [pc, #104]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b88:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	4912      	ldr	r1, [pc, #72]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003ba6:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	490b      	ldr	r1, [pc, #44]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	4903      	ldr	r1, [pc, #12]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3748      	adds	r7, #72	; 0x48
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40021000 	.word	0x40021000

08003be4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e040      	b.n	8003c78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fc fd62 	bl	80006d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2224      	movs	r2, #36	; 0x24
 8003c10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f82c 	bl	8003c80 <UART_SetConfig>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e022      	b.n	8003c78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f958 	bl	8003ef0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f9df 	bl	8004034 <UART_CheckIdleState>
 8003c76:	4603      	mov	r3, r0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4b8b      	ldr	r3, [pc, #556]	; (8003ed8 <UART_SetConfig+0x258>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6812      	ldr	r2, [r2, #0]
 8003cb2:	6979      	ldr	r1, [r7, #20]
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a79      	ldr	r2, [pc, #484]	; (8003edc <UART_SetConfig+0x25c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d121      	bne.n	8003d40 <UART_SetConfig+0xc0>
 8003cfc:	4b78      	ldr	r3, [pc, #480]	; (8003ee0 <UART_SetConfig+0x260>)
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d817      	bhi.n	8003d38 <UART_SetConfig+0xb8>
 8003d08:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <UART_SetConfig+0x90>)
 8003d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0e:	bf00      	nop
 8003d10:	08003d21 	.word	0x08003d21
 8003d14:	08003d2d 	.word	0x08003d2d
 8003d18:	08003d33 	.word	0x08003d33
 8003d1c:	08003d27 	.word	0x08003d27
 8003d20:	2300      	movs	r3, #0
 8003d22:	77fb      	strb	r3, [r7, #31]
 8003d24:	e01e      	b.n	8003d64 <UART_SetConfig+0xe4>
 8003d26:	2302      	movs	r3, #2
 8003d28:	77fb      	strb	r3, [r7, #31]
 8003d2a:	e01b      	b.n	8003d64 <UART_SetConfig+0xe4>
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e018      	b.n	8003d64 <UART_SetConfig+0xe4>
 8003d32:	2308      	movs	r3, #8
 8003d34:	77fb      	strb	r3, [r7, #31]
 8003d36:	e015      	b.n	8003d64 <UART_SetConfig+0xe4>
 8003d38:	2310      	movs	r3, #16
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	bf00      	nop
 8003d3e:	e011      	b.n	8003d64 <UART_SetConfig+0xe4>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a67      	ldr	r2, [pc, #412]	; (8003ee4 <UART_SetConfig+0x264>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d102      	bne.n	8003d50 <UART_SetConfig+0xd0>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	77fb      	strb	r3, [r7, #31]
 8003d4e:	e009      	b.n	8003d64 <UART_SetConfig+0xe4>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a64      	ldr	r2, [pc, #400]	; (8003ee8 <UART_SetConfig+0x268>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d102      	bne.n	8003d60 <UART_SetConfig+0xe0>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	77fb      	strb	r3, [r7, #31]
 8003d5e:	e001      	b.n	8003d64 <UART_SetConfig+0xe4>
 8003d60:	2310      	movs	r3, #16
 8003d62:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d6c:	d15c      	bne.n	8003e28 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8003d6e:	7ffb      	ldrb	r3, [r7, #31]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d828      	bhi.n	8003dc6 <UART_SetConfig+0x146>
 8003d74:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <UART_SetConfig+0xfc>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003da1 	.word	0x08003da1
 8003d80:	08003da9 	.word	0x08003da9
 8003d84:	08003db1 	.word	0x08003db1
 8003d88:	08003dc7 	.word	0x08003dc7
 8003d8c:	08003db7 	.word	0x08003db7
 8003d90:	08003dc7 	.word	0x08003dc7
 8003d94:	08003dc7 	.word	0x08003dc7
 8003d98:	08003dc7 	.word	0x08003dc7
 8003d9c:	08003dbf 	.word	0x08003dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da0:	f7ff fd4a 	bl	8003838 <HAL_RCC_GetPCLK1Freq>
 8003da4:	61b8      	str	r0, [r7, #24]
        break;
 8003da6:	e013      	b.n	8003dd0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003da8:	f7ff fd68 	bl	800387c <HAL_RCC_GetPCLK2Freq>
 8003dac:	61b8      	str	r0, [r7, #24]
        break;
 8003dae:	e00f      	b.n	8003dd0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db0:	4b4e      	ldr	r3, [pc, #312]	; (8003eec <UART_SetConfig+0x26c>)
 8003db2:	61bb      	str	r3, [r7, #24]
        break;
 8003db4:	e00c      	b.n	8003dd0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003db6:	f7ff fcc9 	bl	800374c <HAL_RCC_GetSysClockFreq>
 8003dba:	61b8      	str	r0, [r7, #24]
        break;
 8003dbc:	e008      	b.n	8003dd0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dc2:	61bb      	str	r3, [r7, #24]
        break;
 8003dc4:	e004      	b.n	8003dd0 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	77bb      	strb	r3, [r7, #30]
        break;
 8003dce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d074      	beq.n	8003ec0 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	005a      	lsls	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	441a      	add	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b0f      	cmp	r3, #15
 8003df2:	d916      	bls.n	8003e22 <UART_SetConfig+0x1a2>
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfa:	d212      	bcs.n	8003e22 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	f023 030f 	bic.w	r3, r3, #15
 8003e04:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	89fb      	ldrh	r3, [r7, #14]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	89fa      	ldrh	r2, [r7, #14]
 8003e1e:	60da      	str	r2, [r3, #12]
 8003e20:	e04e      	b.n	8003ec0 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	77bb      	strb	r3, [r7, #30]
 8003e26:	e04b      	b.n	8003ec0 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e28:	7ffb      	ldrb	r3, [r7, #31]
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d827      	bhi.n	8003e7e <UART_SetConfig+0x1fe>
 8003e2e:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <UART_SetConfig+0x1b4>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e59 	.word	0x08003e59
 8003e38:	08003e61 	.word	0x08003e61
 8003e3c:	08003e69 	.word	0x08003e69
 8003e40:	08003e7f 	.word	0x08003e7f
 8003e44:	08003e6f 	.word	0x08003e6f
 8003e48:	08003e7f 	.word	0x08003e7f
 8003e4c:	08003e7f 	.word	0x08003e7f
 8003e50:	08003e7f 	.word	0x08003e7f
 8003e54:	08003e77 	.word	0x08003e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e58:	f7ff fcee 	bl	8003838 <HAL_RCC_GetPCLK1Freq>
 8003e5c:	61b8      	str	r0, [r7, #24]
        break;
 8003e5e:	e013      	b.n	8003e88 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e60:	f7ff fd0c 	bl	800387c <HAL_RCC_GetPCLK2Freq>
 8003e64:	61b8      	str	r0, [r7, #24]
        break;
 8003e66:	e00f      	b.n	8003e88 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e68:	4b20      	ldr	r3, [pc, #128]	; (8003eec <UART_SetConfig+0x26c>)
 8003e6a:	61bb      	str	r3, [r7, #24]
        break;
 8003e6c:	e00c      	b.n	8003e88 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6e:	f7ff fc6d 	bl	800374c <HAL_RCC_GetSysClockFreq>
 8003e72:	61b8      	str	r0, [r7, #24]
        break;
 8003e74:	e008      	b.n	8003e88 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7a:	61bb      	str	r3, [r7, #24]
        break;
 8003e7c:	e004      	b.n	8003e88 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	77bb      	strb	r3, [r7, #30]
        break;
 8003e86:	bf00      	nop
    }

    if (pclk != 0U)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d018      	beq.n	8003ec0 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	085a      	lsrs	r2, r3, #1
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	441a      	add	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b0f      	cmp	r3, #15
 8003ea8:	d908      	bls.n	8003ebc <UART_SetConfig+0x23c>
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb0:	d204      	bcs.n	8003ebc <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	60da      	str	r2, [r3, #12]
 8003eba:	e001      	b.n	8003ec0 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ecc:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	efff69f3 	.word	0xefff69f3
 8003edc:	40013800 	.word	0x40013800
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40004400 	.word	0x40004400
 8003ee8:	40004800 	.word	0x40004800
 8003eec:	007a1200 	.word	0x007a1200

08003ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01a      	beq.n	8004006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fee:	d10a      	bne.n	8004006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af02      	add	r7, sp, #8
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004044:	f7fc fc62 	bl	800090c <HAL_GetTick>
 8004048:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b08      	cmp	r3, #8
 8004056:	d10e      	bne.n	8004076 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f82d 	bl	80040c6 <UART_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e023      	b.n	80040be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b04      	cmp	r3, #4
 8004082:	d10e      	bne.n	80040a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f817 	bl	80040c6 <UART_WaitOnFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e00d      	b.n	80040be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b09c      	sub	sp, #112	; 0x70
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	4613      	mov	r3, r2
 80040d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d6:	e0a5      	b.n	8004224 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040de:	f000 80a1 	beq.w	8004224 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e2:	f7fc fc13 	bl	800090c <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80040f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d13e      	bne.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004108:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800410c:	667b      	str	r3, [r7, #100]	; 0x64
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004116:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004118:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800411c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e6      	bne.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3308      	adds	r3, #8
 8004130:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	663b      	str	r3, [r7, #96]	; 0x60
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3308      	adds	r3, #8
 8004148:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800414a:	64ba      	str	r2, [r7, #72]	; 0x48
 800414c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004150:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e5      	bne.n	800412a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e067      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d04f      	beq.n	8004224 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800418e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004192:	d147      	bne.n	8004224 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800419c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	e853 3f00 	ldrex	r3, [r3]
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041bc:	637b      	str	r3, [r7, #52]	; 0x34
 80041be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e6      	bne.n	800419e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3308      	adds	r3, #8
 80041d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	613b      	str	r3, [r7, #16]
   return(result);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041f0:	623a      	str	r2, [r7, #32]
 80041f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	69f9      	ldr	r1, [r7, #28]
 80041f6:	6a3a      	ldr	r2, [r7, #32]
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e5      	bne.n	80041d0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2220      	movs	r2, #32
 8004214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e010      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69da      	ldr	r2, [r3, #28]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4013      	ands	r3, r2
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	429a      	cmp	r2, r3
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	461a      	mov	r2, r3
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	429a      	cmp	r2, r3
 8004240:	f43f af4a 	beq.w	80040d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3770      	adds	r7, #112	; 0x70
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <__libc_init_array>:
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	4e0d      	ldr	r6, [pc, #52]	; (8004288 <__libc_init_array+0x38>)
 8004254:	4c0d      	ldr	r4, [pc, #52]	; (800428c <__libc_init_array+0x3c>)
 8004256:	1ba4      	subs	r4, r4, r6
 8004258:	10a4      	asrs	r4, r4, #2
 800425a:	2500      	movs	r5, #0
 800425c:	42a5      	cmp	r5, r4
 800425e:	d109      	bne.n	8004274 <__libc_init_array+0x24>
 8004260:	4e0b      	ldr	r6, [pc, #44]	; (8004290 <__libc_init_array+0x40>)
 8004262:	4c0c      	ldr	r4, [pc, #48]	; (8004294 <__libc_init_array+0x44>)
 8004264:	f000 f820 	bl	80042a8 <_init>
 8004268:	1ba4      	subs	r4, r4, r6
 800426a:	10a4      	asrs	r4, r4, #2
 800426c:	2500      	movs	r5, #0
 800426e:	42a5      	cmp	r5, r4
 8004270:	d105      	bne.n	800427e <__libc_init_array+0x2e>
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004278:	4798      	blx	r3
 800427a:	3501      	adds	r5, #1
 800427c:	e7ee      	b.n	800425c <__libc_init_array+0xc>
 800427e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004282:	4798      	blx	r3
 8004284:	3501      	adds	r5, #1
 8004286:	e7f2      	b.n	800426e <__libc_init_array+0x1e>
 8004288:	080042f8 	.word	0x080042f8
 800428c:	080042f8 	.word	0x080042f8
 8004290:	080042f8 	.word	0x080042f8
 8004294:	080042fc 	.word	0x080042fc

08004298 <memset>:
 8004298:	4402      	add	r2, r0
 800429a:	4603      	mov	r3, r0
 800429c:	4293      	cmp	r3, r2
 800429e:	d100      	bne.n	80042a2 <memset+0xa>
 80042a0:	4770      	bx	lr
 80042a2:	f803 1b01 	strb.w	r1, [r3], #1
 80042a6:	e7f9      	b.n	800429c <memset+0x4>

080042a8 <_init>:
 80042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042aa:	bf00      	nop
 80042ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ae:	bc08      	pop	{r3}
 80042b0:	469e      	mov	lr, r3
 80042b2:	4770      	bx	lr

080042b4 <_fini>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	bf00      	nop
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr
